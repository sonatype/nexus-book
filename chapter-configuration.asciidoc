[[confignx]]
== Configuring Nexus

This chapter covers all aspects of configuring Nexus with the sections
and menu items of the 'Administration' main menu. It can be accessed
by authorized users by pressing the 'Administration' button
image:figs/web/ui-admin-button-icon.png[scale=50] in the main toolbar.

Many of the features shown in this section are only available to
administrative users. The 'Administration' menu contains the following
sections:

////

TBD add link to all the items below once they are documented

////

'Repository':: The 'Repository' section allows you to manage all
'Repositories' and related configurations such as 'Routing' and
'Targets'.

'Staging':: The 'Staging' menu section can be used to configure
'Profiles' and 'Rules' used in the Nexus staging suite.

'CLM':: Allows you to configure the integration of Nexus with
Nexus Lifecycle.

'Security':: This section provides access to all the configuration
features related to authentication and authorization of users
including 'Privileges', 'Roles', 'Users', but also 'LDAP', 'Atlassian
Crowd', 'SSL Certificates' and 'User Token'.

'Support':: Access a number of features that allow you to administer
and monitor your Nexus server successfully like 'Logging' and 'System
Information'.

'System':: The general configuration of Nexus for getting started and
keep it like that with e.g., <<admin-system-http, 'HTTP'>> or
<<admin-system-email,'Email Server'>> settings, but also 'Templates' for
users and 'Tasks' to run regularly.

////

[[getting-started]]
=== Getting Started

tbd ... write about what to do when first getting going, some system
config and some repo config probably, take from other section in book
and training.. 

////


[[admin-system]]
=== System Configuration

The 'System' section of the 'Administration' menu gives you access to
a number of configuration features for Nexus that you typically need
to configure, after successful installation of Nexus. The following
sections detail how to configure aspects such as 'HTTP' and SMTP
parameters as well as regular runs 'Tasks', 'Licensing' and the more
advanced 'Capabilities'-based configuration of various aspects.

[[admin-system-email]]
==== Email Server
Available in image:figs/web/nexus-oss-icon.png[scale=50] 
image:figs/web/nexus-pro-icon.png[scale=50] image:figs/web/nexus-proplus-icon.png[scale=50]


Nexus sends email to users who need to recover user names and
passwords, notifications for staging and a number of other uses. In
order for these notifications to work, configure the SMTP server
settings in the 'Email Server' configuration available via the
'System' section of the 'Administration' menu and displayed in
<<fig-config-administration-smtp>>.

[[fig-config-administration-smtp]]
.Administration SMTP Settings
image::figs/web/config-administration-smtp.png[scale=60]

The 'System email address' parameter defines the email address used in
the +From:+ header of any email sent by Nexus. Typically, this would
be configured as a "Do-Not-Reply" email address or a mailbox or
mailing list monitored by the administrators of the Nexus server.

You can configure the 'Hostname' and 'SMTP server port' of the SMTP
server to use as well as 'Username' and 'SMTP Password'. The 'SMTP
server type' configuration allows you to configure Nexus to to use
'Plain SMTP' or 'Secure SMTP via SSL' to connect to the server or to
use 'Secure SMTP via TLS', which is also known as 'STARTTLS' for the
connection. It upgrades the initially established, plain connection to
be encrypted. In all cases you will need to ensure that the correct
port is used and configured in 'SMTP server port'.

Once you have configured the parameters you can use the 'Verify SMTP
connection' button to confirm the configured parameters and the
successful connection to the server. You will be asked to provide an
email address that should receive a test email message. Successful
sending will be confirmed in another pop up message.

[[admin-system-general]]
==== General Server Settings
Available in image:figs/web/nexus-oss-icon.png[scale=50] 
image:figs/web/nexus-pro-icon.png[scale=50]  image:figs/web/nexus-proplus-icon.png[scale=50]


The 'General' server configuration is available via the
'System' section of the 'Administration' menu and displayed in
<<fig-admin-system-general>>.

You can change the 'Base URL' for your Nexus installation, which is
used when generating links in emails and RSS feeds. For example, the
Nexus instance for Sonatype development is available at
http://respository.sonatype.org, and it makes use of this 'Base URL'
field to ensure that links in emails and RSS feeds point to the
correct URL. Internally Nexus is running on a different port and
context than the public port 80 and root context.

[[fig-admin-system-general]]
.Configuration of General Server Settings
image::figs/web/admin-system-general.png[scale=50]

TIP: This configuration is especially important if Nexus is proxied by
an external proxy server using a different protocol like HTTPS rather
than plain HTTP known to Nexus or a different hostname like
repository.somecompany.com instead of an IP number only.

[[admin-system-http]]
==== HTTP and HTTPS Request and Proxy Settings
Available in image:figs/web/nexus-oss-icon.png[scale=50] 
image:figs/web/nexus-pro-icon.png[scale=50]  image:figs/web/nexus-proplus-icon.png[scale=50]

Nexus uses HTTP requests to fetch content from remote servers. In some
cases a customization of these requests is required. Many
organizations use proxy servers for any outbound HTTP network traffic
and the connection to these proxy serves from Nexus needs to be
configured to allow Nexus to reach remote repositories. All this can
be configured in the 'HTTP' configuration available via the 'System'
section of the 'Administration' menu and displayed in
<<fig-admin-system-http>>.

[[fig-admin-system-http]]
.Configuring HTTP Request Settings
image::figs/web/admin-system-http.png[scale=50]

The HTTP configuration in 'User-agent customization' allows you to
append a string to the +User-Agent+ HTTP header field. This can be a
required customization by your proxy servers.

The 'URL parameters' field can be used to add extra parameters to the
URL of all +GET+ requests sent by Nexus to remote repositories. You
can e.g., use this to add identifying information to requests.

The amount of time Nexus will wait for a request to succeed when
interacting with an external, remote repository can be configured with
the 'Timeout' and 'Retry attempts' settings.

If your Nexus instance needs to reach public repositories like the
Central Repository via a proxy server, you can configure the
connection to a proxy server for HTTP and a potentially a different
for HTTPS connection. If you do not configure a proxy for HTTPS, the
HTTP proxy server settings will be used. To configure a HTTP proxy,
select the checkbox beside 'HTTP Proxy' and configure the parameters
in the sections displayed in <<fig-admin-system-http-proxy>>.

TIP: This is a critical initial step for many Enterprise deployments
of Nexus deployment, since these environments are typically secured
via a HTTP/HTTPS proxy server for all outgoing internet traffic.

[[fig-admin-system-http-proxy]]
.Configuring HTTP Proxy Settings
image::figs/web/admin-system-http-proxy.png[scale=50]

You can specify the 'Host' and 'Port' of the HTTP or HTTPS proxy
server and, optionally, the authentication details for 'Username' and
'Password'. If a Windows NT LAN Manager is used to authenticate with
the proxy server you can configure the needed connections details in
'NT LAN Host' and 'NT LAN Manager Domain'.

In addition, you can configure a number of hosts that can be reached
directly and do not need to go through the proxy in the 'Non Proxy
Hosts' setting. <<fig-admin-system-http-proxy>> shows the 'HTTP Proxy'
administration interface. The HTTPS configuration interface looks the
same and is found below the HTTP configuration.


[[admin-repositories]]
=== Repository Management
Available in image:figs/web/nexus-oss-icon.png[scale=50] 
image:figs/web/nexus-pro-icon.png[scale=50]  image:figs/web/nexus-proplus-icon.png[scale=50]


Repositories are the containers for the components provided to your
users. Configuring repositories is an essential part of your Nexus
configuration. It can be performed in the 'Repository' sub menu of the
the 'Administration' menu.

Nexus supportsproxy repositories, hosted repositories, virtual
repositories and repository groups using a number of different
repository formats.

To manage Nexus repositories, log in as the administrative user and
click on 'Repositories' in the 'Repository' sub menu of the
'Administration' menu.

[[proxy-repository]]
==== Proxy Repository

A repository with the type 'proxy', also known as a proxy repository,
is a repository that is linked to a remote repository. Any request for
a component is checked in the local content of the proxy
repository. If no local component is found, the request is forwarded
to the remote repository. The component is then retrieved and stored
locally. Subsequent requests for the same component are then fulfilled
from the local storage therefore eliminating the network and time
overhead of retrieving the component from the remote repository again.

By default, Nexus ships with the following configured proxy
repositories:

maven-central:: This proxy repository accesses the
http://search.maven.org/[Central Repository], also known as Maven
Central. It is the default component repository built into Apache
Maven and is well supported by other build tools like Gradle, SBT or
Ant/Ivy. It uses the Maven repository format.

nuget.org-proxy:: This proxy repository accesses the
http://www.nuget.org/[NuGet Gallery]. It is the default component
repository used by `nuget` package management tools used for .Net
development.

[[hosted-repository]]
==== Hosted Repository

A repository with the type 'hosted', also known as a hosted repository,
is a repository that stores components in Nexus as the authoritative location for
these components. 

By default, Nexus ships with the following configured hosted
repositories:

maven-releases:: This hosted repository is where your organization can
publish internal releases in a Maven2 format repository. You can also
use this repository for third-party components that are not available
in external repositories. Examples of these components could be
commercial, proprietary libraries such as an Oracle JDBC driver that
may be referenced by your organization.

maven-snapshots:: This hosted repository is where your organization can
publish internal development versions, also known as snapshots, in a
Maven2 format repository.

nuget-hosted:: This hosted repository is where your organization can
publish internal releases in a nuget format repository. You can also
use this repository for third-party components that are not available
in external repositories.

////
tbd delete or add back when we know more
[[virtual-repository]]
==== Virtual Repository

A repository with the type 'Virtual', also known as a virtual
repository serves as an adaptor to and from different types of
repositories. Currently, Nexus supports conversion to and from Maven 1
repositories and Maven 2 repositories. In addition, you can expose any
repository format as a NuGet or OBR repository. For example, a Maven 2
repository can contain OSGi Bundles, which can be exposed as a OSGi
Bundle repository with the virtual repository Provider set to OBR.

By default it ships with a Central M1 shadow repository that exposes
the Central repository in Maven 1 format.
////

ifdef::promo[]
++++
<?dbhtml-include href="promo_managingRepos.html"?>
++++
endif::[]

[[repository-group]]
==== Repository Group

A repository with the type 'group', also known as repository group,
represents a powerful feature of Nexus. They allow you to combine
multiple repositories and other repository groups in a single
repository. This in turn means that your users can rely on a single
URL for their configuration needs, while the Nexus administrators can
add more repositories and therefore components to the repository
group.

Nexus ships with the following groups: 


maven-public:: The 'maven-public' group is a repository
group of Maven2 formatted repositories and combines the important
external proxy repository for the Central Repository with the hosted
repositories 'maven-releases' and 'maven-snapshots'. This allows you
to expose the components of the Central Repositories as well as your
internal components in one single, simple-to-use repository and
therefore URL.

nuget-group:: This group combines the nuget formatted repositories
'nuget-hosted' and 'nuget.org-proxy' into a single repository for
your .Net development with nuget.

[[admin-repository-repositories]]
==== Managing Repositories and Repository Groups

The administration user interface for repositories and repository
groups is available via the 'Repositories' item in the 'Repository'
sub menu of the 'Administration' menu. It allows you to create and
update repositories as well as delete them and perform various
operations for the maintenance. The initial view displayed in
<<fig-admin-repository-repositories-list>> features a list of all
configured repositories and repository groups.

[[fig-admin-repository-repositories-list]]
.List of Repositories
image::figs/web/admin-repository-repositories-list.png[scale=50]

The list of repositories displays some information
for each repository in the following columns

Name:: the name of the repository or repository group

Type:: the type of the repository with values of 'proxy' or 'hosted'
for repositories or 'group' for a repository group

Format:: the format used for the storage in the repository with values
such as 'maven2', 'nuget', or others

Status:: the status of the repository as well as further
information about the status. A functioning repository would show the
status to be 'Online'. Additional information can e.g., be about SSL
certification problems or the status of the remote repository even for
a currently disabled proxy repository

URL:: the direct URL path that exposes the repository via HTTP access
and potentially, depending on the repository format, allows access and
directory browsing

////
Health Check:: the result counts for a repository health check or a
button to start the analysis

TBD as documented in <<rhc>>
////

The 'Create repository' button above the repository list triggers a
dialog to select the provider for the new repository. The provider
combines the format and the type of repository into a single
selection. Depending on your Nexus version and installed plugins, the
list of available choices differs.

For example to create another release repository in Maven2 format, you
would click on the row 'maven2 (hosted)' in the dialog. If you wanted
to proxy another Maven 2 repository, choose 'maven 2 (proxy)'. On the
other hand if you want to proxy a nuget repository, choose 'nuget
(proxy)'.

After this selection, you are presented with the configuration view,
that allows you to fill in the required parameters and some further
configuration. The exact details on the view depends on the selected
repository provider and be identical to the administration
for updating documented in the following sections.

Once you have created a repository or repository group, it is
available in the list for further configuration and management.
Clicking on a specific row allows you to navigate to this repository
specific administration section. An example for the 'maven-central'
repository is displayed in <<fig-admin-repository-repositories-central>>.

[[fig-admin-repository-repositories-central]]
.Repository Configuration for a Proxy Repository
image::figs/web/admin-repository-repositories-central.png[scale=50]


The 'Delete repository' button allows you to delete this repository and all
related configuration and components, after confirming the operating
in a dialog. 

////
The 'More...' button provides a drop down of further supported
operations for the specific repository. These operations vary by
repository format and can include the following:

Expire Cache:: expire the cache of a hosted or a proxy repository or a
repository group

Rebuild Metadata:: rebuid the metadata of a hosted Maven 2 repository

Block Proxy / Allow Proxy:: toggle between allowing or blocking the
remote repository configured in a proxy repository

Put Out Of Service / Put in Service:: enable or disable the repository
service to allow changing the availability of all components in it

Repair Index / Update Index:: repair or update the index of a hosted
or proxy repository or a repository group

The 'Browse' button navigates you to the repository browsing user
interface in Nexus for the specific repository.

The 'Settings' tab allows you to view and update the repository
specific settings for the parameters documented below. Additional tabs
visible will depend on the specific repository format.
////

The configuration combines a number of generic fields that are
applicable for all repositories, with provider specific fields. The
generic fields are:

Name:: The 'Name' is the identifier that will be used in the
Nexus URL. For example, the proxy repository for the Central
Repository has an ID of 'maven-central'.The 'Name' must be
unique in a given Nexus installation and is required.

Format:: 'Format' defines in what format Nexus exposes the repository
to external tools. Supported formats depend on the Nexus edition and
the installed plugins. Examples are 'maven2', 'nuget', 'raw' and others

Type:: The type of repository - 'proxy', 'hosted' or 'group'. You can
not change the type of a repository as it is selected when you create
a repository.

URL::  It shows the user facing URL this means that Maven and
other tools can access the repository directly at
+http://localhost:8081/repository/maven-central+. 

Online:: The checkbox allows you set whether this repository on Nexus
is available to client side tools or not.


Beyond the generic fields a number of different fields are used and
vary depending on the repository format and type.

A hosted repository includes configuration of a 'Deployment
policy'. Itsetting controls how a hosted repository allows or
disallows component deployment. If the policy is set to 'Read-only',
no deployment is allowed. If this policy is set to 'Disable redeploy',
a client can only deploy a particular component once and any attempt
to deploy a component again will result in an error. If the policy is
set to 'Allow redeploy', clients can deploy components to this
repository and overwrite the same component in subsequent
deployments. This option is visible for hosted repositories only.

A proxy repository on the other hand requires the configuration of the
'Remote Storage'. It needs to be configured with the URL of the remote
repository, that should to be proxied. When selecting the URL to proxy
it is beneficial to avoid proxying remote repository groups. Proxying
repository groups prevents some performance optimization in terms of
accessing and retrieving the content of the remote repository. If you
require components from the group that are found in different hosted
repositories on the remote repository server it is better to create
multiple proxy repositories that proxy the different hosted
repositories from the remote server on your Nexus server instead of
simply proxying the group.


////

Use the Nexus truststore:: This checkbox allows you to elect for Nexus to
manage the SSL certificate of the remote repository.


TBD link to SSL chapter once ready

Repository Policy:: snapshot vs release for Maven 2 repo

Download Remote Indexes;; Download the index of a remote repository
can be configured with this setting. If enabled, Nexus will download
the index, if it exists, and use that for its searches as well as
serve that up to any clients that ask for the index (like
m2eclipse). The default for new proxy repositories is enabled, but all
of the default repositories included in Nexus have this option
disabled. To change this setting for one of the proxy repositories
that ship with Nexus, change the option, save the repository, and then
re-index the repository. Once this is done, component search will
return every component available on the Maven Central repository.

Auto Blocking Enabled;; If Auto blocking active is set to true, Nexus
will automatically block a proxy repository if the remote repository
becomes unavailable. While a proxy repository is blocked, components
will still be served to clients from a local cache, but Nexus will not
attempt to locate an component in a remote repository. Nexus will
periodically retest the remote repository and unblock the repository
once it becomes available.

File Content Validation;; If set to true, Nexus will perform a
lightweight check on the content of downloaded files. This will
prevent invalid content to be stored and proxied by Nexus that
otherwise can happen in cases where the remote repository (or some
proxy between Nexus and the remote repository) returns a HTML page
instead of the requested file.

Checksum policy;; Sets the checksum policy for a remote
repository. This option is set to 'Warn' by
default. The possible values of this setting are:
+
* 'Ignore' - Ignore the checksums entirely
* 'Warn' - Print a warning in the log if a checksum is not correct
+
* 'StrictIfExists' - Refuse to cache an component if the calculated
checksum is inconsistent with a checksum in the repository. Only
perform this check if the checksum file is present.
+
* 'Strict' - Refuse to cache an component if the calculated checksum is
inconsistent or if there is no checksum for an component.

Strict Content Type Validation:: tbd

Allow file browsing;; When set to true, users can browse the contents
of the repository with a web browser.

Include in Search;; When set to true, this repository is included when
you perform a search in Nexus. If this setting is false, the contents
of the repository are excluded from a search.

Publish URL;; If this property is set to false, the repository will
not be published on a URL, and you will not be able to access
this repository remotely. You would set this configuration
property to false if you want to prevent clients for
connecting to this repository directly.

Expiration Settings:: Nexus maintains a local cache of components and
metadata, you can configure expiration parameters for a proxy
repository. The expiration settings are:

Not Found Cache TTL;; If Nexus fails to locate an component, it will
cache this result for a given number of minutes. In other words, if
Nexus can't find an component in a remote repository, it will not
perform repeated attempts to resolve this component until the 'Not
Found Cache TTL' time has been exceeded. The default for this setting
is 1440 minutes (or 24 hours).

Maximum artifact age;; Tells Nexus what that maximum age of an artifact
is, before it retrieves a new version from the remote repository.  The
default for this setting is -1 for a repository with a release policy
and 1440 for a repository with snapshot policy.

Metadata Max Age;; Nexus retrieves metadata from the remote
repository. It will only retrieve updates to metadata after the
'Metadata Max Age' has been exceeded. The default value for this
setting is 1440 minutes (or 24 hours).

Item Max Age;; Some items in a repository may be neither an artifact
identified by the Maven GAV coordinates or metadata for such components. This
cache value determines the maximum age for these items before
updates are retrieved. 

Authentication;; This section allows you to set a Username, Password,
NT LAN Host, and NT Lan Manager Domain for a remote repository.

HTTP Request Settings:: In the 'HTTP Request Settings' you can change
the properties of the HTTP request to the remote repository. You can
also configure the 'User Agent' of the request, add parameters to a
request, and set the timeout and retry behavior. The HTTP request
configured is the request made from Nexus to the remote repository
being proxied.
////

.Repository Groups

The creation and configuration for a repository group differs a little
from pure repositories. It allows you to manage the member
repositories of a repository group. An example for a repository group
using the Maven2 format is visible in <<fig-group-config>>. In this
figure you can see the contents of the 'maven-pulbic' group
that is pre-configured in Nexus.

[[fig-group-config]]
.Repository Group Configuration
image::figs/web/repository-manager_add-to-group.png[scale=50]

The 'Format' and 'Type' are determined by the selection of the
provider in the creation dialog e.g., 'maven2 (group)' for the
'maven-public' as a Maven2 format repository group.

The 'Name' is set during the creation and is fixed once the repository
group is created.


The 'Member repositories' selector allows you to add repositories to
the repository group as well as remove them. The 'Members' column
includes all the repositories that constitute the group. Note that the
order of the repositories listed in the 'Member' section is
important. When Nexus searches for a component in a repository group,
it will return the first match. To reorder a repository in this list,
click and the drag the repositories and groups in the 'Members' list
or use the arrow buttons between the 'Available' and 'Members'
list. These arrows can be used to add and remove repositories as well.

The order of repositories or other groups in a group can be used to
influence the effective metadata that will be retrieved by Maven or
other tools from a Nexus Repository Group. We recommend placing hosted
repositories higher in the list than proxy repositories. For proxy
repositories Nexus needs to periodically check the remote for updates,
which will incur more overhead than a hosted repository lookup.

We also recommend placing repositories with a higher probability of
matching the majority of components higher in this list. If most of
your components are going to be retrieved from the Central Repository,
putting 'Central' higher in this list than a smaller, more focused
repository is going to be better for performance, as Nexus is not
going to interrogate the smaller remote repository for as many missing
components. These best practices are implemented in the default
configuration.


==== Repository Management Example

The following sections detail some common steps of your repository
management efforts on the example of a Maven 2 repository.

[[config-sect-custom]]  
.Adding Repositories for Missing Dependencies

If you've configured your Maven +settings.xml+ or other build tool
configuration to use the Nexus +maven-public+ repository group as a
mirror for all repositories, you might encounter projects that are
unable to retrieve components from your local Nexus installation.

This usually happens because you are trying to build a project that
has defined a custom set of repositories and snapshot repositories or
relies on the content of other publically available repositories in
its configuration. When you encounter such a project all you have to
do is 

* add this repository to Nexus as a new Maven2 format, proxy repository
* and then add the new proxy repository to the 'maven-public' group.

The advantage of this approach is that no configuration change on the
build tool side is necessary at all.

[[config-sect-new-repo]]
.Adding a New Repository

Once you have established the URL and format of the remote repository
you are ready to configure Nexus. E.g. the JBoss.org releases
repository contains your missing component. Click on the 'Create
repository' button in the 'Repositories' feature view and click on
'maven2 (proxy)' from the list in the dialog.

In the configuration dialog:

* Set 'Name' set to +JBoss.org Releases+
* Set 'Remote storage' set to
  +https://repository.jboss.org/nexus/content/repositories/releases/+
* For a Maven2 format repositry, confirm that the 'Repository policy'
  is set correctly to 'Release'.
* Click on the 'Create repository' button at the end of the form

Nexus will then be configured to proxy the repository. If the
remote repository contains snapshots as well as release components,
you will need to repeat the process creating a second proxy repository
with the same URL setting repository policy to 'Snapshots' in the repository
type dialog.

[[config-sect-repo-group]]  
.Adding a Repository to a Group

Next you will need to add the new repositories to the 'maven-public'
Nexus repository group. To do this, click on the row of the
'maven-public' group in the 'Repositories' feature view.

To add the new repository to the public group, find the repository in
the 'Available' list on the left, click on the repository you want to
add and drag it to the right to the 'Members' list. Once the
repository is in that list, you can click and drag the repository
within that list to alter the order in which a repository will be
searched for a matching component. Press the 'Save' button to complete
this configuration.

In the last few sections, you learned how to add a new custom
repositories to a build in order to download components that are not
available in the Central Repository.

If you were not using a repository manager, you would have added these
repositories to the repository element of your project's POM, or you
would have asked all of your developers to modify +~/.m2/settings.xml+
to reference two new repositories. Instead, you used the Nexus
repository manager to add the two repositories to the public group. If
all of the developers are configured to point to the public group in
Nexus, you can freely swap in new repositories without asking your
developers to change local configuration, and you've gained a certain
amount of control over which repositories are made available to your
development team. In addition the performance of the component
resolving across multiple repositories will be handled by Nexus and
therefore be much faster than client side resolution done by Maven
each time.

[[admin-support]]
=== Support Features

Nexus provides a number of features that allow you to ensure your
server is configured correctly and provides you with tools to
investigate details about the configuration. This information can be
useful for troubleshooting and support activities.

All support features are available in the 'Support' group of the
'Administration' menu in the main menu section.

[[analytics]]
==== Analytics

The analytics integration of Nexus allow Sonatype to gather data about
of your Nexus usage, since it enables the collection of event data in
Nexus. It collects non-sensitive information about how you are using
Nexus and allows Sonatype to achieve a better understanding of Nexus
usage overall and therefore drive production innovation following your
needs

The collected information is limited the primary interaction points
between your environment and Nexus. None of the request specific data
(e.g., credentials or otherwise sensitive information) is ever
captured.

TIP: The data is can be useful to you from a compatibility
perspective, since it gathers answers to questions such as what
features are most important, where are users having difficulties, and
what integrations/APIs are actively in use.


You can enable the event logging in the 'Analytics' feature view
available via 'Analytics' menu item in the 'Support' section of the
'Administration' menu. Select the checkbox beside 'Collect analytics
events' and press the 'Save' button.

You can choose to provide this data automatically to Sonatype by
selecting the checkbox beside 'Enable anonymized analytics submission
to Sonatype'. It enables Sonatype to tailor the ongoing development of
the product. Alternatively, you can submit the data manually or just
use the gathered data for your own analysis only.

Once enabled, all events logged can be inspected in the 'Events'
feature view available via the 'Analytics' section of the
'Administration' menu displayed in <<fig-analytics-events>>.

[[fig-analytics-events]]
.List of Analytics Events
image::figs/web/analytics-events.png[scale=50]

The list of events shows the 'Event type', the 'Timestamp', the
'Sequence' number and the 'Duration' of the event as well as the
'User' that triggered it and any 'Attributes'. Each row has a '+'
symbol in the first column that allows you to expand the row
vertically. Each attribute will be expanded into a separate line
allowing you to inspect all the information that is potentially
submitted to Sonatype.

The 'User' value is replaced by a salted hash so that no username
information is transmitted. The 'Anonymization Salt' is automatically
randomly generated by Nexus and can optionally be configured in the
'Analytics: Collection' capability manually. This administration area
can additionally be used to change the random identifier for the Nexus
instance.

////
tbd pending addition of capabilities docs
TIP: More information about capabilities can be found in <<capabilities>>.
////

If you desire to further inspect the data that is potentially
submitted, you can select to download the file containing the JSON
files in a zip archive by clicking the 'Export' button above the
events list and downloading the file. The 'Submit' button can be used
to manually submit the events to Sonatype.

IMPORTANT: Sonatype values your input greatly and hopes you will
activate the analytics feature and the automatic submission to allow
us to ensure ongoing development is well aligned with your needs. In
addition, we appreciate any further direct contact and feedback in
person and look forward to hearing from you.

[[logging]]
==== Logging

You can configure the level of logging for Nexus and all plugins as
well as inspect the current log using the Nexus user interface with
the 'Logging' and the 'Log Viewer' feature views. 

Access the 'Logging' feature view displayed in <<fig-logging>> with
the 'Logging' menu item in the 'Support' section in the
'Administration' main menu.

[[fig-logging]]
.The Logging Feature View for Configuring Loggers
image::figs/web/logging.png[scale=60]

The 'Logging' feature view allows you to configure the preconfigured
loggers as well as add and remove loggers. You can modify the log
level for a configured logger by clicking on the 'Level' value e.g.,
+INFO+. It will change into a drop-down of the valid levels including
+OFF+, +DEFAULT+, +INFO+ and others. Press the 'Update' button to
apply the change.

If you select a row in the list of loggers, you can delete the
highlighted logger by pressing the 'Delete logger' button above the
list. The 'Create logger' button beside it can be used to create new
loggers. You will need to know the 'Logger name' you want to
configure. Typically this corresponds to the Java package name used in
the source code. Depending on your needs you can inspect the source of
Nexus OSS and the plugins as well as the source of your own plugins to
determine the related loggers or contact Sonatype support for detailed
help. 

IMPORTANT: When upgrading Nexus, keep in mind that some loggers change
between Nexus versions, so if you rely on specific loggers, you might
have to reconfigure them.

The 'Reset to default levels' button allows you to remove all your
custom loggers and get back to the setup shipped with Nexus.

The loggers configured in the user interface are persisted into
+sonatype-work/nexus/etc/logback-overrides.xml+ and override any
logging levels configured in the main Nexus log file
+logback-nexus.xml+ as well as the other +logback-*+ files. If you
need to edit a logging level in those files, we suggest to edit the
overrides file. This will give you access to edit the configuration in
the user interface at a later stage and also ensure that the values
you configure take precedence.

The 'ROOT' logger level controls how verbose the Nexus logging is in
general. If set to +DEBUG+, Nexus will be very verbose, printing all log
messages including debugging statements. If set to +ERROR+, Nexus will be
far less verbose, only printing out a log statement if Nexus encounters
an error. +INFO+ represents an intermediate amount of logging. 

TIP: When configuring logging, keep in mind that heavy logging can
have a significant performance impact on an application and any
changes trigger the change to the logging immediately.

Once logging is configured as desired, you can inspect the impact of
your configuration in the 'Log Viewer' feature view. It allows you to
copy the log from the server to your machine by pressing the
'Download' button. The 'Create mark' button allows you to add a custom text
string into the log, so that you can create a reference point in the
log file for an analysis of the file. It will insert the text you
entered surrounded by +*+ symbols as visible in
<<fig-log-viewer>>.

[[fig-log-viewer]]
.Viewing the Nexus Log with an Inserted Mark
image::figs/web/log-viewer.png[scale=60]

The 'Refresh interval' configuration on the right on the top of the
view allows you to configure the timing for the refresh as well as the
size of the log displayed. A manual refresh can be triggered with the
general refresh button in the main toolbar.


////

==== Metrics

tbd

==== Support Request

tbd

////

[[support-zip]]
==== Support ZIP

The 'Support ZIP' feature view allows you to create a ZIP archive file
that you can submit to Sonatype support via email or a support
ticket. The checkboxes in 'Contents' and 'Options' allow you to
control the content of the archive.

You can include the 'System information report' as available in the
'System Information' tab, a 'JVM thread-dump' of the JVM currently
running Nexus, your Nexus general 'Configuration files' as well as you
'Security configuration files', the Nexus 'Log files' and 'System and
component metrics' with network and request-related information and
'JMX information'.

The 'Options' allow you to limit the size of the included files as
well as the overall ZIP archive file size. Pressing the 'Create
support ZIP' button gathers all files, creates the archive in
`sonatype-work/nexus/downloads/support` and opens a dialog to download
the file to your workstation. This dialog shows the 'Name', 'Size' and
exact 'Path' of the support ZIP file.

[[system-information]]
==== System Information

The 'System Information' feature view displays a large number of configuration
details related to 

Nexus:: details about the versions of Nexus and the installed plugins,
Nexus install and work directory location, application host and port
and a number of other properties.

Java Virtual Machine:: all system properties like +java.runtime.name+,
+os.name+ and many more as known by the JVM running Nexus

Operating System:: including environment variables
like +JAVA_HOME+ or +PATH+ as well as details about the runtime in
terms of processor, memory and threads, network connectors and storage
file stores.

You can copy a subsection of the text from the panel or use the
'Download' button to retrieve a JSON-formatted text file.


////
[[admin-security]]
=== Security
////

 
////


[[config-sect-security]]
==== Security Settings

The security settings displayed in
<<fig-config-administration-security>> allow you to activate and
prioritize security realms by adding them to the 'Selected Realms'
list on the left and placing them higher or lower on the list.

[[fig-config-administration-security]]
.Administration Security Settings
image::figs/web/config-administration-security.png[scale=60]

Effectively, this configuration determines what authentication realm is
used to grant a user access and the order the realms are used.

Xml Authenticating and Xml Authorizing Realm:: These identify the
Nexus internal storage uses XML files for storing the security
details.

(Enterprise) LDAP Authentication Realm:: This realm identifies
external storage in an LDAP system with details documented in
<<ldap>>.

Crowd Realm:: This realm identifies external storage in an Atlassian
Crowd system with details documented in <<crowd>>.

Rut Auth Realm:: This realm is external authentication in any system
with the user authorization passed to Nexus in a HTTP header field
with details documented in <<remote-user>>.

The 'User Token Realm' is required for user token support documented
in <<config-sect-usertoken>> and the 'NuGet API-Key Realm' is needed
for NuGet support documented in <<nuget>>.

In addition, you can enable or disable anonymous access and set the
username and password for anonymous access. The anonymous username and
password are used to integrate with other realms that may need a
special username for anonymous access.  In other words, the username
and password here are what we attempt to authorize when someone makes
an anonymous request. You would change the anonymous username to
+guest+ if you wanted to integrate Nexus with Microsoft's Active
Directory.

==== PGP Key Server Information

Nexus Pro uses a PGP Key Server to retrieve PGP keys when
validating component signatures. To add a new key server, enter the
URL in the 'Key Server URL' field and click on the 'Add' button. To remove
a key server, click on the URL you wish to remove from the list
and click on the 'Remove' button. Key servers are consulted in the order
that they are listed in the 'Key Server URLs' list. To reorder your key
servers, click and drag a URL in the 'Key Server URLs' list.

[[fig-config-administration-pgp-key-server]]
.Administration PGP Key Server Information
image::figs/web/config-administration-pgp-key-server.png[scale=60]


==== Viewing the Summary Panel for a Repository

The 'Summary' panel can be loaded by selecting a hosted, proxy, or
virtual repository and then clicking on the 'Summary'
tab. The 'Summary' tab of a hosted repository, as shown
in <<fig-configuring-summary-hosted>>, displays the
+distributionManagement+ settings that can be used to configure
Maven to publish components to the hosted repository.

[[fig-configuring-summary-hosted]]
.Repository Summary Panel for a Hosted Repository
image::figs/web/repository-manager_summary-hosted.png[scale=60]

The 'Summary' panel for a proxy repository, as shown in
<<fig-configuring-summary-proxy>>, contains all of the repository
identifiers and configuration as well as a list of groups in which
the repository is contained.

[[fig-configuring-summary-proxy]]
.Repository Summary Panel for a Proxy Repository
image::figs/web/repository-manager_summary-proxy.png[scale=60]

The 'Summary' panel for a virtual repository, as shown in
<<fig-configuring-summary-virtual>>, displays repository identifiers
and configuration as well as the groups in which the repository is
contained.

[[fig-configuring-summary-virtual]]
.Repository Summary Panel for a Virtual Repository
image::figs/web/repository-manager_summary-virtual.png[scale=60]

==== Auto Block/Unblock of Remote Repositories

What happens when Nexus is unable to reach a remote repository? If
you've defined a proxy repository and the remote repository is
unavailable, Nexus will now automatically block the remote repository.
Once a repository has been auto-blocked, Nexus will then periodically
retest the remote repository and unblock the repository once it
becomes available. You can control this behavior by changing the 'Auto
Blocking Enabled' setting under the 'Remote Repository Access' section
of the proxy repository configuration as shown in the following figure
to 'True':

.Configuring Remote Repository Auto Block/Unblock
image::figs/web/configuring_auto-block.png[scale=75]




[[confignx-sect-managing-routes]]
=== Managing Routing

Routing can be considered the internal activities Nexus performs in
order to determine where to look for a specific component in a
repository. The routing information has an impact on the performance
of component retrieval as well as determining the availability of
components.

A large portion of the performance gains achievable with correct and
optimized routing information is configured by Nexus itself with
automatic routing, documented in <<automatic-routing>>. Fine grained
control and further customizations in terms of access provision can be
achieved with some manual routing configuration documented in
<<manual-routing>>.

[[automatic-routing]]
==== Automatic Routing 

Automatic routing is handled by Nexus on a per repository
basis. You can access the configuration and further details in the
Routing tab after selecting a repository in the list accessible via the
'Repositories' item in the the 'Views/Repositories' left-hand menu.

The routing information consists of the top two levels of the
directory structure of the repository and is stored in a prefixes.txt
file. It allows Nexus to automatically route only component requests
with the corresponding groupId values to a repository, as found in the
text file. This, in turns, avoids unnecessary index or even remote
repository access and therefore greatly improves performance.

Nexus generates the prefixes.txt file for a hosted repository and
makes it available for remote downloads. Each deployment of a new
component will trigger an update of the file for the hosted repository
as well as the prefix files for any repoisitory groups that contain
the hosted repository. You can access it in the 'Routing' tab of a
hosted repository as displayed in <<fig-automatic-routing-hosted>> by
clicking on the 'Show prefix file' link on the right. In addition, the
'Publishing' section shows the 'Status' of the routing information, a
'Message' with further details, and the date and time of the last
update in the 'Published On' field.

[[fig-automatic-routing-hosted]]
.Automatic Routing for a Hosted Repository
image::figs/web/automatic-routing-hosted.png[scale=60]

The 'Routing' tab for a proxy repository displayed in
<<fig-automatic-routing-proxy>> contains the Discovery section. It
displays the 'Status' and a more detailed 'Message' about the prefix
file access. The 'Last run' field displays the date and time of the
last execution of the prefix file discovery. Such an execution can be
triggered by pressing the 'Update now' button. Otherwise, the 'Update
Interval' allows you to trigger a new discovery every one, two, three,
six, nine or twelve hours or as a daily or weekly execution. 

[[fig-automatic-routing-proxy]]
.Automatic Routing for a Proxy Repository
image::figs/web/automatic-routing-proxy.png[scale=60]

For a proxy repository, the prefix file is either downloaded from
the remote repository or a generation is attempted by scraping the
remote repository. This generation is not attempted for remote Nexus
repository groups, since they are too dynamic in nature and should not
be proxied directly. Scraping of hosted or proxy repositories as well
as Subversion-based repositories is supported.

The generation of the prefix file in all the Nexus deployments
proxying each other greatly improves performance for all Nexus
instances. It lowers network traffic and load on the servers, since
failing requests and serving the respective HTTP error pages for a
component that is not found is avoided for each component. Instead,
the regularly light weight download of the prefix file establishes a
good high-level knowledge of components available.

Automatic Routing is configured by Nexus automatically brings
significant performance benefits to all Nexus instances proxying each
other in a network and on the wider internet. It does not need to be
changed apart from tweaking the update interval. To exercise even
finer control than provided by Automatic Routing use Routing as
documented in <<manual-routing>>.

[[manual-routing]]
==== Manual Routing Configuration

Nexus routes are like filters you can apply to groups in terms
of security access and general component retrieval, and can reduce the
number of repositories within a group accessed in order to retrieve an
component. The administration interface for routes can be accessed via
the 'Routing' menu item in the 'View/Repositories' menu in the left-hand
navigation panel.

Routes allow you to configure Nexus to include or exclude specific
repository content paths from a particular component search when Nexus
is trying to locate an component in a repository group. There are a
number of different scenarios in which you might configure a route.

The most commonly configured scenario is when you want to make sure
that you are retrieving components in a particular group ID from a
particular repository. This is especially useful when you want your
own organization's components from the hosted Release and Snapshot
repositories only.

Routes are applicable when you are trying to resolve an component from
a repository group. Using routes allows you to modify the repositories
Nexus will consult when it tries to resolve an component from a group
of repositories.

[[fig-route-config]]
.Routing Configuration Screen in Nexus
image::figs/web/repository-manager_route-config.png[scale=60]

<<fig-route-config>> shows the 'Routing' configuration
screen. Clicking on a route will bring up a screen that will allow
you to configure the properties of a route. The configuration options
available for a route are:

URL Pattern::
    Nexus uses the 'URL Pattern' will use to match a request to
    Nexus. If the regular expression in this pattern is matched, Nexus
    will either include or exclude the listed repositories from a
    particular component query. In <<fig-route-config>>
    the two patterns are:

    +.\*/(com|org)/somecompany/.*+;; This pattern would match all
    paths which includes either +/com/somecompany/+ or
    +/org/somecompany/+. The expression in the parenthesis matches
    either com or org, and the +.*+ matches zero or more
    characters. You would use a route like this to match your own
    organization's components and map these requests to the hosted
    Releases and Snapshots repositories.

    +.\*/org/some-oss/.*+;; This pattern is used in an exclusive
    route. It matches every path that contains +/org/some-oss/+. This
    particular exclusive route excludes the local hosted Releases and
    Snapshots directory for all components that match this path.  When
    Nexus tries to resolve components that match this path, it will
    exclude the Releases and Snapshots repositories.

    Example "(?!/org/some-oss/.*).*";; Using this pattern in an
    exclusive route allows you to exclude everything, except the
    "org/some-oss" project(s).

Rule Type:: Rule Type can be either 'inclusive', 'exclusive' or 'blocking'. An
inclusive rule type defines the set of repositories that should be
searched for components when the URL pattern has been matched. An
exclusive rule type defines repositories which should not be searched
for a particular component. A blocking rule will completely remove
accessibility to the components under the specific pattern in a
specified repository group.

Ordered Route Repositories:: Nexus searches an ordered list of
repositories to locate a particular component.  This order only affects
the order of routes used and not the order of the repositories
searched. That order is set by the order of the repositories in the
group repository's configuration.

In <<fig-route-config>> you can see the two dummy routes that Nexus
has configured as default routes. The first route is an inclusive
route, and it is provided as an example of a custom route an
organization might use to make sure that internally generated
components are resolved from the Releases and Snapshots repositories
only. If your organization's group IDs all start with
+com.somecompany+, and if you deploy internally generated components to
the Releases and Snapshots repositories, this Route will make sure
that Nexus doesn't waste time trying to resolve these components from
public repositories like the Central Repository or the Apache
Snapshots repository.

The second dummy route is an exclusive route. This route excludes the
Releases and Snapshots repositories when the request path contains
+/org/some-oss+. This example might make more sense if we replaced
+some-oss+ with +apache+ or +codehaus+. If the pattern was
+/org/apache+, this rule is telling Nexus to exclude the internal
Releases and Snapshots repositories when it is trying to resolve these
dependencies. In other words, don't bother looking for an Apache
dependency in your organization's internal repositories.

TIP: Exclusive rules will positively impact performance, since the
number of repositories that qualify for locating the component, and
therefore the search effort is reduced.

What if there is a conflict between two routes? Nexus will process
inclusive routes before it will process the exclusive routes.
Remember that routes only affect Nexus' resolution of components when
it is searching a Group. When Nexus starts to resolve an component from
a repository group it will start with the list of repositories in a
group. If there are matching inclusive routes, Nexus will then take
the intersection of the repositories in the group and the repositories
in the inclusive route. The order as defined in the group will not be
affected by the inclusive route. Nexus will then take the result of
applying the inclusive route and apply the exclusive route to that
list of repositories. The resulting list is then searched for a
matching component.

One straightforward use of routes is to create a route that excludes
the Central Repository from all searches for your own organization's
hosted components. If you are deploying your own components to Nexus
under a groupId of +org.mycompany+, and if you are not deploying these
components to a public repository, you can create a rule that tells
Nexus not to interrogate Central for your own organization's
components. This will improve performance because Nexus will not need
to communicate with a remote repository when it serves your own
organization's components. In addition to the performance benefits,
excluding the Central Repository from searches for your own components
will reduce needless queries to the public repositories.

TIP: This practice of defining an inclusive route for your internal
components to only hit internal repositories is a crucial best practice
of implementing a secure component usage in your
organization and a recommended step for initial Nexus
configuration. Without this configuration, requests for internal
components will be broadcasted to all configured external proxy
repositories. This could lead to an information leak, where e.g., your
internet traffic reveals that your organization works on a component
with the component coordinates of
+com.yourcompany.website:new-super-secret-feature:1.0-SNAPSHOT+.


In addition to defining inclusive and exclusive routes, you can define
blocking routes. A blocking route can be created by creating a route
with no repositories in the ordered list of repositories. It allows
you to completely block access to components with the specified
pattern(s) from the group. As such, blocking routes are a simplified,
coarse-grained access control.

TIP: Check out <<procure>> for fine-grained control of artifact
availability and use blocking routes sparingly.


To summarize, there are creative possibilities with routes that the
designers of Nexus may not have anticipated, but we advise you to
proceed with caution if you start relying on conflicting or
overlapping routes.  Use routes sparingly, and use coarse URL
patterns. Remember that routes are only applied to groups and are
not used when an component is requested from a specific repository.

[[scheduled-tasks]]
=== Managing Scheduled Tasks

Nexus allows you to schedule tasks that will be applied to all
repositories or to specific repositories on a configurable
schedule. Use the 'Scheduled Tasks' menu item in the 'Administration'
menu to access the screen, shown in <<fig-repomap-scheduled>>, that
allows you to manage your Scheduled Tasks.

[[fig-repomap-scheduled]]
.Managing Nexus Scheduled Tasks
image::figs/web/repository-manager_schedule-service.png[scale=50]

The list interface allows you to 'Add' new tasks and 'Run', 'Cancel', and
'Delete' existing tasks as well as 'Refresh' the list with respective
buttons above the list.

When creating or updating a scheduled task, you can configure the
following properties:

Enabled:: Enable or disable a specific task.

Name:: Provide a name to identify the task in the user interface and
log files.

Task Type:: Specify the type of action the scheduled task
executes. The list of available task types is documented in more
detail below.

Task Settings:: Configure the task settings specific to the selected task
type. Tasks affecting a repository have a setting called
'Repository/Group' that allows you to let the task affect all
repositories and groups or only a specific one.

Alert Email:: Configure a notification email for task execution
failures. If a scheduled task fails a notification email containing
the task identifier and name as well as the stack trace of the failure
will be sent to the configured email recipient. 

Recurrence:: configure the schedule for the task executions. Available
choices are Manual, Once, Hourly, Daily, Weekly, Monthly and
Advanced. All choices provide a custom user interface
for scheduling the specific recurrence. Weekly scheduling requires at
least one day of the week to be selected. The Advanced setting allows
you to provide a CRON expression to configure more complex
schedules.

The following kinds of scheduled task types are available:

Backup All Nexus Configuration Files:: This scheduled task will
archive the contents of the +sonatype-work/nexus/conf+ directory.
Once a backup has been run, the contents of the backup will be
available in +sonatype-work/nexus/backup+ in a series of ZIP archives
that use a datetimestamp in the filename. This task is a feature of
Nexus Pro.

Download Indexes:: This scheduled task will cause Nexus to download
indexes from remote repositories for proxied repositories. The
Download Remote Indexes configuration also needs to be enabled on the
proxy repository.

Download NuGet Feed:: This task allows you to download the feed for a
NuGet proxy repository. For one-time invocation, you can enable the
'Clear feed cache?' setting, which will delete the cache completely and
re-fetch all data. The setting 'Fetch all versions?' will trigger the
download of all versions of an component in contrast to the default
behavior of getting only the latest version.

Drop Inactive Staging Repositories:: Staging repositories can be
dropped by user interaction or automated systems using the Nexus
Staging Maven Plugin or Ant Task or a REST API call. Heavy users of
the Nexus staging features observe that some staging and build
promotion repositories are inevidently left behind. This scheduled
task can be used to drop all these repositories.  You can configure
the duration of inactivity to include the days after the repositories
are dropped as well as the status of the repositories. Any change of
the staging repository like a state change from open to closed to
promoted or released as well other changes to the repository meta data
like a description update are counted as an activity. You can
configure to 'Scan open repositories', 'Scan closed repositories',
'Scan promoted repositories' and 'Scan released repositories' for
inactivity and therefore potentially drop them with this task. This
will allow you to avoid accumulating a large number of stale staging
repositories.

Empty Trash:: The Evict and Purge actions do not delete data from the
Nexus working directory. They simply move data to be cleared or
evicted to a trash directory under the Nexus work directory. This
task deletes the data in this trash directory older than the number of
days specified in the task setting 'Purge Items older than (days)'.

Evict Unused Proxied Items From Repository Caches:: This scheduled
task tells Nexus to delete all proxied items that haven't been "used"
(referenced or retrieved by a client) in a number of days as specified
in Evict Items older than (days). This can be a good job to run if you
are trying to conserve storage space and do not need all of the
components in the future e.g., to reproduce old builds without renewed
retrieval. This is particularly useful for a personal Nexus deployment
with a large change rate of components combined with limited diskspace.

Expire Repository Caches:: Repositories have several caches to improve
performance. This task expires the caches causing Nexus to recheck the
remote repository for a proxy repository or the file system for a
hosted repository. You can configure the repository or group to be
affected with the task setting Repository/Group. Alternatively you can
provide a Repository Path to configure the content that should be
expired.

Mirror Eclipse Update Site:: The P2 plugin
allows you to mirror Eclipse update sites. This task can be used to
force updates of repositories that went out of sync.

Optimize Repository Index:: To speed up searches in Nexus, this task
tells the internal search engine to optimize its index files. This has
no affect on the indexes published by Nexus. Typically, this task does
not have to run more than once a week.

Publish Indexes:: Just as Maven downloads an index from a remote
repository, Nexus can publish an index in the same format. This will
make it easier for people using m2eclipse or Nexus to interact with
your repositories.
 
Purge Nexus Timeline:: Nexus maintains a lot of data that relates to
the interaction between itself, proxied remote repositories, and
clients on Nexus.  While this information can be important for
purposes of auditing, it can also take up storage space. Using this
scheduled task you can tell Nexus to periodically purge this
information. The setting "Purge Items older than (days)" controls the
age of the data to be deleted.
 
Purge Orphaned API Keys:: This scheduled tasks will delete old, unused
API keys generated and used by various plugins. For example, it should
be scheduled when using the User Token feature or NuGet
repositoriies. It will purge orphaned API keys e.g., after users reset
their token and should be scheduled to run regularly, specifically
when internal security policies for password resets and you are using
an external security provider like LDAP with this requirement for
resets to access Nexus.
 
Rebuild Maven Metadata Files:: This task will rebuild the
maven-metadata.xml files with the correct information and will also
validate the checksums (.mh5/.sha1) for all files in the specified
Repository/Group. Typically this task is run manually to repair a
corrupted repository.

Rebuild NuGet Feed:: If you are using NuGet, pushing your components
into a NuGet hosted repository and are proxying that repository to
other users, this task can be used to rebuild the feed.
 
Rebuild P2 metadata and Rebuild P2 repository:: These tasks can be
used to rebuild the metadata or the full repository with a P2
format. You can specify a Repository/Group or a Repository Path to
determine which content to affect.
 
Remove Releases From Repository:: In many use cases of a repository
manager, it is necessary to keep release components for long periods
of time or forever. This can be necessary for reproducibility reasons,
in order to ensure users have access to old versions or even just for
audit or legal reasons. However, in other use cases, there is no value
in keeping old release components. One example would be a when using a
continuous delivery approach onto a single deployment platform with no
roll back support. In other cases, it could also be impractical due to
the mere number and size of the release components.
+ 
This scheduled task allows you to trigger the deletion of release
components, supporting these use cases taking care of meta data
updates, and removing the need to manually delete the components or use
an external system to trigger the deletion.
+ 
To configure the task, you specifiy the repository where release
components are to be deleted as well as the number of component
versions to keep for a specific groupId and artifactId coordinate. The
task generates a list of all versions of a component for each groupId
and artifactId coordinate combination and sorts it according to the
version number. The ordering is derived by parsing the version string
and supports http://semver.org[sematic versioning] with additional
semantics for specific classifiers. Further details can be
found in the documentation for the implementing class
http://sonatype.github.io/sonatype-aether/apidocs/org/sonatype/aether/util/version/GenericVersionScheme.html[GenericVersionScheme].
+
Optionally, the 'Repository Target' parameter can be used to narrow
down the content of the repository that is analyzed, to determine if
any deletion should occur. Choosing +All(Maven2)+ is suitable to cause
all Maven 2-formatted repositories to be analysed. If you want to only
target a specific groupId and artifactId combination or a number of
them you can create a suitable repository target as documented in
<<confignx-sect-managing-repo-targets>> and use it in the
configuration of the scheduled task.
 
Remove Snapshots from Repository:: Often, you will want to remove
snapshots from a snapshot repository to preserve storage space. This
task supports this deletion for time stamped snapshots as created by
Maven 3.x in a deployment repository. Note that configuring and
running this job is not enough to reclaim disk space.  You will also
need to configure a scheduled job to empty the trash folder.  Files
are not deleted by the 'Remove Snapshots' job. They are only moved into
the trash folder.  When you create a scheduled task to remove
snapshots, you can specify the 'Repository/Group' to affect as well as:
+
'Minimum Snapshot Count';; This configuration option allows you to
specify a minimum number of snapshots to preserve per component.  For
example, if you configured this option with a value of 2, Nexus will
always preserve at least two snapshot components. A value of -1
indicates that all snapshots should be preserved.
+
'Snapshot Retention (days)';; This configuration option allows you to
specify the number of days to retain snapshot components.  For example,
if you want to make sure that you are always keeping the last three
day's worth of snapshot components, configure this option with a value
of 3. The minimum count overrides this setting.
+
'Remove if released';; If enabled and a released component with the same
GAV coordinates is detected all snapshots will be removed.
+ 
'Grace period after release (days)';; The configuration 'Remove if
released' causes snapshots to be deleted as soon as the scheduled task
is executed. This can lead to builds that still reference the snapshot
dependency to fail. This grace period parameter allows you to specify
a number of days to delay the deletion, giving the respective projects
referencing the snapshot dependency time to upgrade to the release
component or the next snapshot version.
+
'Delete immediately';; If you want to have components deleted directly
rather than moved to the trash, you can enable this setting.
+
When doing regular deployments to a snapshot repository via a CI
server, this task should be configured to run regularly.
 
Repair Repositories Index:: In certain cases it might be required to
remove the internal index as well as the published ones of a
repository.  This task does that and then rebuilds the internal index
by first trying to download remote indexes (if a proxy repository),
then scanning the local storage and updating the internal index
accordingly. Lastly, the index is published for the repository as
well. There should be no need to schedule this task. But when
upgrading Nexus, the upgrade instructions may sometimes include a
manual step of executing this task.
 
Synchronize Shadow Repository:: This service synchronizes a shadow (or
virtual) repository with its master repository. This task is only
needed when external changes affected a source repository of a virtual
repository you are using.

Update Repositories Index:: If files are deployed directly to a
repository's local storage (not deployed through Nexus), you will need
to instruct Nexus to update its index. When executing this task, Nexus
will update its index by first downloading remote indexes (if a proxy
repository) and then scan the local storage to index the new files.
Lastly, the index is published for the repository as well. Normally,
there should be no need to schedule this task. One possible exception
would be if files are deployed directly to the local storage regularly.
 
Yum: Generate Metadata:: The metadata for a yum repository is created
and maintained by the http://createrepo.baseurl.org/[createrepo]
tool. This scheduled task allows you to run it for a specific
repository and optionally configure the output directory. 


Beyond these tasks any plugin can provide additional scheduled tasks,
which will appear in the drop-down once you have installed the plugin.

The Evict and Purge actions do not delete data from the Nexus
working directory. They simply move data to be cleared or evicted to a
trash directory under the Nexus work directory. If you want to reclaim
disk space, you need to clear the Trash on the Browse Repositories
screen. If something goes wrong with a evict or clear service, you can
move the data back to the appropriate storage location from the trash.
You can also schedule the Empty Trash service to clear this directory
on a periodic basis.

TIP: In order to keep the heap usage in check it is recommended that
you schedule an "optimize indexes" task to run weekly. A number of
other maintenance tasks should also be scheduled for production
deployments.

Setting up scheduled tasks adapted to your usage of Nexus is an
important first step when setting up a Nexus instance. Go through the
list of task types and consider your usage patterns of Nexus. Also
update your scheduled tasks when changing your usage. E.g., if you
start to regularly deploy snapshots by introducing continuous
integration server builds with deployment.

[[capabilities]]
=== Accessing and Configuring Capabilities

Capabilities are features of Nexus and Nexus plugins that can be
configured by a user in the generic administration view accessible in
the left-hand navigation menu 'Administration' under 'Capabilities'.

WARNING: In many cases you will not need to configure anything in
'Capabilities' unless explicitly instructed to do so by the Sonatype
support team. Execute any capability changes with caution, potentially
backing up your configuration before proceeding.

Nexus Pro ships with a number of capabilities preinstalled
and allows you to enable/disable them. An example capability is
'Outreach Management' displayed in <<fig-capability-outreach>>. The
capabilities management interface supports adding new capabilities by
pressing the 'New' button, copying a selected capability from the list
by pressing the 'Duplicate' button and deleting a selected capability with the
'Delete' button. Pressing the 'Refresh' button updates the list of
capabilities. The list of capabilities can be filtered with the search
input box in the header of the list and sorted by the different
columns by pressing a column header. The list uses the following
columns: 

Status:: The status column does not have a title. Enabled capabilities
have a green checkmark added on top of a blue icon. Disabled
capabilities use a greyed out icon.

Type:: The type columns provides the specific type of a capability in
the list.

Category:: The 'Category' is optional and details the wider context
the capability belongs to.

Repository:: The 'Repsitory' value is optional and references the
repository for which the specific capability is configured.

Description:: The 'Description' column contains further descriptive
information about the capability.

Notes:: A 'Notes' columns can contain user created notes about the
capability.

[[fig-capability-outreach]]
.Capabilities Management Interface with the Outreach Management Details Visible
image::figs/web/capability-outreach.png[scale=60]

Every capability can be inspected and configured by selecting it in
the list and using the tabs underneath the list. 

The 'Summary' tab displays the 'Type' of the capability as well as
optionally the 'Description', the 'Category' and the 'Repository'. The
'Notes' field can be used to provide a descriptive text about the
capability or any other notes related to it and can be persisted by
pressing the 'Save' button.

The 'Settings' tab allows you to activate or deactivate the capability
with the 'Enabled' checkbox. Below this checkbox, each capability type
has specific additional configuration parameters available. Pressing
the help icon beside the input field or checkbox reveals further
information about the specific parameter. Once you have completed the
configuration, press the 'Save' button.

The 'Status' tab displays a text message that details the status of
the capability and any potential problems with the configuration.
Depending on the capability, the reasons can vary widely. For example,
the 'Secure Central' capability requires Nexus to run on a JVM with
specific security features. If the JVM is not suitable, an error
message with further details is displayed in the 'Status' column.

The 'About' tab displays a descriptive text about the purpose of the
capability. 

Creating a new capability by pressing the 'New' button will display a
new form allowing you to configure the capability in a dialog. The
'Type' drop-down allows you to decide what capability to create, and a
selection changes the rest of the available information and
configuration in the dialog. You can configure if the capability
should be enabled with the 'Enabled' checkbox. Once you have completed
the configuration, press 'Add' and the capability will be saved and
appear in the list.

Many of the built-in capabilities and plugins can be configured in the
'Capabilities' administration section but also in other more user
friendly, targeted user interface sections, e.g., the user token
feature administrated by using the interface available via the 'User
Token' menu item in the 'Security' left-hand menu as well as by
editing the user token capability. Other capabilities are internal to
Nexus functionality and sometimes managed automatically by the
responsible plugin. Some optional configuration like the branding
plugin is only done in the capabilities administration. The branding
plugin allows the customization of the icon in the top left-hand
corner of the user interface header and is described in
<<nexus-branding>>.


[[nexus-branding]]
=== Customizing the Nexus Application with Branding

The branding plugin is part of Nexus Pro and allows you to
customize your Nexus instance by replacing the default Sonatype Nexus
logo in the top left-hand corner of the header with an image of your
choice.

You can configure it by adding the 'Branding' capabililty as
documented in <<capabilities>> and enabling it. By default, the
branding plugin will look for the new logo in a file called
+branding.png+ in your Nexus data directory's +conf+ folder. By
default, the location is therefore
+sonatype-work/nexus/conf/branding.png+. The new logo needs to be a
PNG image. To blend in well in the UI, it is recommended that it is of
60 pixels height and has a transparent background.

If it fails to find a new logo, the plugin will fall back to using
the default Sonatype Nexus logo.

Prior to Nexus 2.7, the branding plugin was an optional plugin of Nexus Pro
and needed to be installed following the documentation in 
<<install-additional-plugins>>. In this case you needed to add a
branding.image.path property to the 'nexus.properties' file in 
'$NEXUS_HOME/conf/':

----
branding.image.path=/data/images/nexus_logo.png
----

[[nexus-outreach-plugin]]
=== Configuring Outreach Content in Welcome Tab

The Nexus Outreach Plugin is installed and enabled by default in Nexus OSS
and Nexus Pro. It allocates space underneath the
search feature on the 'Welcome' tab for linking to further
documentation and support resources. This data is retrieved from
Sonatype servers.

In a case where this outgoing traffic from your Nexus instance or the
resulting documentation and links are not desired, the plugin can be
disabled. The plugin can be disabled in the settings for the 
'Outreach:Management' capability as documented in <<capabilities>>.

You can safely remove the plugin as well without any other negative
side effects. To do so, simply remove the 'nexus-outreach-plugin-X.Y.Z'
folder in '$NEXUS_HOME/nexus/WEB-INF/plugin-repository/' and restart
your Nexus instance.

[[confignx-sect-network]]
=== Network Configuration

By default, Nexus listens on port 8081. You can change this port, by
changing the value in the +$NEXUS_HOME/conf/nexus.properties+ file
shown in <<fig-conf-nexus-properties>>. To change the port, stop
Nexus, change the value of applicationPort in this file, and then
restart Nexus. Once you do this, you should see a log statement in
+$NEXUS_HOME/logs/wrapper.log+ telling you that Nexus is listening on
the altered port.

[[fig-conf-nexus-properties]]
.Contents of conf/nexus.properties
----
# Sonatype Nexus
# ==============
# This is the most basic configuration of Nexus.

# Jetty section
application-port=8081
application-host=0.0.0.0
nexus-webapp=${bundleBasedir}/nexus
nexus-webapp-context-path=/nexus

# Nexus section
nexus-work=${bundleBasedir}/../sonatype-work/nexus
runtime=${bundleBasedir}/nexus/WEB-INF
----


[[confignx-sect-plugins]]
=== Nexus Plugins and the REST API

As documented in <<install-additional-plugins>>, Nexus is built as a
collection of plugins supported by a core architecture and additional
plugins can be installed.

You can use the Nexus Plugin Console to list all installed Nexus
plugins and browse REST services made available by the installed
plugins. To open the Nexus Plugin Console, click on the 'Plugin Console'
link in the 'Administration' menu in the left-hand Nexus menu.

Once you open the Plugin Console, you will see a list of plugins
installed in your Nexus installation. Clicking on a plugin in this
list will display information about the plugin including name,
version, status, a description, SCM information about the plugin, and
the URL of the plugin's project web site and links to the plugin
documentation.

[[fig-config-plugin-console]]
.Plugin Console
image::figs/web/config-plugin-console.png[scale=50]

All the functionality in the Nexus user interface is accessing the
REST API's provided by the different plugins.  An example for the
plugin documentation is the main documentation for the core Nexus API
linked off the Nexus Restlet 1.x Plugin from
<<fig-config-plugin-console>> and displayed in
<<fig-config-plugin-core-api-site>>

[[fig-config-plugin-core-api-site]]
.Documentation Website for the Core REST API
image::figs/web/config-plugin-core-api-site.png[scale=50]

You can use the Nexus REST API to integrate Nexus in your external
systems. 

If your external integration uses Java, or is otherwise JVM based, then 
you can use the Nexus client using the dependency from 
<<fig-client-core-dependency>> with the version corresponding to your 
Nexus server version.


[[fig-client-core-dependency]]
.Nexus Client Core Dependency for Maven Projects
----
<dependency>
    <groupId>org.sonatype.nexus</groupId>
    <artifactId>nexus-client-core</artifactId>
    <version>2.9.0-02</version>
</dependency>
----

Examples of using the client library can be found in the
https://github.com/sonatype/nexus-maven-plugins[Nexus Maven Plugins]
or the https://github.com/sonatype/nexus-ant-tasks[Nexus Ant Tasks].

The REST API can be invoked from many other programming and scripting
languages. A simple example of using the +curl+ command in a shell
script is displayed in <<fig-curl-rest-api-call>>.

[[fig-curl-rest-api-call]]
.A +curl+ Invocation Loading the List of Users from Nexus
----
curl -X GET -u admin:admin123 http://localhost:8081/nexus/service/local/users
----

[[confignx-sect-managing-security]]
=== Managing Security

Nexus has role-based access control (RBAC) that gives administrators
very fine-grained control over who can read from a repository (or a
subset of repositories), who can administer the server, and who can
deploy to repositories. The security model in Nexus is also so
flexible as to allow you to specify that only certain users or roles
can deploy and manage components in a specific repository under a
specific groupId or asset class. The default configuration of Nexus
ships with four roles and four users with a standard set of
permissions that will make sense for most users. As your security
requirements evolve, you'll likely need to customize security settings
to create protected repositories for multiple departments or
development groups. Nexus provides a security model which can adapt to
any scenario. The security configuration is done via menu items in the
'Security' submenu in the left-hand Nexus menu.

Nexus' role-based access control (RBAC) system is
designed around the following four security concepts:

Privileges:: Privileges are rights to read, update, create, or manage
resources and perform operations. Nexus ships with a set of core
privileges that cannot be modified, and you can create new privileges
to allow for fine-grained targeting of role and user permissions for
specific repositories.

Targets:: Privileges are usually associated with resources or
targets. In the case of Nexus, a target can be a specific repository
or a set of repositories grouped in something called a repository
target. A target can also be a subset of a repository or a specific
asset classes within a repository. Using a target you can apply a
specific privilege to a single groupId.

Roles:: Collections of privileges can be grouped into roles to make it
easier to define collections of privileges common to certain classes
of users. For example, deployment users will all have similar sets of
permissions. Instead of assigning individual privileges to individual
users, you use roles to make it easier to manage users with similar
sets of privileges. A role has one or more privilege and/or one or
more roles.

Users:: Users can be assigned roles and privileges, and model the
individuals who will be logging into Nexus and read, deploying, or
managing repositories.

[[confignx-sect-managing-privs]]
=== Managing Privileges

You can access the configuration of privileges via the 'Privileges'
menu item in the 'Security' submenu in the left-hand Nexus menu.

Nexus has three types of privileges: 

* application privileges - covers actions a user can execute in Nexus, 
* repository target privileges - governs the level of access a user 
has to a particular repository or repository target, and 
*repository view privileges - controls whether a user can view a repository

Behind the scenes, a privilege is related to a single REST operation 
and method like create, update, delete, read.

.Managing Security Privileges
image::figs/web/repository-manager_security-privileges.png[scale=60]

To create a new privilege, click on the 'Add...' button in the
'Privileges' panel and choose 'Repository Target Privilege'. Creating a
privilege will load the New Repository Target Privilege form shown in
<<fig-configuring-new-privilege>>. This form takes a privilege name, a
privilege description, the repository to target, and a repository
target.

[[fig-configuring-new-privilege]]
.Creating a New Repository Target Privilege
image::figs/web/repository-manager_security-privileges-2.png[scale=60]

Once you create a new privilege, it will create four underlying
privileges: create, delete, read, and update. The four privileges
created by the form in <<fig-configuring-new-privilege>>
are shown in <<fig-configuring-new-privileges>>.

[[fig-configuring-new-privileges]]
.Create, Delete, Read, and Update Privileges Created
image::figs/web/repository-manager_security-privileges-3.png[scale=60]

[[confignx-sect-managing-repo-targets]]
=== Managing Repository Targets

A 'Repository Target' is a set of regular expressions to match on the
path of components in a repository (in the same way as the routing
rules work). Nexus is preconfigured with a number of repository
targets and allows you to create additional ones. Access the
management interface visible in <<fig-config-repo-target-mgt>> via
the 'Repository Targets' menu item in the left-hand 'Views/Repositories'
sub menu.


[[fig-config-repo-target-mgt]]
.Managing Repository Targets
image::figs/web/repository-manager_repository-targets.png[scale=60]

Repository targets allow you to define, for example, a target called
Apache Maven with a pattern of `^/org/apache/maven/.*`. This would
match all components with a groupId of 'org.apache.maven' and any
components within nested groupIds like 'org.apache.maven.plugins'.

A pattern that would capture more components like all components with
any part of the path containing 'maven' could be `.*maven.*`.

The regular expressions can also be used to exclude components as
visible with the pattern `(?!.*-sources.*).*` in
<<fig-config-repo-target-exclude>> where components with the qualifier
'-sources' are excluded. The syntax used for the expressions is the
http://docs.oracle.com/javase/tutorial/essential/regex/[Java syntax],
that is similar but not identical to the Perl syntax.

[[fig-config-repo-target-exclude]]
.Excluding Source Artifacts from a Repository Targets
image::figs/web/repository-manager_repository-targets-2.png[scale=60]

By combining multiple patterns in a repository target, you can
establish a fine-grained control of components included and excluded.

Once you have created a repository target, you can it as part of your
security setup.  You can add a new privilege that relates to the
target and controls the CRUD operations for components matching that
path. The privilege can even span multiple repositories. With this
setup you can delegate all control of components in 'org.apache.maven'
to a "Maven" team. In this way, you don't need to create separate
repositories for each logical division of your components.

Repository targets are also be used for matching components for
implicit capture in the Staging Suite as documented in <<staging>>.

[[confignx-sect-manage-security]]
=== Managing Roles

Nexus ships with a large number of predefined including 'Nexus
Administrator Role', 'Nexus Anonymous Role', 'Nexus Developer Role',
and 'Nexus Deployment Role'.  Click on the 'Roles' menu item under
'Security' in the 'Nexus' menu to show the list of roles shown in
<<fig-configuring-security-roles>>.

[[fig-configuring-security-roles]]
.Viewing the List of Defined Roles
image::figs/web/repository-manager_security-roles.png[scale=60]

To create a new role, click on the 'Add...' button, select 'Nexus
Role' and fill out the New Nexus Role form shown in
<<fig-configuring-creating-new-role>>.

[[fig-configuring-creating-new-role]]
.Creating a New Nexus Role
image::figs/web/repository-manager_security-new-nexus-role.png[scale=60]

When creating a new role, you will need to supply a 'Role ID', a
'Name' and a 'Description'. Roles are comprised of other roles and
individual privileges. To assign a role or privilege to a role, click
on 'Add' button under 'Role/Privilege Management' to access the 'Add
Roles and Privileges' dialog displayed in
<<fig-configuring-add-role-dialog>>. It allows you to filter the paged
displayed of all the available roles and privileges with a filter text
as well as narrowing the search to roles or privileges only. Using the
filter and the paging you will be able to find the desired role or
privilege quickly.

[[fig-configuring-add-role-dialog]]
.The Dialog to Add Roles and Privileges
image::figs/web/repository-manager_security-add-roles-dialog.png[scale=60]

The built-in roles are managed by Nexus and cannot be edited or
deleted. The role confirguration section below the list is visible but 
disabled for these roles.

A Nexus role is comprised of other Nexus roles and individual
Nexus privileges. To view the component parts of a Nexus Role, select
the role in the Roles list and then choose the 'Role Tree' tab as shown
in <<fig-configuring-role-tree>>.

[[fig-configuring-role-tree]]
.Viewing a Role Tree
image::figs/web/repository-manager_security-role-tree.png[scale=60]

TIP: With the Repository Targets, you have fine-grained control over
every action in the system. For example, you could make a target that
includes everything except sources `(.*(?!-sources)\.*)` and assign that
to one role while giving yet another role access to everything. Using
these different access roles e.g., you can host your public and private
components in a single repository without giving up control of your
private components.

[[confignx-sect-managing-users]]
=== Managing Users

Nexus ships with three users: 'admin', 'anonymous', and
'deployment'. The admin user has all privileges, the anonymous user
has read-only privileges, and the deployment user can both read and
deploy to repositories. If you need to create users with a more
focused set of permissions, you can click on 'Users' under 'Security'
in the left-hand 'Nexus' menu. Once you see the list of users, you can
click on a user to edit that specific user's 'User ID', 'First Name',
'Last Name' and 'Email'. Editing a users 'Status' allows you to
activate or disable a user altogether. You can also assign or revoke
specific roles for a particular user.

.Managing Users
image::figs/web/repository-manager_security-users.png[scale=50]

Clicking the 'Add' button in the 'Role Management' section will bring up
the list of available roles in a pop-up window visible in
<<fig-config-security-user-add-role>>. It allows you filter and search
for roles and add one or multiple roles to the user.

[[fig-config-security-user-add-role]]
.Adding Roles to a User
image::figs/web/config-security-user-add-role.png[scale=60]

A user can be assigned one or more roles that in turn can include
references to other Nexus roles or to individual Nexus privileges. To
view a tree of assigned Nexus roles and privileges, select the 'Role
Tree' for a particular user as shown in
<<fig-configuring-security-user-role-tree>>.

[[fig-configuring-security-user-role-tree]]
.Nexus User Role Tree
image::figs/web/repository-manager_security-users-role-tree.png[scale=70]

If you need to find out exactly how a particular user has been granted
a particular privilege, you can use the 'Privilege Trace' panel as shown
in <<fig-configuring-security-user-priv-trace>>.  The 'Privilege
Trace' panel lists all of the privileges that have been granted to a
particular user in the 'Privileges' section. Clicking on a privilege
loads a tree of roles that grant that particular privilege to a
user. If a user has been assigned a specific privilege by more than
one Role or Privilege assignment, you will be able to see this
reflected in the 'Role Containment' list.

[[fig-configuring-security-user-priv-trace]]
.Nexus User Privilege Trace
image::figs/web/repository-manager_security-users-privilege.png[scale=60]

Additional plugins can contribute further panels for the security
configuration of a user. An example of an additional panel is the 'User
Token' panel, added by the User Token feature of Nexus Pro as
documented in <<config-sect-usertoken>>.

[[config-sect-usertoken]]
=== Security Setup with User Tokens

==== Introduction

When using Apache Maven with Nexus, the user credentials for accessing
Nexus have to be stored in clear text in the user's settings.xml
file. Maven has the ability to encrypt passwords in setting.xml, but
the need for it to be reversible in order to be used, limits its
security. In addition, the general setup and use is cumbersome, and the
potential need for regular changes due to strong security requirements
e.g., with regular, required password changes triggers the need for a
simpler and more secure solution.

Other build systems use similar approaches and can benefit from the
usage of User Token as well.

The User Token feature of Nexus fills that need for Apache Maven as
well as other build systems and users. It introduces a two-part token
for the user, replacing the username and password with a user code and
a pass code that allows no way of recovering the username and password
from the user code and pass code values; yet can be used for
authentication with Nexus from the command line via Maven as well
as in the UI.

This is especially useful for scenarios where single sign-on solutions
like LDAP are used for authentication against Nexus and other systems
and the plain text username and password cannot be stored in the
+settings.xml+ following security policies. In this scenario the
generated user tokens can be used instead.

User token usage is integrated in the Maven settings template feature of Nexus
documented in <<settings>> to further simplify its use.

==== Enabling and Resetting User Tokens

The user token-based authentication can be activated by a Nexus
administrator or user with the role usertoken-admin or
usertoken-all by accessing the 'User Token' item in the 'Security' submenu on
the left-hand 'Nexus' menu.

Once user token is 'Enabled' by activating the checkbox in the
administration tab displayed in <<fig-config-user-token-main>> and
pressing 'Save',  the feature is activated and the additional section to
Reset All User Tokens is available as well.

[[fig-config-user-token-main]]
.User Token Administration Tab Panel
image::figs/web/config-user-token-main.png[scale=60]

Selecting the 'Protect Content' feature configures Nexus to require a
user token for any access to the content urls of Nexus that includes
all repositories and groups. This affects read access as well as write
access e.g., for deployments from a build execution or a manual upload.

'Activating User Token' as a feature automatically adds the 'User
Token Realm' as a 'Selected Realm' in the 'Security Settings' section as
displayed in <<fig-config-user-token-security-settings>> and available
in the 'Server' section of the left-hand 'Administration' menu. If
desired, you can reorder the security realms used, although the
default settings with the 'User Token Realm' as a first realm is
probably the desired setup. This realm is not removed when the User
Token feature is disabled; however, it will cleanly pass through to the
next realm and with the realm remaining any order changes stay
persisted in case the feature is reactivated at a later stage.


[[fig-config-user-token-security-settings]]
.Selected Realms Server Security Settings with User Token Realm activated
image::figs/web/config-user-token-security-settings.png[scale=60]

Besides resetting all user tokens, an administrator can reset the token
of an individual user by selecting the 'User Token' tab in the 'Users'
administration from the 'Security' menu in the left-hand navigation
displayed in <<fig-config-user-token-user-reset>>. The password
requested for this action to proceed is the password for the currently
logged in administrator resetting the token(s).

[[fig-config-user-token-user-reset]]
.User Token Reset for Specific User in Security Users Administration
image::figs/web/config-user-token-user-reset.png[scale=50]

WARNING: Resetting user tokens forces the users to update the
`settings.xml` with the newly created tokens and potentially breaks any
command line builds using the tokens until this change is
carried out. This specifically also applies to continuous integration
servers using user tokens or any other automated build executions.

==== Accessing and Using Your User Tokens

With user token enabled, any user can access his/her individual tokens via their
'Profile' panel. To access the panel, select 'Profile' when clicking on the
user name in the top right-hand corner of the Nexus user
interface. Then select 'User Token' in the drop-down to get access to the 'User
Token' screen in the 'Profile panel' displayed in
<<fig-config-user-token-profile>>.

[[fig-config-user-token-profile]]
.User Token Panel for the Logged in Users in the Profile Section
image::figs/web/config-user-token-profile.png[scale=50]

In order to be able to see this 'User Token' panel the user has to have
the +usertoken-basic+ role or the +usertoken-user+ privilege. To access or
reset the token you have to press the respective button in the panel
and then provide your username and password in the dialog.

Resetting the token will show and automatically hide a dialog with a
success message and accessing the token will show the dialog displayed
in <<fig-config-user-token-access>>.

[[fig-config-user-token-access]]
.Accessing the User Token Information
image::figs/web/config-user-token-access.png[scale=40]

The User Token dialog displays the user code and pass code tokens in
separate fields in the top level section as well as a server section
ready to be used in a Maven settings.xml file. When using the server
section you simply have to replace the `${server}` placeholder with
the repository id that references your Nexus server you want to
authenticate against with the user token.  The dialog will close
automatically after one minute or can be closed with the Close button.

The user code and pass code values can be used as replacements
for username and password in the login dialog for Nexus. It is also
possible to use the original username and the pass code to log in to
Nexus.

With content protection enabled, command line access to Nexus will
require the tokens to be supplied. Access to e.g., the releases
repository via

----
curl -v --user admin:admin http://localhost:9081/content/repositories/releases/
----

has to be replaced with the usage of user code and pass code separated
by colon in the curl command line like this

----
curl -v --user HdeHuL4x:Y7ZH6ixZFdOVwNpRhaOV+phBISmipsfwVxPRUH1gkV09 http://localhost:9081/content/repositories/releases/
----

User token values can be accessed as part of the Maven settings
template feature automating updates as documented in <<settings>>.

NOTE: The user tokens are created at first access whether that is by
using the Nexus user interface or the Nexus Maven Plugin.

==== Configuring User Token behavior

The user token feature is preconfigured with built-in parameters and
no external configuration file is created by default. It is however
possible to customize some behavior by creating a file
'sonatype-work/nexus/conf/usertoken.properties''.

The following properties can be configured:

According to Jason Dillon this is mostly for testing the underlying
mechanis and the super edge case when the default strategy incurs too
many name-code collissions, this is also not well tested so we remove
it for now (or ever)
usertoken.encodingStrategyProvider.strategy:: 	Define the
EncodingStrategy for the token with the default value being
'6-33-Base64' and '9-30-Base64' as optional alternative strategy.
similar to above, very advanced and should not be exposed to users at
this stage according to Jason Dillon
usertoken.userTokenServiceImpl.maximumUniqueNameCodeAttempts::
The maximum number of retries to find a unique name code, when
creating the token. Defaults to 10.

usertoken.userTokenServiceImpl.allowLookupByUserName:: This parameter controls
if username lookup is allowed when using a pass code. The default is
set to true. If set to false, user code and pass code have to be used
to authenticate, otherwise username and pass code is also
possible. This would be the more secure setting.
usertoken.userTokenServiceImpl.restrictByUserAgent:: With this value
set to true (the default), any access to the Nexus content
with content protection enabled will only be allowed to browser-based 
access even without credentials. Other tools like curl or wget
or other command-line tools will be blocked. With the more secure
setting of +false+, any access without correct codes will be
disallowed.

The 'usertoken.' prefix is optional when the properties are loaded
from the 'usertoken.properties' file.


[[remote-user]]
=== Authentication via Remote User Token

Nexus allows integration with external security systems that can pass
along authentication of a user via the +Remote_User+ HTTP header
field - Remote User Token 'Rut' authentication. There are either
web-based container or server-level authentication systems like
http://shibboleth.net/[Shibboleth]. In many cases, this is achieved 
via a server like http://httpd.apache.org/[Apache HTTPD] or
http://nginx.org/[nginx] proxying Nexus. These servers can in turn
defer to other authentication storage systems e.g., via the
http://web.mit.edu/kerberos/[Kerberos] network authentication
protocol. These systems and setups can be described as Central
Authentication Systems CAS or Single Sign On SSO.

From the users perspective, he/she is required to login into the
environment in a central login page that then propagates the login
status via HTTP headers. Nexus simply receives the fact that a
specific user is logged in by receiving the username in a HTTP header
field. 

The HTTP header integration can be activated by adding and enabling
the 'Rut Auth' capability as documented in
<<capabilities>> and setting the 'HTTP Header name' to
the header populated by your security system. Typically, this value is
+REMOTE_USER+, but any arbitrary value can be set. An enabled
capability automatically causes the 'Rut Auth Realm' to be added to
the 'Selected Realms' in the 'Security Settings' described in
<<config-sect-security>>.

When an external system passes a value through the header,
authentication will be granted and the value will be used as the user
name for configured authorization scheme. For example, on a default Nexus
installation with the Xml authorization scheme enabled, a value of
'deployment' would grant the user the access rights in the user
interface as the 'deployment' user.

A seamless integration can be set up for users if the external
security system is exposed via LDAP and configured in Nexus as LDAP
authorization realm combined with external role mappings and in
parallel the sign-on is integrated with the operating system sign-on
for the user.

////

////
/* Local Variables: */
/* ispell-personal-dictionary: "ispell.dict" */
/* End:             */
////




