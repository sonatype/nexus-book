= Repository Management with Nexus
:data-uri:
:icons:
:docinfo:

[[intro]]
== Introducing Sonatype Nexus

[[intro-sect-intro]]
=== Introduction

Nexus manages software "artifacts" required for development,
deployment, and provisioning. If you develop software, Nexus can help
you share those artifacts with other developers and end-users. Maven’s
central repository has always served as a great convenience for users
of Maven, but it has always been recommended to maintain your own
repositories to ensure stability within your organization. Nexus
greatly simplifies the maintenance of your own internal repositories
and access to external repositories. With Nexus you can completely
control access to, and deployment of, every artifact in your
organization from a single location.

[[intro-sect-os]]
=== Nexus Open Source

Nexus Open Source provides you with an essential level of control over
the external Maven repositories you use and the internal repositories
you create. It provides infrastructure and services for organizations
that use repository managers to obtain and deliver software. If you
create software libraries or applications for your end-users, you can
use Nexus Open Source to distribute your software. If your software
depends upon open source software components, you can cache software
artifacts from remote repositories.

==== Nexus Open Source Features

Hosting Repositories:: When you host a Maven repository with Nexus
Open Source, you can upload artifacts using the Nexus interface, or
you can deploy artifacts to hosted repositories using Maven. Nexus
will also create the standard Nexus Index for all of your hosted
repositories which will allow tools like m2eclipse to rapidly locate
software artifacts for your developers.
  
Proxy Remote Repositories:: When you proxy a remote repository with
Nexus Open source you can control all aspects of the connection to a
remote repository including security parameters, HTTP proxy
settings. You can configure which mirrors Nexus will download
artifacts from, and you can control how long Nexus will store
artifacts and how it will expire artifacts which are no longer
referenced by your build.
  
Repository Groups:: Grouping repositories allows you to consolidate
multiple repositories into a single URL. This makes configuring your
development environment very easy. All of your developers can point to
a single repository group URL, and if anyone ever needs a custom
remote repository added to the group, you can do this in a central
location without having to modify every developer’s workstation.
  
Fine-grained Security Model:: Nexus Open Source ships with a very
capable and customizable security model. Every operation in Nexus is
associated with a privilege, and privileges can be combined into
standard Nexus roles. Users can then be assigned both individual
privileges and roles that can be applied globally or at a fine grained
level. You can create custom administrative roles that limit certain
repository actions such as deployment to specific groups of developers
and you can use these security roles to model the structure of your
organization.
  
Flexible LDAP Integration:: If your organization uses an LDAP server,
Nexus Professional can integrate with an external authentication and
access control system. Nexus Professional is smart enough to be able
to automatically map LDAP groups to the appropriate Nexus roles, and
it also provides a very flexible facility for mapping existing users
and existing roles to Nexus roles.
  
Artifact Search:: Nexus Open Source provides an intuitive search
feature which allows you to search for software artifacts by
identifiers such as groupId, artifactId, version, classifier, and
packaging, names of classes contained in Java archives, keywords, and
artifact checksums. Nexus search makes use of the industry standard
for repository indexes, the Nexus Index format, and Nexus will
automatically download a Nexus index from all remote repositories
which create a Nexus index. Nexus will also automatically expose a
Nexus index for any hosted repositories you create.

Scheduled Tasks:: Nexus Open Source has the concept of scheduled tasks:
periodic jobs which take care of various repository management tasks
such as deleting old snapshots, evicting unused items, and publishing
repository indexes.

REST Services:: Nexus Open Source is based on a series of REST
services, and when you are using the Nexus web front-end UI, you are
really just interacting with a set of REST service. Because of this
open architecture, you can leverage the REST service to create custom
interactions or to automate repository management with your own
scripts.
  
Nexus Plugins:: Nexus Open Source provides a rich API for extension in
the form of Nexus Plugins. When you write a Nexus Plugin, you can
customize REST services, the Nexus UI, repository formats, or write
components that can intercept requests and add new capabilities to the
platform. The plugin API which you have access to in Nexus Open Source
is the same plugin API that is used to implement value-added features
available in Nexus Professional.
  
Integration with m2eclipse:: When you use Nexus as a repository
manager it creates indexes that support some of the next-generation
tools available in m2eclipse - Sonatype’s Maven plugin for the Eclipse
IDE. If you publish new artifacts and archetypes to Nexus, they are
immediately available to m2eclipse project creation wizards and are
included in m2eclipse search results.
  
==== Nexus Open Source License

Nexus Open Source is made available under the Eclipse Public License
version 1.0. The text of this license is available from the Open
Source Initiative (OSI) here:
http://www.opensource.org/licenses/eclipse-1.0.php

[[intro-sect-pro]]
=== Nexus Professional

Nexus Professional was designed to meet the needs of the enterprise.
It is a central point of access to external repositories which
provides the necessary controls to make sure that only approved
artifacts enter into your software development environment. It is also
a central distribution point with the intelligence required to support
the decision that go into making quality software. The extensibility
provided by the custom metadata plugin coupled with REST services only
available in Nexus Professional also lay the foundation for highly
complex interactions within the enterprise. Once you start to use the
work-flow and decision support features of Nexus Professional, you will
start to see it as the "assembly line" - the central collaboration
point for your software development efforts.

==== Nexus Professional Features

Nexus Procurement Suite:: Consider the default behaviour of a proxy
repository. Any developer can reference any artifact stored in a
remote repository and cause Nexus to retrieve the artifact from the
remote repository and serve back to a developer. Very often a company
might want to control the set of artifacts which can be referenced in
a proxy repository. Maybe the company has unique security requirements
which require every third-party library to be subjected to a rigorous
security audit before they can used. Or, maybe another company has a
legal team which needs to verify that every artifact referenced by
your software adheres to an inflexible set of license guidelines. The
Nexus Procurement Suite was design to give organization this level of
control over the artifacts that can be served from Nexus.

Nexus Staging Suite:: When was the last time you did a software
release to a production system? Did it involve a QA team that had to
sign-off on a particular build? What was the process you used to
re-deploy a new build if QA found a problem with the system at the last
minute? Because few organizations use a mature process to manage
binary software artifacts, there is little in the way of
infrastructure designed to keep track of the output of a build.  The
Nexus Staging Suite changes this by provide work-flow support for
binary software artifacts. If you need to create a release artifact
and deploy it to a hosted repository, you can use the Staging Suite to
post a collection of related, staged artifacts which can be tested,
promoted, or discarded as a unit. Nexus keeps track of the individuals
that are involved in a staged, managed release and can be used to
support the decisions that go into producing quality software.
  
Hosting Project Web Sites:: Nexus Professional is a publishing
destination for project web sites. While you very easily generate a
project web site with Maven, without Nexus, you will need to set up a
WebDAV server and configure both your web server and build with the
appropriate security credentials. With Nexus, you can deploy your
project’s web site to the same infrastructure that hosts the project’s
build output. This single destination for binaries and documentation
helps to minimize the number of moving parts in your development
environment. You don’t have to worry about configuring another web
server or configuring your builds to distribute the project site using
a different protocol, you simple point your project at Nexus and
deploy the project site.
  
Support for OSGi Repositories:: Instead of just supporting Maven
repositories, Nexus Professional supports OSGi Bundle repositories and
P2 repositories for those developers who are targeting OSGi or the
Eclipse platform. Just like you can proxy, host, and group Maven
repositories, Nexus Professional allows you to do the same with OSGi
repositories.
  
Enterprise LDAP Support:: Nexus Professional offers LDAP support
features for enterprise LDAP deployments including detailed
configuration of cache parameters, support for multiple LDAP servers
and backup mirrors, the ability to test user logins, support for
common user/group mapping templates, and the ability to support more
than one schema across multiple servers.
  
Support for Atlassian Crowd:: If your organization uses Atlassian
Crowd, Nexus Professional can delegate authentication and access
control to a Crowd server and map Crowd groups to the appropriate
Nexus roles.
  
The User Account Plugin:: When you are running a large, public
instance of Nexus, it is often very useful to allow users to sign up
for an account without the assistance of an administrator. Nexus
Professional’s User Account plugin allows for just this. With this
plugin activate, a new user simply has to fill out a simple form and
type in letters from a captcha. Once a user has signed up for Nexus,
Nexus will then send an email with a validation link. If you are
working in an environment with hundreds or thousand of users the user
account plugin will allow you to support the tool without having to
create logins for each individual user.
  
Maven Settings Management:: Nexus Professional along with the Nexus
Maven Plugin allow you to manage Maven Settings. Once you have
developed a Maven Settings template, developers can then connect to
Nexus Professional using the Nexus Maven plugin which will take
responsibility for downloading a Maven Settings file from Nexus and
replacing the existing Maven Settings on a local workstation.
  
Support for Artifact Bundles:: When software is deployed to the Maven
Central repository, it is deployed as a signed artifact bundle. Nexus
Professional’s Staging Suite allows you to upload artifact bundles to
a staged repository.
  
Artifact Validation and Verification:: The software artifacts you
download from a remote repository are often signed with PGP
signatures. Nexus Professional will make sure that these PGP signature
are valid and the procurement plugin defines a few other rules that
can be applied to artifacts which are downloaded from remote
repositories. Nexus Professional also defines an API which allows you
to create your own custom verification rules.
  
Custom Repository Metadata:: Nexus Professional provides a facility
for user-defined, custom metadata. If you need to keep track of custom
attributes to support approval work-flow or to associate custom
identifiers with software artifacts, you can use Nexus to define and
manipulate custom attributes which can be associated with artifacts in
a Nexus repository.
  
==== Nexus Professional License

Nexus Professional is made available under a commercial license for
businesses. Is available for free for use in qualifying Open Source
projects, and is available at a discount for select Non-profits.

[[intro-sect-choosing]]
=== Choosing a Nexus Edition

If you are wondering which edition is appropriate for your
organization. The following sections outline some reasons for choosing
either Nexus Open Source of Nexus Professional with more information
available on the http://www.sonatype.org/nexus/why[Nexus website].

==== Use Nexus Open Source...

...if you are new to Repository Management:: If you are new to
repository management, you should pick up a copy of Nexus Open Source,
and experiment with Hosted and Proxy repositories. You should get a
sense of how Maven Settings are configured to retrieve artifacts from
a single Repository Group, and you should download a copy of the free
Nexus book - Repository Management with Nexus. Once you've
familiarized yourself with Nexus Open Source, you can easily upgrade to
Nexus Professional by downloading and installing Nexus
Professional. Nexus stores all of your repository data and
configuration in a directory named sonatype-work which is separate
from the Nexus application directory.
  
...if you are looking for more stability and control:: If you depend
directly on public repositories such as the Maven Central repository
or the various repositories maintained by organizations like Codehaus
or the Apache Software Foundation, you rely on these servers to be
available to your developers 100% of the time. If a public repository
goes down for maintenance, so does your development process. With a
local proxy of Maven artifacts, you buy yourself a stable, isolated
build. Even if a public repositories becomes unavailable, you will
still be able to build your software against artifacts cached in your
own Nexus installation.
  
...if you need to manage internal software distribution:: If your
organization needs to support collaboration between internal teams,
you can use Nexus to support the distribution of internal
software. With Nexus, sharing components between internal groups is as
easy as adding a dependency from Maven Central. Just publish a JAR to
Nexus, configure the appropriate repositories groups and inform others
in our organization of the Maven coordinates. Using a repository
management doesn't just make it easier to proxy external software
artifacts, it makes it easier to share internal artifacts.
  
...if you need an intelligent local proxy:: Many developers run Nexus
on a local workstation as a way to gain more control over the
repositories used by Nexus. This is also a great way to start
evaluating Nexus. Download and install Nexus on your local workstation
and point your Maven settings at http://localhost:8081/nexus. When you
need to add a new repository, all you need to do is change the
configuration of your local Nexus installation.
  
...if you need to integrate with an LDAP server:: If you need to
integrate Nexus with an an LDAP server, download Nexus Open
Source. Nexus provides documented integration with popular LDAP
servers such as OpenLDAP, Microsoft's Active Directory Server, and any
other directory product which implements the LDAP standard.
  
==== Use Nexus Professional...

...if you are looking for Professional Support:: When you purchase
Nexus Professional, you are purchasing one year of support from the
team that created the industry-standard in repository management. With
Nexus Professional, you not only get a capable repository manager, you
get the peace of mind that help is just a phone call away. Sonatype
also offers an array of implementation and migration services for
organizations looking for an extra level of assistance. Contact
Sonatype Sales for more information, call +1 (888) 866-2836.
  
...if you need a repository manager that can support release and
quality assurance decisions:: Nexus Professional's Staging Suite can
track the status of a software release and make sure that different
decision makers are notified and supported during a software
release. If you are looking for a repository manager that can automate
and support software releases, download Nexus Professional and start
learning about Staged repositories and Staging Rule-sets. When you
start using Nexus Professional, your operations, quality assurance,
and development teams can use the repository manager as a central
point of collaboration.
  
...if you need more control over external artifacts:: If you need more
control over which external artifacts can be referenced and used in
internal projects, you will need to use the Nexus Procurement Suite
which is a part of Nexus Professional.  While repositories like Maven
Central are a great convenience, allowing your developers carte
blanche access to any external library is often unacceptable in
today's legal and regulatory environment. Nexus Professional's
Procurement Suite allows you to enforce standards for external
libraries. If you want to ensure that every dependency is evaluated
for security or license compliance, download Nexus Professional.
  
...if you develop software for an Open Source project:: Are you
developing an open source project? If so, most open source projects
qualify for a free Nexus Professional license.  Open source projects
can qualify for a free Professional license, or they can take
advantage of free Nexus Professional hosting on
http://oss.sonatype.org. Sonatype is very committed to supporting the
development of quality open source and this is our way of giving back
to the community.
  
...if you are developing and deploying to OSGi platforms:: If you are
developing OSGi components using OBR repositories, or if you are
developing OSGi components using the P2 repository format, you will
need to use the OSGi support available in the Nexus Professional
distribution. Nexus Professional supports a wider array of repository
formats than Nexus Open Source. As the industry moves toward OSGi as a
standard, you should be using a product which supports these emerging
standards as well as the existing repository formats used by millions
of developers.
  
...if you need to integrate with Enterprise-level Security (LDAP and
Crowd):: If you need to integrate Nexus with an Atlassian Crowd server
or an enterprise LDAP deployment involving multiple servers or
multiple LDAP schemas, download Nexus Professional. While Nexus Open
Source provides extension points for writing custom security realms,
Nexus Professional provides solid LDAP and Crowd support for the
large, mission-critical LDAP deployments. If you need to support LDAP
fail-over and federation, use Nexus Professional.
  
[[intro-sect-history]]
=== History of Nexus

Tamas Cservenak started working on Proximity in December 2005 as he
was trying to find a way to isolate his own systems from an incredibly
slow ADSL connection provided by a Hungarian ISP. Proximity started as
a simple web application to proxy artifacts for a small organization
with connectivity issues. Creating a local on-demand cache for Maven
artifacts from the Maven Central repository gave an organization
access to the artifacts on the Maven Central Repository, but it also
made sure that these artifacts weren't downloaded over a very slow
ADSL connection used by a number of developers.

In 2007,  Sonatype asked Tamas to help create a similar product named
Nexus. Nexus is currently considered the logical next step to
Proximity. Nexus currently has an active development team, and
portions of the indexing code from Nexus are also being used in
m2eclipse.
  
  
[[repoman]]
== Repository Management

[[repoman-sect-intro]]
=== Repository Management

Repository managers serve two purposes: they act as highly
configurable proxies between your organization and the public Maven
repositories and they also provide an organization with a deployment
destination for its own generated artifacts. Just as Source Code
Management (SCM) tools are designed to manage source artifacts,
Repository Managers have been designed to manage and track external
dependencies and artifacts generated by your build. They are an
essential part of any enterprise or open-source software development
effort, and they enable greater collaboration between developers and
wider distribution of software.

==== Proxying Public Repositories

Proxying and caching a remote public repository can speed up your
builds by reducing redundant downloads over the public Internet.  If a
developer in your organization needs to download version 2.5 of the
Spring Framework and you are using Nexus, the dependencies (and the
dependency's dependencies) only need to be downloaded from the remote
repository once.

With a high-speed connection to the Internet this might seem like a
minor concern, but if you are constantly asking your developers to
download hundreds of megabytes of third-party dependencies, the real
cost savings are going to be the time it takes Maven to check for new
versions of dependencies and to download dependencies over the public
Internet.

Proxying and serving Maven dependencies from a local repository cache
can save you hundreds of HTTP requests over the public Internet, and,
in very large multi-module projects, this can shave minutes from a
build.

==== Managing Releases and Snapshots

If your project is relying on a number of SNAPSHOT dependencies, Maven
will need to regularly check for updated versions of these
snapshots. Depending on the configuration of your remote repositories,
Maven will check for SNAPSHOT updates periodically, or it might be
checking for SNAPSHOT updates on every build. When Maven checks for a
snapshot update it needs to interrogate the remote repository for the
latest version of the SNAPSHOT dependency. Depending on your
connection to the public Internet and the load on the Maven Central
repository, a SNAPSHOT update can add seconds to your project's build
for each SNAPSHOT dependency you rely upon.

When you host a local repository proxy with Nexus, you reduce the
amount of time it takes for Maven to check for a newer version as your
build interacts with a local repository cache. If you develop software
with SNAPSHOT dependencies, using a local repository manager will save
you a considerable amount of time, your 5-10 second SNAPSHOT update
checks against the public central repository are going to execute in
hundreds of milliseconds (or less) when they are executed against a
local resource.

==== Getting Control of Dependencies

In addition to the simple savings in time and bandwidth, a repository
manager provides an organization with control over what is downloaded
by Maven. You can include or exclude specific artifacts from the
public repository, and having this level of control over what is
downloaded from the Maven Central repository is a prerequisite for
many organizations which have a need for strict standards for the
quality and security of the dependencies used in an enterprise system.

If you want to standardize on a specific version of a dependency like
Hibernate or Spring you can enforce this standardization by only
providing access to a specific version of an artifact in Nexus.  You
might be concerned with making sure that every external dependency has
a license compatible with your legal standards for adopting and
integrating open source libraries. If you are producing an application
which is distributed, you might want to make sure that no one
inadvertently adds a dependency on a third-party library covered under
a copy-left license like the GPL. All of this is possible with Nexus.

Repository managers are a central point of access to external binary
software artifacts and dependencies your system relies upon. Nexus
provides a level of control that is essential when you are trying to
track and manage the libraries and frameworks your software depends
upon.

==== A Nexus for Collaboration

Aside from the benefits of mediating access to remote repositories, a
repository manager also provides an important platform for
collaborative software development. Unless you expect every member of
your organization to download and build every single internal project
from source, you will want to provide a mechanism for developers and
departments to share binary artifacts (both SNAPSHOTs and releases)
for internal software projects. Internal groups often consume the APIs
and systems which are generated by other internal groups, when you
adopt Nexus as a deployment platform for internal artifacts, you can
easily share components and libraries between groups of developers.

Nexus provides you with a deployment target for your software
components. Once you install Nexus, you can start using Maven to
deploy snapshots and releases to internal repositories which can then
be combined with other repositories in repository groups. Over time,
this central deployment point for internal projects becomes the fabric
for collaboration between different development teams and
operations. Nexus is the secret ingredient that allows an organization
to scale its development effort without sacrificing agility.

[[repoman-sect-repo]]
=== What is a Repository?

Maven developers are familiar with the concept of a repository: a
collection of binary software artifacts and metadata stored in a
defined directory structure which is used by clients such as Apache
Ivy to retrieve binaries during a build process. In the case of the
Maven repository, the primary type of binary artifact is a JAR file
containing Java bytecode, but there is no limit to what type of
artifact can be stored in a Maven repository. For example, one could
just as easily deploy documentation archives, source archives, Flash
libraries and applications, or Ruby libraries to a Maven repository. A
Maven repository provides a platform for the storage, retrieval, and
management of binary software artifacts and metadata.

In Maven, every software artifact is described by an XML document
called a Project Object Model (POM). This POM contains information
that describes a project and lists a project's dependencies - the
binary software artifacts which a given component depends upon for
successful compilation or execution. 

When Maven downloads a dependency from a repository, it also downloads
that dependency's POM. Given a dependency's POM, Maven can then
download any other libraries which are required by that
dependency. The ability to automatically calculate a project's
dependencies and transitive dependencies is made possible by the
standard and structure set by the Maven repository.

Maven and other tools such as Ivy which interact with a repository to
search for binary software artifacts, model the projects they manage,
and retrieve software artifacts on-demand from a repository. When you
download and install Maven without any customization, Maven will
retrieve artifacts from a Maven Central repository which serves
millions of Maven users every single day. While you can configure
Maven to retrieve binary software artifacts from a collection of
mirrors, the best-practice is to install Nexus and use it to proxy and
cache the contents of Central on your own network. 

In addition to Central, there are a number of major organizations such
as Red Hat, Oracle, and Codehaus which maintain separate
repositories.

While this might seem like a simple, obvious mechanism for
distributing artifacts, the Java platform existed for several years
before the Maven project created a formal attempt at the first
repository for Java artifacts. Until the advent of the Maven
repository in 2002, a project's dependencies were gathered in a
manual, ad-hoc process and were often distributed with a project's
source code. As applications grew more and more complex, and as
software teams developed a need for more complex dependency management
capabilities for larger enterprise applications, Maven's ability to
automatically retrieve dependencies and model dependencies between
components became an essential part of software development.

==== Release and Snapshot Repositories

A repository stores two types of artifacts: releases and
snapshots. Release repositories are for stable, static release
artifacts and snapshot repositories are frequently updated
repositories that store binary software artifacts from projects under
constant development.

While it is possible to create a repository which serves both release
and snapshot artifacts, repositories are usually segmented into
release or snapshot repositories serving different consumers and
maintaining different standards and procedures for deploying
artifacts.  Much like the difference between a production network and
a staging network, a release repository is considered a production
network and a snapshot repository is more like a development or a
testing network.  While there is a higher level of procedure and
ceremony associated with deploying to a release repository, snapshot
artifacts can be deployed and changed frequently without regard for
stability and repeatability concerns.

The two types of artifacts managed by a repository manager are:

Release:: A release artifact is an artifact which was created by a
specific, versioned release. For example, consider the 1.2.0 release
of the commons-lang library stored in the Maven Central
repository. This release artifact, commons-lang-1.2.0.jar, and the
associated POM, commons-lang-1.2.0.pom, are static objects which will
never change in the Maven Central repository. Released artifacts are
considered to be solid, stable, and perpetual in order to guarantee
that builds which depend upon them are repeatable over time. The
released JAR artifact is associated with a PGP signature, an MD5 and
SHA checksum which can be used to verify both the authenticity and
integrity of the binary software artifact.

Snapshot:: Snapshot artifacts are artifacts generated during the
development of a software project. A Snapshot artifact has both a
version number such as "1.3.0" or "1.3" and a timestamp in its
name. For example, a snapshot artifact for commons-lang 1.3.0 might
have the name commons-lang-1.3.0-20090314.182342-1.jar the associated
POM, MD5 and SHA hashes would also have a similar name.  To facilitate
collaboration during the development of software components, Maven and
other clients which know how to consume snapshot artifacts from a
repository also know how to interrogate the metadata associated with a
Snapshot artifact to retrieve the latest version of a Snapshot
dependency from a repository.

A project under active development produces SNAPSHOT artifacts that
change over time. A release is comprised of artifacts which will
remain unchanged over time.

==== Repository Coordinates

Repositories and tools like Maven know about a set of coordinates
including the following components: groupId, artifactId, version, and
packaging. This set of coordinates is often referred to as a GAV
coordinate which is short for "Group, Artifact, Version
coordinate". The GAV coordinate standard is the foundation for Maven's
ability to manage dependencies. Four elements of this coordinate
system are described below:

groupId:: A group identifier groups a set of artifacts into a logical
group. Groups are often designed to reflect the organization under
which a particular software component is being produced. For example,
software components being produced by the Maven project at the Apache
Software Foundation are available under the groupId org.apache.maven.

artifactId:: An artifact is an identifier for a software component. An
artifact can represent an application or a library; for example, if
you were creating a simple web application your project might have the
artifactId "simple-webapp", and if you were creating a simple library,
your artifact might be "simple-library". The combination of groupId
and artifactId must be unique for a project.

version:: The version of a project follows the established convention
of Major, Minor, and Point release versions. For example, if your
simple-library artifact has a Major release version of 1, a minor
release version of 2, and point release version of 3, your version
would be 1.2.3. Versions can also have alphanumeric qualifiers which
are often used to denote release status. An example of such a
qualifier would be a version like "1.2.3-BETA" where BETA signals a
stage of testing meaningful to consumers of a software component.

packaging:: Maven was initially created to handle JAR files, but a
Maven repository is completely agnostic about the type of artifact it
is managing. Packaging can be anything that describes any binary
software format including ZIP, SWC, SWF, NAR, WAR, EAR, SAR.

==== Addressing Resources in a Repository

Tools designed to interact Maven repositories translate artifact
coordinates into a URL which corresponds to a location in a Maven
repository. If a tool such as Maven is looking for version 1.2.0 of
the commons-lang JAR in the group org.apache.commons, this request is
translated into:

----
<repoURL>/org/apache/commons/commons-lang/1.2.0/commons-lang-1.2.0.jar
----

Maven would also download the corresponding POM for commons-lang
1.2.0 from:

----
<repoURL>/org/apache/commons/commons-lang/1.2.0/commons-lang-1.2.0.pom
----

This POM may contain references to other dependencies which would then
be retrieved from the same repository using the same URL patterns.

==== The Maven Central Repository

The most useful Maven repository is the Maven Central repository. The
Maven Central repository contains almost 90,000 software artifacts
occupying around 70 GB of disk space. You can look at Central as an
example of how Maven repositories operate and how they are
assembled. Here are some of the properties of release repositories
such as the Maven Central repository:

Artifact Metadata:: All software artifacts added to Central require
proper metadata including a Project Object Model (POM) for each
artifact which describes the artifact itself, and any dependencies
that software artifact might have.

Release Stability:: Once published to the Maven Central repository, an
artifact and the metadata describing that artifact never change. This
property of release repositories guarantees that projects which depend
on releases will be repeatable and stable over time. While new
software artifacts are being published to central every day, once an
artifact is assigned a release number on Central, there is a strict
policy against modifying the contents of a software artifact after a
release.

Repository Mirrors:: Central is a public resource, and it is currently
used by the millions of developers who have adopted Maven and the
tools that understand how to interact with the Maven repository
structure. There are a series of mirrors for the Central repository
which are constantly synchronized with Central. Users are encouraged
to query central for project metadata and cryptographic hashes and
they are encouraged to retrieve the actual software artifacts from one
of Central's many mirrors.  Tools like Nexus are designed to retrieve
metadata from Central and artifact binaries from mirrors.

Artifact Security:: The Maven Central repository contains
cryptographic hash cryptographic hashes and PGP signatures which can
be used to verify the authenticity and integrity of software artifacts
served from Central or one of the many mirrors of Central.

[[repoman-sect-repoman]]
=== What is a Repository Manager

If you use Maven, you are using a repository to retrieve artifacts and
Maven plugins. In fact, Maven used a Maven repository to retrieve core
plugins that implement the bulk of the features used in your
builds. Once you start to rely on repositories, you realize how easy
it is to add a dependency on an open source software library available
in the Maven Central repository, and you might start to wonder how you
can provide a similar level of convenience for your own
developers. When you install a repository manager, you are bringing
the power of a repository like Central into your organization, you can
use it to proxy Central, and host your own repositories for internal
and external use. In this section, we discuss the core functionality
which defines what a repository manager does.

Put simply, a repository manager provides two core features:

* The ability to proxy a remote repository and cache artifacts saving
  both bandwidth and time required to retrieve a software artifact
  from a remote repository, and

* The ability the host a repository providing an organization with a
  deployment target for software artifacts.

In addition to these two core features, a repository manager also
allows you to manage binary software artifacts through the software
development life-cycle, search and catalogue software artifacts, audit
development and release transactions, and integrate with external
security systems such as LDAP. The following sections define the
feature sets of Nexus Open Source and Nexus Professional.

==== Core Capabilities of a Repository Manager

The base-line features of a repository manager are a description of
the core capabilities of Nexus Open Source. Nexus Open Source provides
for the:

Management of Software Artifacts:: A repository manager is able to
manage packaged binary software artifacts. In Java development, this
would include JARs containing bytecode, source, or javadoc. In other
environments, such as Flex, this would include any SWCs or SWFs
generated by a Flex build.

Management of Software Metadata:: A repository manager should have
some knowledge of the metadata which describes artifacts. In a Maven
repository this would include project coordinates (groupId,
artifactId, version, classifier) and information about a given
artifact's releases.

Proxying of External Repositories:: Proxying an external repository
yields more stable builds as the artifacts used in a build can be
served to clients from the repository manager's cache even if the
external repository becomes unavailable. Proxying also saves bandwidth
and time as checking for the presence of an artifact on a local
network is often orders of magnitude faster than querying a heavily
loaded public repository

Deployment to Hosted Repositories:: Organizations which deploy
internal snapshots and releases to hosted repositories have an easier
time distributing software artifacts across different teams and
departments. When a department or development group deploys artifacts
to a hosted repository, other departments and development groups can
develop systems in parallel, relying upon dependencies served from
both release and snapshot repositories.

Searching an Index of Artifacts:: When you collect software artifacts
and metadata in a repository manager, you gain the ability to create
indexes and allow users and systems to search for artifacts. With the
Nexus index, an IDE such as Eclipse has almost instantaneous access to
the contents of all proxy repositories (including the Central
repository) as well as access to your own internal and 3rd party
artifacts. While the Central repository transformed the way that
software is distributed, the Nexus index format brings the power of
search to massive libraries of software artifacts.

Infrastructure for Artifact Management:: A repository manager should
also provide the appropriate infrastructure for managing software
artifacts and a solid API for extension. In Nexus, Sonatype has
provided a plugin API which allows developers to customize both the
behaviour, appearance, and functionality of the tool.

==== Additional Features of a Repository Manager

Once you adopt the core features of a repository manager, you start to
view a repository manager as a tool which enables more efficient
collaboration between development groups. Nexus Professional builds
upon the foundations of a repository manager and adds capabilities
such as Procurement and Staging.

Managing Project Dependencies:: Many organizations require some level
of oversight over the open source libraries and external artifacts
that are let into an organization's development cycle. An organization
could have specific legal or regulatory constraints which requires
every dependency to be subjected to a rigorous legal or security audit
before it is integrated into a development environment. Another
organization might have an architecture group which needs to make sure
that a large set of developers only has access to a well-defined list
of dependencies or specific versions of dependencies. Using the
Procurement features of Nexus Professional, managers and architecture
groups have the ability to allow and deny specific artifacts from
external repositories.

Managing a Software Release:: Nexus Professional adds some essential
work-flow to the process of staging software to a release
repository. Using Nexus Professional, developers can deploy to a
staging directory which can trigger a message to a Release Manager or
to someone responsible for QA. Quality assurance (or a development
manager) can then test and certify a release having the option to
promote a release to the release repository or to discard a release if
it didn't meet release standards. Nexus Professional's staging
features allow managers to specify which personnel are allowed to
certify that a release can be promoted to a release repository giving
an organization more control over what software artifacts are released
and who can release them.

Integration with LDAP:: Nexus integrates with an LDAP directory,
allowing an organization to connect Nexus to an existing directory of
users and groups. Nexus authenticates users against an LDAP server and
provides several mechanisms for mapping existing LDAP groups to Nexus
roles.

Advanced Security:: Using Nexus Professional provides the User Token
feature set. It removes the need for storing username and password
credentials in the Maven settings file replacing it with Nexus managed
token that can automatically be updated to the user's specific settings file
with the Maven settings integration. The tokens to not allow any
reverse engineering of the user name and password and therefore do not
expose these on the file system in the settings file in any form.

Settings Templates:: Nexus Professional allows you to define Maven
settings templates for developers. Developers can then automatically
receive updates to Maven settings (~/.m2/settings.xml) using the Maven
Nexus plugin. The ability to define Maven settings templates and to
distribute customized Maven settings files to developers makes it easy
for an organization to change global profiles or repository
configuration without relying on developers to manually install a new
settings file in a development environment.

Support for Multiple Repository Formats:: Nexus Professional supports
the P2 and the OSGi Bundle repository format used by the new Eclipse
provisioning platform and OSGi developers. You can use the P2 plugin
to consolidate, provision, and control the plugins that are being used
in an Eclipse IDE. Using Nexus procurement, repository groups, and
proxy repositories to consolidate multiple plugin repositories, an
organization can use Nexus Professional to standardize the
configuration of Eclipse IDE development environments.

[[repoman-sect-reasons]]
=== Reasons to Use a Repository Manager

Here are a few reasons why using a repository manager is an
imperative. While most people wouldn't even think of developing
software without the use of a source code control system like
Subversion or Perforce, the concept of using a repository manager is
still something that needs development. There are many who use Maven
for years without realizing the benefits of using a repository
manager. This section was written as an attempt to capture some of the
benefits of using a repository manager.

==== Speed Up Your Builds

When you run your multi-module project in Maven, how do you think
Maven knows if it needs to update plugins or snapshot dependencies? It
has to make a request for each artifact it needs to test. Even if
nothing has changed, if your project depends on a few SNAPSHOTs or if
you don't specify plugin version, Maven might have to make tens to
hundreds of requests to a remote repository. All of these requests
over the public Internet add up to real, wasted, time. I've seen
complex builds cut build time by 75% after installing a local instance
of Nexus.  You are wasting time better spent coding waiting for your
build to needlessly interrogate a remote Maven repository.

==== Save Bandwidth

The larger the organization, the more critical bandwidth savings can
be. If you have thousands of developers regularly wasting good
bandwidth to download the same files over and over again, using a
repository manager to keep a local cache is going to save you a good
deal of bandwidth. Even for smaller organizations with limited budgets
for connectivity and IT operations, having to deal with a set of
developers maxing out your connection to the Internet to download the
same things over and over again seems backwards.

==== Ease the Burden on Central

Running the Maven Central repository is no short order. It ain't cheap
to serve the millions of requests and Terabytes of data required to
satisfy the global demand for software artifacts from the Maven
Central repository. Something as simple as installing a repository
manager at every organization that uses Maven would likely cut the
bandwidth requirements for Central by at least half. If you have more
than a couple developers using Maven, install a repository manager for
the sake of keeping Central available and in business.

==== Gain Predictability and Scalability

How often in the past few years has your business come to a crashing
halt because of an outage? Depending on Central for your day to day
operations also means that you depend on having Internet connectivity
(and on the fact the Central will remain available 24/7).  While
Sonatype is confident in its ability to keep Central running 24/7, you
should take some steps of your own to make sure that your development
team isn't going to be surprised by some network outage on either
end. If you have a local repository manager, like Nexus, you can be
sure that your builds will continue to work even if you lose
connectivity.

==== Control and Audit Dependencies and Releases

So, you've moved over to Maven (or maybe Ivy, Ivy reads the same
repository), and you now have a whole room full of developers who feel
empowered to add or remove dependencies and experiment with new
frameworks. We've all seen this. We've all worked in places with a
developer who might be more interested in experimenting than in
working.  It is unfortunate to say so, but there are often times when
an architect, or an architecture group needs to establish some
baseline standards which are going to be used in an
organization. Nexus provides this level of control. If you need more
oversight over the artifacts that are making it into your
organization, take a look at Nexus. Without a repository manager, you
are going to have little control over what dependencies are going to
be used by your development team.

==== Deploy 3rd Party Artifacts

How do you deal with that one-off JAR from a vendor that is not open
source, and not available on the Maven Central repository? You need to
deploy these artifacts to a repository and configure your Maven
instance to read from that repository. Instead of hand-crafting some
POMs, download Nexus and take the two or three minutes it is going to
take to get your hands on a tool that can create such a repository
from 3rd-party artifacts. Nexus provides an intuitive upload form that
you can use to upload any random free-floating JAR that finds its way
into your project's dependencies.

==== Collaborate with Internal Repositories

Many organizations require every developer to checkout and build the
entire system from source simply because they have no good way of
sharing internal JARs from a build. You can solve a problem like this
by splitting projects up and using Nexus as an internal repository to
host internal dependencies.

For example, consider a company that has 30 developers split into
three groups of 10, each group focused on a different part of the
system. Without an easy way to share internal dependencies, a group
like this is forced either to create an ad hoc file-system-based
repository or to build the system in its entirety so that dependencies
are installed in every developer's local repository.

The alternative is to separate the projects into different modules
that all have dependencies on artifacts hosted by an internal Nexus
repository. Once you've done this, groups can collaborate by
exchanging compiled snapshot and release artifacts via Nexus. In other
words, you don't need to ask every developer to checkout a massive
multi-module project that includes the entire organization's
code. Each group within the organization can deploy snapshots and
artifacts to a local Nexus instance, and each group can maintain a
project structure which includes only the projects it is responsible
for.

==== Distribute with Public Repositories

If you are an open source project, or if you release software to the
public, Nexus can be the tool you use to serve artifacts to external
users. Think about it this way… When was the last time you cut a
release for your software project? Assuming it wasn't deployed to a
Maven repository, you likely had to write some scripts to package the
contents of the release, maybe someone special had to sign the release
with a super-secret cryptographic key. Then, you had to upload it to
some web server, and then make sure that the pages that describe the
upload were themselves updated. Lots of needless complexity…

If you were using something like Nexus, which can be configured to
expose a hosted repository to the outside world, you could use the
packaging and assembly capabilities of Maven and the structure of the
Maven repository to make a release that is more easily consumed. And,
this isn't just for JAR files and Java web applications; Maven
repositories can host any kind of artifact. Nexus, and Maven
repositories in general, define a known structure for releases. If you
are writing some Java library, publishing it to your own Nexus
instance serving a public repository will make it easier for people to
start using your code right away.

[[repoman-sect-adopting]]
=== Adopting a Repository Manager

This section talks about the stages of moving to a repository
manager. Adopting a repository manager is not an all or nothing
proposition, and there are various levels (or stages) of adoption that
can be distinguished when approaching repository management. On one
end of the adoption spectrum is the organization that installs a
repository manager just to control and consolidate access to a set of
remote repositories. On the other end of the spectrum is the
organization which has integrated the repository manager into an
efficient software development life-cycle, using it to facilitate
decision points in the life-cycle, encouraging more efficient
collaboration throughout the enterprise, and keeping detailed records
to increase visibility into the software development process.

==== Stage Zero: Before Using a Repository Manager

While this isn't a stage of adoption, Stage Zero is a description of
the way software builds work in the absence of a repository manager.
When a developer decides that a he needs a particular open source
software component, he will download it from the component's web site,
read the documentation, and find the additional software that his
components rely on (referred to as "dependencies"). Once he has
manually assembled a collection of dependencies from various open
source project web sites and proprietary vendors, he will place all
these components somewhere on the network so that he, his team
members, the build script, the QA team, and the production support
team can find it. At any time, other developers may bring in other
components, sometimes with overlapping dependencies, placing them in
different network locations.  The instructions to bring all of these
ad-hoc, developer-managed components libraries together in a software
build process can become very complicated and hard to maintain.

Maven was introduced to improve this build process by introducing the
concept of structured repositories from which the build scripts can
retrieve the software components. In Maven language, these software
components or dependencies are referred to as "artifacts", a term
which can refer to any generic software artifact including components,
libraries, frameworks, containers, etc. Maven can identify artifacts
in repositories, understand their dependencies, retrieve all that are
needed for a successful build, and deploy its output back to
repositories when done.

Developers using Maven without a repository manager find most of their
software artifacts and dependencies in Maven Central. If they happen
to use another remote repository or if they need to add a custom
artifact, the solution, in Stage Zero, is to manually manipulate the
files in a local repository and share this local repository with
multiple developers. While this approach may yield a working build for
a small team, managing a shared local repository doesn't allow an
organization to scale a development effort. There is no inherent
control over who can set up a local repository, who can add to them or
change or delete from them, nor are there tools to protect the
integrity of these repositories.

That is, until Repository Managers were introduced.

==== Stage One: Proxying Remote Repositories

This is the easiest stage to understand both in terms of benefits to
an organization and action required to complete this stage. All you
need to do to start Procyon a remote repository is to deploy Nexus
and start the server with the default configuration. Configure your
Maven clients to read from the Nexus public repository group, and
Nexus will automatically retrieve artifacts from remote repositories,
such as Maven Central, caching them locally.

Without a repository manager, your organization might have hundreds of
developers independently downloading the same artifacts from public,
remote repositories. With a repository manager, these artifacts can be
downloaded once and stored locally. After Stage One, your builds run
considerably faster than they did when you relied upon the Maven
Central repository.

Once you've installed Nexus and you've configured all of your
organization's clients to use it as a single point of access to remote
repositories, you begin to realize that it now provides you with a
central configuration point for the artifacts used throughout your
organization. Once you've started to proxy, you can start to think
about using Nexus as a tool to control policy and what dependencies
are allowed to be used in your organization. Nexus Professional
provides a procurement plugin which allows for fine-grained control
over which artifacts can be accessed from a remote repository. This
procurement feature is described in more detail in the section which
deals with Life-cycle Integration.

==== Stage Two: Hosting a Repository Manager

Once you have started to proxy remote repositories and you are using
Nexus as a single, consolidated access point for remote repositories,
you can start to deploy your own artifacts to Nexus hosted
repositories. Most people approach repository management to find a
solution for proxying remote repositories, and while proxying is the
most obvious and immediate benefit of installing a repository manager,
hosting internally generated artifacts tends to be the stage that has
the most impact on collaboration within an organization.

To understand the benefits of hosting an internal repository, you have
to understand the concept of managing binary software artifacts.
Software development teams are very familiar with the idea of a source
code repository or a source code management tool. Version control
systems such as Subversion, Clearcase, Git, and CVS provide solid
tools for managing the various source artifacts that comprise a
complex enterprise application, and developers are comfortable
checking source out from source control to build enterprise
applications. However, past a certain point in the software
development life-cycle, source artifacts are no longer relevant. A QA
department trying to test an application or an Operations team
attempting to deploy an application to a production network no longer
needs access to the source artifacts. QA and Operations are more
interested in the compiled end-product of the software development
life-cycle: the binary software artifacts. A repository manager allows
you to version, store, search, archive, and release binary software
artifacts derived from the source artifacts stored in a source control
system. A repository manager allows you to apply the same systematic
operations on binary software artifacts which you currently apply to
your source code.

When your build system starts to deploy artifacts to an internal
repository, it changes the way that developers and development groups
can interact with one another in an enterprise. Developers in one
development group can code and release a stable version of an internal
library, deploy this library to an internal Nexus release repository,
and so share this binary artifact with another group or department.
Without a repository manager managing internal artifacts, you have
ad-hoc solutions and the organizational equivalent of "duct tape". How
does the infrastructure group send a new library to the applications
group without Nexus? Someone copies a file to a shared directory, and
sends an email to the team lead. Organizations without repository
managers are full of these ad-hoc processes that get in the way of
efficient development and deployment.

With a repository manager, every developer and every development group
within the enterprise understands and interacts with a common
collaborative structure: the repository manager. Do you need to
interact with the Commerce team's new API? Just add a dependency to
your project and Maven will retrieve the library from Nexus
automatically.

One of the other direct benefits of deploying your own artifacts to a
repository such as Nexus is the ability to quickly search the metadata
and contents of those artifacts both via a web UI and through IDE
integration tools such as m2eclipse. When you start to deploy internal
artifacts you can synchronize all development groups to a common
version and naming standard, and you can use the highly
configurable authentication and role-based access controls to control
which developers and which development groups can deploy artifacts to
specific repositories or paths within a repository.

==== Stage Three: Continuous Collaboration

Developing this collaborative model further, if your application is
being continuously built and deployed using a tool like Hudson, a
developer can checkout a specific module from a large multi-module
build and not have to constantly deal with the entire source tree at
any given time. This allows a software development effort to scale
efficiently. If every developer working on a complex enterprise
application needs to checkout the entire source tree every time he or
she needs to make a simple change to a small component, you are
quickly going to find that building the entire application becomes a
burdensome bottleneck to progress. The larger your enterprise grows,
the more complex your application becomes, the larger the collective
burden of wasted time and missed opportunities. A slow enterprise
build prevents the quick turnaround or quick feedback loop that helps
your developers maintain focus during a development cycle.

Once you are building with Maven, sharing binary artifacts with Nexus,
continuously testing and deploying with Hudson, and generating reports
and metrics with tools like Sonar, your entire organization gains a
collaborative "central nervous system" that enables a more agile
approach to software development.

==== Stage Four: Life-cycle Integration

Once you've configured a repository manager to proxy remote
repositories and you are using a repository manager as an integration
point between developers and departments, you start to think about the
various ways your repository manager can be used to support the
decisions that go into software development. You can start using the
repository manager to stage releases and supporting the work-flow
associated with a managed release, and you can use the procurement
features of a tool like Nexus Professional to give management more
visibility into the origins, characteristics and open source licenses
of the artifacts used during the creation of an enterprise
application.

Nexus Professional enables organizations to integrate the management
of software artifacts tightly with the software development life-cycle:
Provisioning, Compliance, Procurement, Enterprise Security, Staging
and other capabilities that support the work-flow that surrounds a
modern software development effort.

Using Nexus Professional's Maven Settings management feature
and integrated security features you can configure a developer's
Maven settings by running a single, convenient Maven goal and
downloading customized settings for a particular developer. When
you use Maven and Nexus Professional together, developers can get
up and running quickly, collaborating on projects that share
common conventions without having to manually install dependencies
in local repositories.

Provisioning:: Using Nexus as an integration point between Engineering
and Operations means that Engineering can be responsible for
delivering solid, tested artifacts to Quality Assurance and Operations
via a standard repository format. Often development teams are roped
into the production deployment story and become responsible for
building entire production environments within a build system. This
conflates software engineering with system administration and blurs
the line between Engineering and Operations. If you use Nexus as a
end-point for releases from Engineering, Operations can then retrieve,
assemble, and configure an application from tested components in the
Nexus repository.

Compliance:: Procurement, staging, and audit logs are all features
which increase the visibility into who and what is involved with your
software development effort. Using Nexus Professional, Engineering can
create the reports and documents which can be used to facilitate
discussions about oversight.  Organizations subject to various
regulations often need to produce a list of components involved in a
software release. Legal departments often require a list of open
source licenses being used in a particular software component, and
managers often lack critical visibility into the software development
process.

Procurement:: The ease with which today's developer can add a
dependency on a new open source library and download this library from
a Central repository has a downside. Organizations large and small are
constantly wondering what open source libraries are being used in
applications, and whether these libraries have acceptable open source
licenses for distribution. The Procurement features of Nexus
Professional give architects and management more oversight over the
artifacts which are allowed into an organization. Using the
Procurement features, a Nexus administrator or Procurement manager can
allow or deny specific artifacts by group, version, or path. You can
use the procurement manager as a firewall between your own
organization's development environment and the 95,000 artifacts
available on the Maven Central repository.

Enterprise Security:: Nexus' LDAP integration allows an enterprise to
map existing LDAP groups to Nexus roles and provides Nexus
administrators with a highly configurable interface to control which
individuals or groups have access to a fine-grained set of Nexus
permissions.

Staging:: Nexus Professional adds an important step to the software
release work-flow, adding the concept of a managed (or staged) release
to a hosted repository. When a developer needs to perform a production
release, Nexus Professional can isolate the artifacts involved in a
release in a staged repository which can then be certified and
tested. A manager or a quality assurance tester can then promote or
discard a release. The staging feature allows you to specify the
individuals that are allowed to promote a release and keeps an audit
of who was responsible for testing, promoting, or discarding a
software release.

[[install]]
== Installing and Running Nexus

=== Nexus Prerequisites

Nexus Open Source and Nexus Professional only have one prerequisite, a
Java Runtime Environment (JRE) compatible with Java 5 or higher. Nexus
is most often run with the JRE that is bundled with a Java Development
Kit (JDK) installation, and it can be run with the latest version of
Oracle's JDK for Java 6 or Java 7. To download the latest release of
the Oracle JDK, go to
http://www.oracle.com/technetwork/java/javase/downloads/index.html ,
and download the latest Java 6 or Java 7 JDK.


[[install-sect-downloading]]
=== Downloading Nexus

There are two distributions of Nexus: http://www.sonatype.org/nexus[Nexus
Open Source] and http://www.sonatype.com/products/nexus[Nexus
Professional].  Nexus Open Source is a fully-featured repository
manager which can be freely used, customized, and distributed under
the Eclipse Public License (EPL) Version 1. Nexus Professional is a
distribution of Nexus with features that are relevant to large
enterprises and organizations which require complex procurement and
staging work-flows in addition to more advanced LDAP integration,
Atlassian Crowd support, and other development infrastructure. The
differences between Nexus Open Source and Nexus Professional are
explored in the previous chapter.

==== Downloading Nexus Open Source

To download Nexus Open Source go to http://www.sonatype.org/nexus/go
and download the latest Nexus Open Source distribution by clicking on
the appropriate button for a ZIP or a Gzip TAR archive (TGZ) shown in
<<fig-installing-open-source-dl>>. Your download will be file named
nexus-2.1.0-bundle.zip or nexus-2.1.0-bundle.tar.gz

[[fig-installing-open-source-dl]]
.Downloading Nexus Open Source
image::figs/web/installing-open-source-dl.png[scale=80]

Older versions can be downloaded following the link at the bottom of
<<fig-installing-open-source-dl>> and selecting a version and archive
type in the page displayed in
<<fig-installing-open-source-dl-select>>.

[[fig-installing-open-source-dl-select]]
.Selecting the Nexus Open Source Distribution Download
image::figs/web/installing-open-source-dl-select.png[scale=80]

Nexus Open Source can also be deployed as a web application in a
servlet container like Jetty or Tomcat or an application server like
Glassfish or JBoss. Instructions for installing Nexus as a WAR are
found in <<install-sect-as-a-war>>.

==== Downloading Nexus Professional

To download Nexus Professional, go to the
http://go.sonatype.com/forms/NexusEvaluationRegForm[Nexus Trial
evaluation form].

Fill out the form and then check your email account for download
instructions. After filling out a brief contact form and agreeing to
the evaluation license, you will be sent an email with a link to
download the Nexus Professional distribution. Nexus is available as
archive files nexus-professional-2.1.0-bundle.zip and
nexus-professional-2.1.0-bundle.tar.gz.



===  Installing Nexus

The following instructions are for installing Nexus Open Source or
Nexus Professional as a stand-alone server. Nexus comes bundled with a
Jetty instance which listens to all configured IP addresses on a host
(0.0.0.0) and runs on port 8081 by default. If you would like to run
Nexus as a web application in an existing application server or
servlet container, please refer to the instructions in
<<install-sect-as-a-war>>.

Installing Nexus is straightforward. Unpack the Nexus web
application archive in a directory. If you are installing Nexus on a
local workstation to give it a test run, you can install it in your
home directory or wherever you like; Nexus doesn't have any hard coded
directories, it will run from any directory. If you downloaded the ZIP

----
$ unzip nexus-2.1.0-bundle.zip
----

And, if you download the GZip'd TAR archive, run:

----
$ tar xvzf nexus-2.1.0-bundle.tar.gz
----

For Nexus professional the equivalent commands would be 

----
$ unzip nexus-professional-2.1.0-bundle.zip
$ tar xvzf nexus-professional-2.1.0-bundle.tar.gz
----

NOTE: There are some known incompatibilities with the version of tar
provided by Solaris and the gzip tar format. If you are installing
Nexus on Solaris, you must use the GNU tar application, or you will
end up with corrupted files.

NOTE: If you are installing Nexus on a server, you might want to use a
directory other than your home directory. On a Unix machine, this book
assumes that Nexus is installed in /usr/local/nexus-2.1.0
with a symbolic link /usr/local/nexus to the nexus directory. Using a
generic symbolic link nexus to a specific version is a common practice
which makes it easier to upgrade when a newer version of Nexus is made
available.

----
$ sudo cp nexus-2.1.0-bundle.tar.gz /usr/local
$ cd /usr/local
$ sudo tar xvzf nexus-2.1.0-bundle.tar.gz
$ ln -s nexus-2.1.0 nexus
----

Although it isn't required for Nexus to run, you may want to set an
environment variable NEXUS_HOME in your environment which
points to the installation directory of Nexus. This chapter will refer
to this location as '+++$NEXUS_HOME+++'

NOTE: On Windows you should install Nexus outside +++Program Files+++
to avoid problems with Windows file registry virtualization. If you
plan to run Nexus as a specific user you could install into the
AppData/Local directory of that users home directory. Otherwise simply
go with e.g. C:\nexus or something similar.

The Nexus installation directory nexus-2.1.0 or nexus-professional-2.1.0
has a sibling directory named sonatype-work. This directory contains
all of the repository and configuration data for Nexus and is stored
outside of the Nexus installation directory to make it easier to
upgrade to a newer version of Nexus.

By default, this directory is always a sibling to the nexus
installation directory; if you installed nexus in the /usr/local
directory it would also contain a sonatype-work sub-directory with a
nested nexus directory containing all of the content and
configuration. The location of the sonatype-work directory can be
customized by altering the nexus-work property in
'+++$NEXUS_HOME/conf/nexus.properties+++'

[[install-sect-upgrading]]
=== Upgrading Nexus

Since Nexus separates its configuration and data storage from the
application, it is easy to upgrade an existing Nexus installation. 

To upgrade Nexus, unpack the Nexus archive in the directory which
contains the existing Nexus installation. Once the archive is
unpacked, the new Nexus application directory should be a sibling to
your existing sonatype-work/ directory. 

If you have defined a symbolic link for the version of Nexus to use,
stop the server and change that to point at the new Nexus application
directory. When you start the new instance of Nexus it will read the
existing repository configuration from the sonatype-work directory.
Depending on the version you upgrade from and to some maintenance tasks
like rebuilding the internal indices can be necessary. Please refer
to the upgrade notes of the new release for more information on this.

If you are using any additional plugins supplied by Sonatype, the new
version of Nexus you downloaded will contain a newer version of the
plugin. Be sure to copy the new version from the optional-plugins
folder to the plugin-repository folder as documented in
<<install-additional-plugins>> and restart Nexus.

Externally supplied plugins are updated by simply replacing the folder
with the plugin with the new version.

NOTE: The same upgrade process can be used to change from the open
source to the professional version of Nexus.

[[install-sect-running]]
=== Running Nexus

When you start Nexus, you are starting a web server on the default
port of 0.0.0.0:8081. Nexus runs within a servlet container called
Jetty and it is started with a native service wrapper called the
http://wrapper.tanukisoftware.org/doc/english/introduction.html[Tanuki
Java Service Wrapper]. This service wrapper can be configured to run
Nexus as a Windows service or a Unix daemon. Nexus ships with generic
startup scripts for Unix-like platforms called +++nexus+++ and for
Windows platforms called +++nexus.bat+++ in the +++$NEXUS_HOME/bin+++
folder. To start Nexus on a Unix-like platform like Linux, MacOSX or
Solaris use

----
cd /usr/local/nexus
./bin/nexus console
----

Similarly starting on Windows can be done with the nexus.bat
file. Starting Nexus with the console command will leave Nexus running
in the current shell and display the log output right there.

On Unix system you can start Nexus detached from the starting shell
with will the start command even when not yet installed as a service.

----
./bin/nexus start
----

When executed you should see a feedback message and can then follow
the start-up process viewing the log file +++logs/wrapper.log+++
changes.  
----
Starting Nexus Repository Manager...
Started Nexus Repository Manager.
$ tail -f logs/wrapper.log 
----

At this point, Nexus will be running and listening on all IP addresses
(0.0.0.0) that are configured for the current host on port 8081. To
use Nexus, fire up a web browser and type in the URL
http://localhost:8081/nexus and you should see the Nexus user
interface as displayed in <<fig-installing-nexus-default-screen>>

While we use "localhost" throughout this book, you may need to use the
IP Loopback Address of "127.0.0.1" or the IP address assigned to the
machine running Nexus. 

When first starting Nexus Professional you are presented with a
form that allows you to request a trial activation. This page
displayed in <<fig-installing-trial-form>> contains a link to
the license activation screen in 
<<fig-installing-license-activation>>. 

[[fig-installing-trial-form]]
.Nexus Trial Activation Form
image::figs/web/installing-trial-form.png[scale=40]

After submitting the form for your trial activation you will receive a
license key via email that you can use in the license activation screen to
activate Nexus Professional. If you already have a license key or
license file you can use the same screen to upload the file and
register your license.

[[fig-installing-license-activation]]
.Nexus License Activation 
image::figs/web/installing-license-activation.png[scale=40]

Once you have agreed to the End User License Agreement you will be
directed to the Nexus Professional Evaluation Welcome screen displayed in 
<<fig-installing-pro-eval-welcome>>.

[[fig-installing-pro-eval-welcome]]
.Nexus License Activation 
image::figs/web/installing-pro-eval-welcome.png[scale=40]

Click on the "Log In" link in the upper
right-hand corner of the web page, and you should see the login dialog
displayed in <<fig-installing-nexus-login-dialog>>. 

TIP: The default administrator username and password combination is
"admin" and "admin123".

[[fig-installing-nexus-login-dialog]]
.Nexus Login Dialog (default login/password is admin/admin123)
image::figs/web/installing-nexus-login-dialog.png[scale=80]

When you are logged into your evaluation version of Nexus Professional
you will see some helpful links to the Nexus Pro Evaluation Guide,
Sample Projects and the Knowledgebase below the search input on the
Welcome screen.

With a full license for Nexus these links will be removed and you will
get the Nexus Application Window displayed in <<fig-installing-nexus-default-screen>>.

Nexus Open Source will not need to be activated with a license key and
will display a number of links to Resources and Support on the Welcome
screen to logged in users.

[[fig-installing-nexus-default-screen]]
.Nexus Application Window
image::figs/web/installing-nexus-default-screen.png[scale=100]


The files from Java Service Wrapper used for the start up process can
be found in +++$NEXUS_HOME/bin/jsw+++ and are separated into generic
files like the +++wrapper.conf+++ configuration file in conf and a
number of libraries in +++lib+++. An optional wrapper.conf include
allows you to place further configuration optionally in
+++$NEXUS_HOME/conf/wrapper-override.conf+++.


The platform specific directories are available for backwards
compatibility with older versions only and should not be used. A full
list of directories follows:

----
$ cd /usr/local/nexus/jsw
$ ls -1                                                                             
conf
lib
license
linux-ppc-64
linux-x86-32
linux-x86-64
macosx-universal-32
macosx-universal-64
solaris-sparc-32
solaris-sparc-64
solaris-x86-32
windows-x86-32
windows-x86-64
----

TIP: The start-up script +++nexus+++ supports the common service
commands +++stop+++, +++start+++, +++restart+++, +++status+++,
+++console+++ and +++dump+++.

[[install-sect-repoman-post-install]]
=== Post-Install Checklist

Nexus ships with some default passwords and settings for repository
indexing that need to be changed for your installation to be useful
(and secure). After installing and running Nexus, you need to make
sure that you complete the following tasks:

==== Step 1: Change the Administrative Password and Email Address

The administrative password defaults to admin123. The first thing you
should do to your new Nexus installation is change this password. To
change the administrative password login as "admin" with the password
"admin123", and click on Change Password under the Security menu in
the left-hand side of the browser window. For more detailed
instructions, see <<using-sect-user-profile>>.

==== Step 2: Configure the SMTP Settings

Nexus can send user-name and password recovery emails, to enable this
feature, you will need to configure Nexus with a SMTP Host and Port as
well as any necessary authentication parameters that Nexus needs to
connect to the mail server. To configure the SMTP settings, load the
server configuration dialog shown in
<<fig-config-administration-smtp>>.

==== Step 3: Enable Remote Index Downloads

Nexus ships with three important proxy repositories for the Maven
Central repository, Apache Snapshot repository, and the Codehaus
Snapshot repository. Each of these repositories contains thousands (or
tens of thousands) of artifacts and it would be impractical to
download the entire contents of each. To that end, most repositories
maintain an index which catalogues the entire contents and provides
for fast and efficient searching. Nexus uses these remote indexes to
search for artifacts, but we've disabled the index download as a
default setting. To download remote indexes:

. Click on Repositories under the Administration menu in the
  left-hand side of the browser window.

. Select each of the three proxy repositories and change Download
  Remote Indexes to true in the Configuration tab. You'll need to load
  the dialog shown in <<fig-repo-config>> for each of
  the three repositories.

This will trigger Nexus to re-index these repositories, during which
the remote index files will be downloaded. It might take Nexus a few
minutes to download the entire index, but once you have it, you'll be
able to search the entire contents of the Maven repository.

Once you've enabled remote index downloads, you still will not be able
to browse the complete contents of a remote repository. Downloading
the remote index allows you to search for artifacts in a repository,
but until you download those artifacts from the remote repository they
will not show in the repository tree when you are browsing a
repository. When browsing a repository, you will only be shown
artifacts which have been downloaded from the remote repository.

==== Step 4: Change the Deployment Password

The deployment user's password defaults to deployment123. Change this
password to make sure that only authorized developers can deploy
artifacts to your Nexus installation. To change the deployment
password: log in as an administrator, click on Security to expand the
Security menu, then click on Users. You should then see a list of
users. Right-click on the deployment user and select "Set Password".

==== Step 5: If necessary, set the LANG Environment Variable

If your Nexus instance needs to store configuration and data using an
international character set, you should set the LANG environment
variable. The Java Runtime will adapt to the value of the LANG
environment variable and ensure that configuration data is saved using
the appropriate character type. If you are starting Nexus as a
service, place this environment variable in the start-up script found
in /etc/init.d/nexus. For more information about locale settings in
Ubuntu read https://help.ubuntu.com/community/Locale

[[install-sect-service]]
=== Configuring Nexus as a Service

When installing Nexus for production usage you should configure Nexus
as a service, so it starts back up after server reboots. It is good
practice to run that service or daemon as a specific user that has
only the required access righs. The following sections provide
instructions for configuring Nexus as a service or daemon on various
operating systems.

==== Running as a Service on Linux

You can configure Nexus to start automatically, by copying the nexus
script to the /etc/init.d directory. On a Linux system 
perform the following operations as the root user:

. Copy either '+++$NEXUS_HOME/bin/nexus+++' to /etc/init.d/nexus

. Make the /etc/init.d/nexus script executable - chmod 755
  /etc/init.d/nexus

. Edit this script changing the following variables:

.. Change NEXUS_HOME to the absolute folder location e.g. 
+++ NEXUS_HOME="/usr/local/nexus"+++

.. Optionally change PIDDIR to /var/run

.. If Java is not on the default path for the user running Nexus, add
a JAVA_HOME variable which points to your local Java installation and 
add a '+++$JAVA_HOME/bin+++' to the PATH

. (Optional) Set the RUN_AS_USER to "nexus". If you do this, you will
  need to:

.. Create a nexus user

.. Change the Owner and Group of your nexus install directory
   to nexus

NOTE: If you set the "RUN_AS_USER" variable, you'll have to change the
"pid" directory to point to a directory where this user has read/write
permissions. In most Linux distributions, /var/run is only writable by
root. The properties that would need to be added to customize the PID
file location is "wrapper.pid". For more information about this
property and how it would be configured in wrapper.conf, see:
http://wrapper.tanukisoftware.com/doc/english/properties.html

===== Add Nexus as a Service on Red Hat, Fedora, and CentOS

This script has the appropriate chkconfig directives, so all you need
to do to add Nexus as a service is run the following commands:

----
$ cd /etc/init.d
$ chkconfig --add nexus
$ chkconfig --levels 345 nexus on
$ service nexus start
Starting Sonatype Nexus...
$ tail -f /usr/local/nexus/logs/wrapper.log
----

The second command adds nexus as a service to be started and stopped
with the service command and managed by the chkconfig manages the
symbolic links in /etc/rc[0-6].d which control the services to be
started and stopped when the operating system restarts or transitions
between run-levels. The third command adds nexus to run-levels 3, 4,
and 5. The service command starts Nexus, and the last command tails
the wrapper.log to verify that Nexus has been started successfully. If
Nexus has started successfully, you should see a message notifying you
that Nexus is listening for HTTP

===== Add Nexus as a Service on Ubuntu and Debian

The process for setting Nexus up as a service on Ubuntu differs
slightly from the process used on a Red Hat variant. Instead of running
chkconfig, you should run the following sequence of commands once
you've configured the start-up script in /etc/init.d

----
$ cd /etc/init.d
$ update-rc.d nexus defaults
$ service nexus start
Starting Sonatype Nexus...
$ tail -f /usr/local/nexus/logs/wrapper.log
----

====  Running as a Service on Mac OS X

The standard way to run a service on Mac OS X is by using launchd,
which uses plist files for configuration. An example plist file for
Nexus in shown <<ex-nexus-plist>>.

[[ex-nexus-plist]]
.A sample com.sonatype.nexus.plist file
----
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>com.sonatype.nexus</string>
    <key>ProgramArguments</key>
    <array>
        <string>/usr/local/nexus/bin/nexus</string>
        <string>console</string>
    </array>
    <key>RunAtLoad</key>
    <true/>
</dict>
</plist>
----

After saving the file as "com.sonatype.nexus.plist" in
/Library/LaunchDaemons/ you have to change the ownership and access
rights.

----
sudo chown root:wheel /Library/LaunchDaemons/com.sonatype.nexus.plist
sudo chmod 644 /Library/LaunchDaemons/com.sonatype.nexus.plist
----


TIP: Consider setting up a different user to run Nexus and adapt
permissions and the RUN_AS_USER setting in the nexus startup script.
 
With this setup Nexus will start as a service at boot time. To
manually start it after the configuration you can use

----
sudo launchctl load /Library/LaunchDaemons/com.sonatype.nexus.plist
----

==== Running as a Service on Windows

The start-up script for Nexus on Windows platforms is
+++bin/nexus.bat+++. Besides the standard commands for starting and
stopping the service it has the additional commands +++install+++ and
+++uninstall+++. Running these commands with elevated privileges will
set up the service for you or remove it as desired. Once installed as
a service with the +++install+++ command the batch file can be used to
start and stop the service. In addition the service will be available
in the usual Windows service management console with the +++nexus+++.

[[install-sect-proxy]]
=== Running Nexus Behind a Proxy

If you installed Nexus as a stand-alone application, Nexus is running
on a high-performance servlet container based on Java NIO. From a
performance perspective, there is no reason for you not to run Nexus
by itself without a proxy. Yet, more often than not, organizations run
applications behind a proxy for security concerns and to consolidate
multiple disparate applications using tools like mod_rewrite. For this
reason, we've included some brief instructions for configuration
Apache httpd. We assume that you've already installed Apache 2, and
that you are using a Virtual Host for www.somecompany.com.

Let's assume that you wanted to host Nexus behind Apache HTTPd at the
URL http://www.somecompany.com. To do this, you'll need to change the
context path that Nexus is served from.

. Edit nexus.properties in '+++$NEXUS_HOME/conf+++'. You'll see an
  element named nexus-webapp-context-path. Change this value from
  "/nexus" to "/"

. Restart Nexus and Verify that it is available on
  http://localhost:8081/

. Clear the Base URL in Nexus as shown in
  <<fig-config-administration-application-server>> under Application
  Server Settings.

At this point, edit the HTTPd configuration file for the
www.somecompany.com virtual host. Include the following to expose
Nexus via mod_proxy at http://www.somecompany.com/

----
ProxyRequests Off 
ProxyPreserveHost On 

<VirtualHost *:80> 
  ServerName www.somecompany.com 
  ServerAdmin admin@somecompany.com 
  ProxyPass / http://localhost:8081/
  ProxyPassReverse / http://localfhost:8081/
  ErrorLog logs/somecompany/nexus/error.log 
  CustomLog logs/somecompany/nexus/access.log common 
</VirtualHost>
----

If you just wanted to continue to serve Nexus at the /nexus context
path, you would not change the nexus-webapp-context-path in and you
would include the context path in your ProxyPass and ProxyPassReverse

----
  ProxyPass /nexus/ http://localhost:8081/nexus/
  ProxyPassReverse /nexus/ http://localhost:8081/nexus/
----

Apache configuration is going to vary based on your own application's
requirements and the way you intend to expose Nexus to the outside
world. If you need more details about Apache httpd and mod_proxy,
please see http://httpd.apache.org

[[install-sect-as-a-war]]
=== Installing the Nexus WAR

The Nexus Open Source WAR can run in in Tomcat, Jetty, and Resin and
other application server. To download the Nexus Open Source WAR, go to
http://www.sonatype.org/nexus/go.  Click on the Download Site link and
then download the Nexus WAR. Once you have downloaded the Nexus Open
Source WAR, you can install it in a servlet container or application
server.

The process for installing a WAR in an servlet container or
application server is going to vary for each specific
application. Often, this installation process is as simple as dropping
a WAR file in a special directory and restarting the container. In
many cases it will be required to expand the war into a folder rather
than deploying the unextracted WAR file for the plugin manager to work
with all installed plugins and allow installation of additional plugins.

For example, to install the Nexus WAR in Tomcat, drop the
nexus-2.1.0.war file in '+++$TOMCAT_HOME/webapps+++' and restart your
Tomcat instance. Assuming that Tomcat is configured on port 8080 once
Tomcat is started, Nexus will be available on
http://localhost:8080/nexus-2.1.0

If you would like a less verbose URL, copy nexus-2.1.0.war to a
file named nexus.war before copying the distribution to
'+++$TOMCAT_HOME/webapps+++'

NOTE: When installing Nexus as a WAR in an application server or
servlet container, it automatically creates a sonatype-work directory
in the home directory of the user running the application server. This
directory contains all of the necessary configuration and repository
storage for Nexus. 

[[install-sect-licensing]]
=== Installing a Nexus Professional License

To install a Nexus Professional license, click on Licensing in the
Administration menu. Clicking on Licensing will bring up the panel shown
in <<fig-installations-licensing>>. To upload your
Nexus Professional license, click on Browse..., select the file, and
click on Upload.

[[fig-installations-licensing]]
.Nexus Professional Licensing Panel
image::figs/web/repository-manager_license.png[scale=60] 

Once you have selected a license and uploaded it to Nexus, Nexus
Professional will display a dialog box with the Nexus Professional
End-user License Agreement as shown in <<fig-installation-eula>>. If
you agree with the terms and conditions, click on "I Agree".

[[fig-installation-eula]]
.Nexus Professional End-user License Agreement
image::figs/web/installing_license_eula.png[scale=60] 

Once you have agreed to the terms and conditions contained in the End
User License Agreement, Nexus Professional will then display a dialog
box confirming the installation of a Nexus Professional license as
shown in <<fig-installation-license-upload-config>>.

[[fig-installation-license-upload-config]]
.License Upload Finished Dialog
image::figs/web/installing_license_uploaded.png[scale=60]

If you need to remove your Nexus Professional license, you can click on
the "Uninstall License" button at the bottom of the Licensing
Panel. Clicking on this button will show the dialog in
<<fig-installation-config-uninstall>> which confirms that you want to
uninstall a license.

[[fig-installation-config-uninstall]]
.Uninstall License Confirmation Dialog
image::figs/web/installing_uninstall_license.png[scale=60]

Clicking Yes in this dialog box will uninstall the license from Nexus
Professional and display another dialog which confirms that the
license has been successfully uninstalled.

.License Uninstall Completed Dialog
image::figs/web/installing_uninstall_completed.png[scale=60]

==== Evaluation Expiration

If you have downloaded the Nexus Professional evaluation, you will
have 14 days to evaluate the product. After the expiration of this
14 day evaluation period, Nexus Professional will revert back to
Nexus Open Source. To reactivate Nexus Professional after the end of
your evaluation period, contact a Sonatype sales representative at
sales@sonatype.com
 
[[install-sect-dirs]]
=== Nexus Directories

The following sections describe the various directories that are a
part of any Nexus installation. When you install Nexus Open Source or
Nexus Professional, you are creating two directories: a directory
which contains the Nexus runtime and application often symlinked as
nexus and a directory which contains your own configuration and data -
sonatype-work/nexus. When you upgrade to a newer version of Nexus, you
replace the Nexus application directory and retain all of your own
custom configuration and repository data in sonatype-work/

[[sect-installing-work-dir]]
==== Sonatype Work Directory

The Sonatype Work directory sonatype-work is installed as a sibling to
the nexus application directory, and the location of this directory
can be configured via the nexus.properties file which is described in
<<sect-installing-conf-dir>>. <<fig-installing-sonatype-work-tree>>
shows the Sonatype Nexus work directory with some of its
sub-directories.

[[fig-installing-sonatype-work-tree]]
.The Sonatype Work Directory
image::figs/web/installing-sonatype-work-tree.png[scale=80]

The Sonatype Work Nexus directory sonatype-work/nexus/ contains a
number of sub-directories. Depending on the plugins installed and used
some directories may or may be not present in your installation:

access/:: This directory contains a log of all IP addresses
accessing Nexus. The data can be viewed by clicking on Active Users
Report in the Administration - Licensing tab in the Nexus user
interface.

aether-local-repository/:: This holds temporary files created when
running Maven dependency queries in the user interface.

backup/:: If you have configured a scheduled job to backup Nexus
configuration, this directory is going to contain a number of ZIP
archives that contain snapshots of Nexus configuration.  Each ZIP file
contains the contents of the conf/ directory. (Automated backups are a
feature of Nexus Professional.)

broker/:: The broker directory and its sub-directories contains the
storage backend for the Smart Proxy messaging component.

conf/:: This directory contains the Nexus configuration.  Settings
that define the list of Nexus repositories, the logging configuration,
the staging and procurement configuration, and the security settings
are all captured in this directory.

conf/keystore/:: Contains the automatically generated key used to
identify this Nexus instance for Smart Proxy usage

db/:: Contains the database storing the User Token information, if
that feature is enabled.

error-report-bundles/:: Contains the bundled archives of data
assembled for problem reporting.

health-check/:: Holds cached reports from the Repository Health Check
plugin.

indexer/:: Contains a Nexus index for all repositories and repository
groups managed by Nexus. A Nexus index is a Lucene index which is the
standard for indexing and searching a Maven repository. Nexus
maintains a local index for all repositories, and can also download a
Nexus index from remote repositories.

logs/:: The nexus.log file that contains information about a running
instance of Nexus. This directory also contains archived copies of
Nexus log files. Nexus log files are rotated every day. To reclaim
disk space, you can delete old log files from the logs/

nuget/:: Contains the database supporting queries against NuGet
repositories used for .NET package support in Nexus.

p2/:: If you are using the P2 repository management features of Nexus
Professional, this directory contains a local cache of P2 repository
artifacts.

plugin-repository/:: This directory contains any additionally
installed plugins from third parties as documented in
<<install-additional-plugins>>.

proxy/:: Stores data about the files contained in a remote
repository. Each proxy repository has a sub-directory in the
proxy/attributes/ directory and every file that Nexus has interacted
with in the remote repository has an XML file which captures such data
as the: last requested timestamp, the remote URL for a particular
file, the length of the file, and the digests for a particular file
among other things. If you need to backup the local cached contents of
a proxy repository, you should also back up the contents of the proxy
repository's directory under proxy/attributes/

storage/:: Stores artifacts and metadata for Nexus repositories. Each
repository is a sub-directory which contains the artifacts in a
repository. If the repository is a proxy repository, the storage
directory will contain locally cached artifacts from the remote
repository. If the repository is a hosted repository, the storage
directory will contain all artifacts in the repository. If you need to
backup the contents of a repository, you should backup the contents of
the storage directory.

template-store/:: Contains templates for default repositories. If you
examine the XML files in this directory, you will see that they
contain default templates for each different type of repository. For
example, the repository-default_proxy_release.xml file contains
defaults for a Proxy repository with a release policy.

timeline/:: Contains an index which Nexus uses to store events and
other information to support internal operations. Nexus uses this
index to store feeds and history.

tmp/:: Folder used for temporary storage.

trash/:: If you have configured scheduled jobs to remove snapshot
artifacts or to delete other information from repositories, the
deleted data will be stored in this directory.  To empty this trash
folder, view a list of Nexus repositories, and then click on the Trash
icon in the Nexus user interface.

The conf/ directory contains a number of files which allow for
configuration and customization of Nexus. All of the files contained
in this directory are altered by the Nexus administrative user
interface. While you can change the configuration settings contained
in these files with a text editor, Sonatype recommends that you modify
the contents of these files using the Nexus administrative user
interface. Depending on your Nexus version and the installed plugins
the complete list of files may differ slightly.

broker.groovy:: A groovy script for configuring low level properties
for Smart Proxy.

capabilities.xml:: Further Smart Proxy backend configuration.

healthcheck.properties:: Configuration for the Repository Health Check.

logback.properties, logback.xml and logback-*.xml::
Contains logging configuration. If you need to customize the detail of
log messages, the frequency of log file rotation, or if you want to
connect your own, custom logging appenders, you would alter this
configuration file. If you find log4j.properties files as well you can
safely remove them since they are remnants from an old version and are
not used anymore.

lvo-plugin.xml:: Contains configuration for the latest version
plugin. This XML file contains the location of the properties file
which Nexus queries to check for a newer version of Nexus.

nexus.xml:: The bulk of the configuration of Nexus is contained in
this file. This file maintains a list of repositories, and all
server-wide configuration like the SMTP settings, security realms,
repository groups, targets, and path mappings.

pgp.xml:: Contains PGP key server configuration.

nexus-obr-plugin.properties:: Contains configuration for the Nexus
OSGi Bundle repository plugin in Nexus Professional.

procurement.xml:: Contains configuration for the Nexus Procurement
plugin in Nexus Professional.

security-configuration.xml:: Contains global security configuration. 

security.xml:: Contains security configuration about users and roles.

staging.xml:: Contains configuration for the Nexus Staging Plugin in
Nexus Professional.

[[sect-installing-conf-dir]]
==== Nexus Configuration Directory

After installing Nexus and creating the nexus symlink as described
earlier, your nexus folder contains another conf directory. This
directory contains configuration for the Jetty servlet container. You
will only need to modify the files in this directory if you are
customizing the configuration of Jetty servlet container, or the
behaviour of the scripts that start Nexus.

The files and folders contained in this directory are:

classworlds.conf:: Defines the order in which resources and classes
are loaded from the classpath. It is unlikely that even the most
advanced Nexus users will ever need to customize the contents of this
file.

nexus.properties:: This file contains configuration variables which
control the behaviour of Nexus and the Jetty servlet container. If you
are customizing the port and host that Nexus will listen to, you would
change the application-port and application-host properties defined in
this file. If you wanted to customize the location of the Sonatype
work directory, you would modify the value of the nexus-work property
in this configuration file. Changing nexus-webapp-context-path allows
you to configure the server context path Nexus will be available at.

jetty.xml:: If this file is present in the conf/ directory, it will be
used to configure Jetty.

The conf/examples/ directory contains sample Jetty configuration files
which can be used to customize the behaviour of the Jetty servlet
container:

jetty.xml:: contains a jetty.xml sample with no customizations. This
sample file listens on the "application-port" defined in
nexus.properties

jetty-ajp.xml:: Contains a jetty.xml sample which will configure Nexus
to listen on an AJP port 8009. This configuration can be used if you
are proxying your Nexus server with web server which understands the
AJP protocol such as Apache httpd with the mod_proxy_ajp module.

jetty-dual-ports-with-ssl.xml:: Contains a jetty.xml sample which
configures Nexus to listen on both the "application-port" and
"application-port-ssl" (as defined in nexus.properties). This
sample configuration also contains the SSL redirect rule.

jetty-faster-windows.xml:: Contains a jetty.xml sample which
configures a response buffer size that will address performance issues
on Windows 2003 Server, for more information about this fix see
http://docs.codehaus.org/display/JETTY/Slow+Win2003[the Jetty Wiki]

jetty-header-buffer.xml:: Contains a jetty.xml sample which increases
the headerBufferSize to 8k from the default of 4k. Documentation about
the header buffer size can be found on
http://docs.codehaus.org/display/JETTY/Configuring+Connector[the Jetty
Wiki]

jetty-simple-https-proxy.xml:: Contains a jetty.xml sample which
should be used if you are proxying a Nexus instance with a web server
that is handling SSL. For example, if you were proxying Nexus with
Apache httpd server using mod_ssl you would use this configuration to
configure the Jetty RewriteHandler

jetty-ssl.xml:: Contains a jetty.xml sample which will only serve SSL
encrypted content from "application-port" (as defined in
nexus.properties

The conf/examples/proxy-https/ directory contains two files:
apache2.conf and jetty.xml contains sample mod_proxy directives to
configure Apache httpd to handle SSL.

[[config]]
== Configuring Maven to Use Nexus

[[config-sect-intro]]
=== Introduction

To use Nexus, you will configure Maven to check Nexus instead of the
public repositories. To do this, you'll need to edit your mirror
settings in your ~/.m2/settings.xml file.  First, we're
going to demonstrate how to configure Maven to consult your Nexus
installation instead of retrieving artifacts directly from the Maven
Central repository. After we override the central repository and
demonstrate that Nexus is working, we'll circle back to provide a more
sensible set of settings that will cover both releases and snapshots.

[[maven-sect-single-group]]
=== Configuring Maven to Use a Single Nexus Group

If you are adopting Nexus for internal development you should
configure a single Nexus group which contains both releases and
snapshots. To do this, add snapshot repositories to your public group,
and add the following mirror configuration to your Maven settings in
~/.m2/settings.xml

[[ex-maven-nexus-simple]]
.Configuring Maven to Use a Single Nexus Group
----
<settings>
  <mirrors>
    <mirror>
      <!--This sends everything else to /public -->
      <id>nexus</id>
      <mirrorOf>*</mirrorOf>
      <url>http://localhost:8081/nexus/content/groups/public</url>
    </mirror>
  </mirrors>
  <profiles>
    <profile>
      <id>nexus</id>
      <!--Enable snapshots for the built in central repo to direct -->
      <!--all requests to nexus via the mirror -->
      <repositories>
        <repository>
          <id>central</id>
          <url>http://central</url>
          <releases><enabled>true</enabled></releases>
          <snapshots><enabled>true</enabled></snapshots>
        </repository>
      </repositories>
     <pluginRepositories>
        <pluginRepository>
          <id>central</id>
          <url>http://central</url>
          <releases><enabled>true</enabled></releases>
          <snapshots><enabled>true</enabled></snapshots>
        </pluginRepository>
      </pluginRepositories>
    </profile>
  </profiles>
  <activeProfiles>
    <!--make the profile active all the time -->
    <activeProfile>nexus</activeProfile>
  </activeProfiles>
</settings>
----

In <<ex-maven-nexus-simple>> we have defined a single
profile: nexus profile is configured to download from the
central repository with a bogus URL. This URL is
overridden by the mirror setting in the same settings.xml file to
point to the URL of your single Nexus group. The nexus group
is then listed as an active profile in the activeProfiles
element.

[[config-sect-custom]]  
=== Adding Custom Repositories for Missing Dependencies

If you've configured your Maven settings.xml to list the Nexus public
group as a mirror for all repositories, you might encounter projects
which are unable to retrieve artifacts from your local Nexus
installation. This usually happens because you are trying to build a
project which has defined a custom set of repositories and
snapshotRepositories in a pom.xml. When you encounter a project which
contains a custom repository element in a pom.xml add this repository
to Nexus as a new proxy repository and then add the new proxy
repository to the public group.

[[config-sect-new-repo]]
=== Adding a New Repository

To add a repository, log into Nexus as an Administrator, and click on
the Repositories link in the left-hand navigation menu in the
Views/Repositories section as displayed in
<<fig-repository-manager-add-repository-dropdown>>.

Clicking on this link should bring up a window that lists all of the
repositories which Nexus knows about. You'll then want to create a new
proxy repository. To do this, click on the Add link that is directly
above the list of repositories. When you click the Add button, click
the down arrow directly to the right of the word Add, this will show a
drop-down which has the options: Hosted Repository, Proxy Repository,
Virtual Repository, and Repository Group. Since you are creating a
proxy repository, click on Proxy Repository.

[[fig-repository-manager-add-repository-dropdown]]
.Creating a New Proxy Repository
image::figs/web/repository-manager_add-repository-dropdown.png[scale=80]

Once you do this, you will see a screen resembling
<<fig-add-repo>>. Populate the required fields Repository ID and the
Repository Name. The Repository ID will be part of the URL used to
access the repository, so it is recommended to avoid characters that
could cause problems. Set the Repository Policy to "Release", and the
Remote Storage Location to the public URL of the repository you want
to proxy.


[[fig-add-repo]]
.Configuring a Proxy Repository
image::figs/web/repository-manager_add-repository.png[scale=80]

Once you've filled out this screen, click on the Save
button. Nexus will then be configured to proxy the repository.

[[config-sect-repo-group]]  
=== Adding a Repository to a Group

Next you will need to add the new repository to the Public
RepositoriesNexus Group. To do this, click on the Repositories link in
the left-hand navigation menu in the Views/Repositories section. Nexus
lists Groups and Repositories in the same list so click on the public
group.  After clicking on the Public Repositories group, you should
see the Browse and Configuration tabs in the lower half of the Nexus
window.

NOTE: If you click on a repository or a group in the Repositories list
and you do not see the Configuration tab, this is because your Nexus
user does not have administrative privileges. To perform the
configuration tasks outlined in this chapter, you will need to be
logged in as a user with administrative privileges.

Clicking on the Configuration tab will bring up a screen which looks
like <<fig-add-to-group>>.

[[fig-add-to-group]]
.Adding New Repositories to a Nexus Group
image::figs/web/repository-manager_add-to-group.png[scale=80]

To add the new repository to the public group, find the
repository in the Available Repositories list on the right, click on
the repository you want to add and drag it to the left to the Ordered
Group Repositories list. Once the repository is in the Ordered Group
Repositories list you can click and drag the repository within that
list to alter the order in which a repository will be searched for a
matching artifact. 

NOTE: Nexus makes use of an interesting Javascript widget library
named http://extjs.com/[ExtJS]. ExtJS provides for a number of
interesting UI widgets that allow for rich interaction like the
drag-drop UI for adding repositories to a group and reordering the
contents of a group.

In the last few sections, you learned how to add a new custom
repositories to a build in order to download artifacts which are not
available in the Central Repository.

If you were not using a repository manager, you would have added these
repositories to the repository element of your project's POM, or you
would have asked all of your developers to modify ~/.m2/settings.xml
to reference two new repositories. Instead, you used the Nexus
repository manager to add the two repositories to the public group. If
all of the developers are configured to point to the public group in
Nexus, you can freely swap in new repositories without asking your
developers to change local configuration, and you've gained a certain
amount of control over which repositories are made available to your
development team.

[[using]]
== Using Nexus

[[using-sect-intro]]
=== Introduction

Nexus provides anonymous access for users who only need to search
repositories, browse repositories, and peruse the system feeds. This
anonymous access level changes the navigation menu and some of the
options available when you right-click on a repository. This read-only
access displays the user interface shown in
<<fig-repoman-anonymous-interface>>.

[[fig-repoman-anonymous-interface]]
.Nexus Interface for Anonymous Users
image::figs/web/repository-manager_public-interface.png[scale=80]

[[using-sect-browsing]]
=== Browsing Repositories

One of the most straightforward uses of the Nexus is to browse the
structure of a repository. If you click on the Repositories menu item in the Views/Repositories menu, you should see the following
display. The top-half of <<fig-nexus-browse-repo>>
shows you a list of groups and repositories along with the type of the
repository and the repository status. To browse the artifacts that are
stored in a local Nexus instance, click on the Browse Storage tab for
a repository as shown in <<fig-nexus-browse-repo>>.

[[fig-nexus-browse-repo]]
.Browsing a Repository Storage
image::figs/web/repository-manager_browse-repositories.png[scale=80]
When you are browsing a repository, you can right click on any file
and download it directly to your browser. This allows you to retrieve
specific artifacts manually, or examine a POM file in
the browser.

NOTE: When browsing a remote repository you might notice that the tree
doesn't contain all of the artifacts in a repository. When you browse
a proxy repository, Nexus is displaying the artifacts which have been
cached locally from the remote repository. If you don't see an
artifact you expected to see through Nexus, it only means that Nexus
has yet to cache the artifact locally. If you have enabled remote
repository index downloads, Nexus will return search results that may
include artifacts not yet downloaded from the remote
repository. <<fig-nexus-browse-repo>>, is just an example, and you may
or may not have the example artifact available in your
installation of Nexus.

A Nexus proxy repository acts as a local cache for a remote
repository, in addition to downloading and caching artifacts locally,
Nexus will also download an index of all the artifacts stored in a
particular repository. When searching or browsing for artifacts, it is
often more useful to search and browse the repository index. To view
the repository index, click on the Browse Index tab for a particular
repository to load the interface shown in
<<fig-nexus-browse-repo-index>>.

[[fig-nexus-browse-repo-index]]
.Browsing a Repository Index
image::figs/web/repository-manager_browse-repository-index.png[scale=80]

As shown in <<fig-nexus-browse-repo-index>>, if an
artifact has been downloaded from a remote repository and cached in
Nexus, the artifact or folder will display a small Nexus logo.


[[using-artifact-information]]
==== Viewing the Artifact Information

Once you located an archive in the repository index or storage the
right hand panel will at minimum show the Artifact Information tab as
visible in <<fig-using-artifact-information>>. Besides showing details
like the Repository Path, Size, Checksums, location of the artifact
and other details you are able to download and delete the artifact
with the respective buttons.

[[fig-using-artifact-information]]
.Viewing the Artifact Information
image::figs/web/using-artifact-information.png[scale=80]

[[using-artifact-maven-information]]
==== Viewing the Artifact Maven Information

If the artifact you are looking at in the browser is a Maven related
artifact like a pom file or a jar you will see the Maven Information
tab in the right hand panels. As visible in
<<fig-using-maven-information>> the GAV parameters are displayed above
an XML snippet identifying the artifact that you can just cut and
paste into a Maven pom.xml file.

[[fig-using-maven-information]]
.Viewing the Maven Information
image::figs/web/using-maven-information.png[scale=80]


[[using-artifact-archive-browser]]
==== Using the Artifact Archive Browser

For binary artifacts like jar files Nexus displays an Archive Browser
panel as visible in <<fig-using-artifact-archive-browser>> that allows
you to view the contents of the archive. Clicking on invidiual files
in the browser will download them.

[[fig-using-artifact-archive-browser]]
.Using the Archive Browser
image::figs/web/using-archive-browser.png[scale=80]


[[using-sect-dependencies]]
==== Viewing the Artifact Dependencies

Nexus Professional provides you with the ability to browse an
artifact's dependencies. Using the artifact metadata found in an
artifact's POM, Nexus will scan a repository or a repository group and
attempt to resolve and display an artifact's dependencies. To view an
artifact's dependencies, browse the repository storage or the
repository index, select an artifact (or an artifact's POM), and then
click on the Maven Dependency tab.

On the Maven Dependency tab, you will see the following form elements:

Repository:: When resolving an artifact's dependencies, Nexus will
query an existing repository or repository group. In many cases it
will make sense to select the same repository group you are
referencing in your Maven Settings. If you encounter any problems
during the dependency resolution, you need to make sure that you are
referencing a repository or a group which contains these dependencies.

Mode:: An artifact's dependencies can be list as either a tree or a
list. When dependencies are displayed in a tree, you can inspect
direct dependencies and transitive dependencies. This can come in
handy if you are assessing an artifact based on the dependencies it is
going to pull into your project's build. When you list dependencies as
a list, Nexus is going to perform the same process used by Maven to
collapse a tree of dependencies into a list of dependencies using
rules to merge and override dependency versions if there are any
overlaps or conflicts.

Once you have selected a repository to resolve against and a mode to
display an artifact's dependencies, click on the Resolve button as
shown in <<fig-using-dependencies>>. Clicking on this button will
start the process of resolving dependencies, depending on the number
of artifacts already cached by Nexus, this process can take anywhere
from a few seconds to minute. Once the resolution process is finished,
you should see the artifact's dependencies as shown in
<<fig-using-dependencies>>.

[[fig-using-dependencies]]
.View an Artifact's Dependencies
image::figs/web/using_dependencies.png[scale=60]

Once you have resolved an artifact's dependencies, you can use the
Filter text input to search for particular artifact dependencies.  If
you double click on a row in the tree or list of dependencies you can
navigate to other artifacts within the Nexus interface.

  
[[using-sect-browse-groups]]
=== Browsing Groups

Nexus contains ordered groups of repositories which allow you to
expose a series of repositories through a single URL. More often than
not, an organization is going to point Maven at the two default Nexus
groups: Public Repositories and Public Snapshot Repositories. Most
end-users of Nexus are not going to know what artifacts are being
served from what specific repository, and they are going to want to be
able to browse the Public Repository. To support this use case, Maven
allows you to browse the contents of a Nexus Group as if it were a
single merged repository with a tree structure.
<<fig-nexus-browse-group>>, shows the browsing storage interface for a
Nexus Group. There is no difference to the user experience of browsing
a Nexus Group vs. browsing a Nexus Repository.

[[fig-nexus-browse-group]]
.Browsing a Nexus Group
image::figs/web/repository-manager_browse-group.png[scale=60]

When browsing a Nexus group's storage, you are browsing the underlying
storage for all of the repositories which are contained in a group. If
a Nexus group contains proxy repositories, the Browse Storage tab will
show all of the artifacts in the Nexus group that have been download
from the remote repositories. To browse and search all artifacts
available in a Nexus group, click on the Browse Index tab to load the
interface shown in <<fig-nexus-browse-group-index>>.

[[fig-nexus-browse-group-index]]
.Browsing a Nexus Group Index
image::figs/web/repository-manager_browse-group-index.png[scale=60]

[[using-sect-searching]]
=== Searching for Artifacts

==== Search Overview

In the left-hand navigation area, there is an Artifact Search text
field next to a magnifying glass. To search for an artifact by groupId
or artifactId, type in some text and click the magnifying glass.
Typing in the search term "junit" and clicking the
magnifying glass should yield a search result similar to
<<fig-search-results>>.

[[fig-search-results]]
.Results of an Artifact Search for "junit"
image::figs/web/search-results.png[scale=60]

The groupId in the Group column and the artifactId in the Artifact
column identify each row in the search results table. Each row
represents an aggregration of all artifacts in this Group and
Artifact coordinate.

The Version column displays the lastest version number available as
well as a links to Show All Versions.

The Most Popluar Version column displays the version that has the most
downloads by all users accessing the Central Repository. This data can
help with the selection of an appropriate version to use for a
particular artifact.

The Download column displays direct links to all the artifacts
available for the latest version of this artifacts. A typical list of
downloadable artifacts would include the Java archive (jar), the Maven
pom.xml file (pom), a Javadoc archive (javadoc.jar) and a Sourcecode
archive (sources.jar), but other download options are also added if
more artifacts are available. Click on the link to download an
artifact.

Each of the columns in the search results table can be used to sort
the table in Ascending or Descending order. In addition you can choose
to add and remove colums with the sort and column drop down options
visible in <<fig-search-results-column-options>>.

[[fig-search-results-column-options]]
.Sort and Column Options in the Search Results Table
image::figs/web/search-results-column-options.png[scale=80]

The repository browser interface below the search results table will
displays the artifact selected in the list in the repository structure
with the same information panels available documented in
<<using-sect-browsing>>. An artifact could be present in more than one
repository. If this is the case, click on the value next to "Viewing
Repository" to switch between multiple matching repositories.

WARNING: Let me guess? You installed Nexus, ran to the search box,
typed in the name of a group or an artifact, pressed search, and saw
absolutely nothing. No results. Nexus isn't going to retrieve the
remote repository indexes by default, you need to activate downloading
of remote indexes for the three proxy repositories that Nexus ships
with. Without these indexes, Nexus has nothing to search. Find
instructions for activating index downloads in
<<confignx-sect-manage-repo>>.


==== Advanced Search

Clicking on the (Show All Versions) link in the Version column visible
in <<fig-search-results>> will kick of an Advanced Search by the
groupId and artifactId of the row and result in a view similar to
<<fig-search-results-all-versions>>.

[[fig-search-results-all-versions]]
.Advanced Search Results for a GAV Search Activated by the Show All Versions Link
image::figs/web/search-results-advanced-gav.png[scale=60]

The header for the Advanced Search contains a selector for the type of
search and one or more text input fields to define a search and a
button to run a new search with the specified parameters.

The search results table contains one row per Group (groupId),
Artifact (artifactId) and Version(version). 

In addition the Age column displays the age of the artifacts being
available on the Central Repository. Since most artifacts are
published to the Central Repository when released, this age gives you a
good indication of the actual time since the release of the artifact.

The Popularity column shows a relative popularity as compared to the
other results in the search table. This can give you a good indication
on the take up of a new release. For example if a newer version has a
high Age value, but a low Popularity compared to an older version, you
might want to check the upstream project and see if there is any
issues stopping other users from upgrading that might affect you as
well. Another reason could be that the new version does not provide
signifcant improvements to warrant an upgrade for most users.

The Download column provide download links for all the available
artifacts.

The following advanced searches are available:

Keyword Search:: Identical to the Artifact Search in the left hand
navigation, this search will look for the specified strings in the
groupId and artifactId.

Classname Search:: Rather than looking at the coordinates of an
artifact in the repository, the Classname Search will look at the
contents of the artifacts and look for Java classes with the specified
name. For example try a search for a classname of "Pair" to see how
many library authors saw a need to implement such a class, saving you
from potentially implementing yet another version.

GAV Search:: The GAV search allows a search using the Maven
coordinatess of an artifact. These are Group (groupId), Artifact
(artifactId), Version (version), Packaging (packaging) and Classifier
(classifier). At a minimum you need to specify a Group, Artifact or
Version in your search. An example search would be with an Artifact
"guice and a Classifier "no_aop".

Checksum Search:: Sometimes it is necessary to determine the version
of a jar artifact in order to migrate to a qualified version. When
attempting this and neither the filename nor the contents of the
manfiest file in the jar contain any useful information about the
exact version of the jar you can use Checksum Search to identify the
artifact. Create a sha1 checksum, e.g. with the sha1sum command
available on Linux, and use the created string in a Checksum
search. This will return one result, which will provide you with the
GAV coordinates to replace the jar file with a dependency declaration.
 
TIP: The Checksum Search can be a huge timer save when migrating a
legacy build system, where the used libraries are checked into the
version control system as binary artifacts with no version information
available.

==== Nexus OpenSearch Integration

OpenSearch a standard which facilitates searching directly from your
browser's search box. If you are using Internet Explorer 7+ or Firefox
2+ you can add any Nexus instance as an OpenSearch provider.  Then you
can just type in a search term into your browser's search field and
quickly search for Maven artifacts. To configure OpenSearch, load
Nexus in a browser and then click on the drop-down next to the search
tool that is embedded in your
browser. <<fig-using-opensearch-configure>> shows the Add Nexus option
that is present in Firefox's OpenSearch provider drop-down.

[[fig-using-opensearch-configure]]
.Configuring Nexus as an OpenSearch Provider
image::figs/web/using_opensearch-config.png[scale=60] 

Once you have added Nexus to the list of OpenSearch providers, click
on the drop-down next to the search term and select Nexus (localhost)
from the list of OpenSearch providers. Type in a groupId, artifactId,
or portion of a Maven identifier and press enter. Your
opensearch-friendly web browser will then take you to the search
results page of Nexus displaying all the artifacts that match your
search term.

.OpenSearch Search Results in Nexus
image::figs/web/using_opensearch-search.png[scale=60]

Once, you have configured your browser to use Nexus as an OpenSearch
provider, searching for a Maven artifact is as simple as typing in a
groupId or artifactId, selecting Nexus from the drop-down shown in
<<fig-using-permanent-opensearch-option>>, and
performing a search.

[[fig-using-permanent-opensearch-option]]
.Nexus Available as an Option in the Firefox OpenSearch Provider List
image::figs/web/using_opensearch-permanent.png[scale=60]


[[using-sect-uploading]]
=== Uploading Artifacts 

When your build makes use of proprietary or custom dependencies which
are not available from public repositories, you will often need to
find a way to make them available to developers in a custom Maven
repository. Nexus ships with a pre-configured 3rd Party repository that
was designed to hold 3rd Party dependencies which are used in your
builds. To upload artifacts to a repository, select a hosted
repository in the Repositories panel and then click on the Artifact
Upload tab. Clicking on the Artifact Upload tab will display the tab
shown in <<fig-using-artifact-upload>>.

[[fig-using-artifact-upload]]
.Artifact Upload Form
image::figs/web/using_artifact-upload.png[scale=60]

To upload an artifact, click on Select Artifact(s) for Upload... and
select one or more artifacts from the file-system to upload. Once you
have selected an artifact, you can modify the classifier and the
extension before clicking on the Add Artifact button. Once you have
clicked on the Add Artifact button, you can then configure the source
of the Group, Artifact, Version (GAV) parameters. 

If the artifact you are uploading is a JAR file that was created by
Maven it will already have POM information embedded in it. If you are
uploading a JAR from a vendor you will likely need to set the Group
Identifier, Artifact Identifier, and Version manually. To do this,
select GAV Parameters from the GAV Definition drop-down at the top of
this form. Selecting GAV Parameters will expose a set of form fields
which will let you set the Group, Artifact, Version, and Packaging of
the artifacts being uploaded. 

If you would prefer to set the Group, Artifact, and Version from a POM
file associated with the uploaded artifact, select From POM in the GAV
Definition drop-down.  Selecting From POM in this drop-down will
expose a button labelled "Select POM to Upload". Once a POM file has
been selected for upload, the name of the POM file will be displayed
in the form field below this button.

The Artifact Upload panel supports multiple artifacts with the same
Group, Artifact, and Version identifiers. For example, if you need to
upload multiple artifacts with different classifiers, you may do so by
clicking on Select Artifact(s) for Upload and Add Artifact multiple
times.

[[using-sect-feeds]]
=== Browsing System Feeds

Nexus provides feeds that capture system events, you can browse these
feeds by clicking on System Feeds under the View menu.  Clicking on
System Feeds will show the panel in <<fig-repoman-system-feeds>>. You
can use these simple interface to browse the most recent reports of
artifact deployments, cached artifacts, broken artifacts, and storage
changes that have occurred in Nexus.

[[fig-repoman-system-feeds]]
.Browsing Nexus System Feeds
image::figs/web/repository-manager_system-feed.png[scale=60]

These feeds can come in handy if you are working at a large
organization with multiple development teams deploying to the same
instance of Nexus. In such an arrangement, all developers in an
organization can subscribe to the RSS feeds for New Deployed Artifacts
as a way to ensure that everyone is aware when a new release has been
pushed to Nexus. Exposing these system events as RSS feeds also opens
to the door to other, more creative uses of this information, such as
connecting Nexus to external automated testing systems. To access the
RSS feeds for a specific feed, select the feed in the System Feeds
view panel and then click on the Subscribe button. Nexus will then
load the RSS feed in your browse and you can subscribe to the feed in
your favourite RSS

There are a number of system feeds available in the System Feeds view,
and each has a URL which resembles the following URL

----
http://localhost:8081/nexus/service/local/feeds/recentlyChangedFiles
----

Where recentChanges would be replaced with the identifier of the feed
you were attempting to read. Available system feeds include:

- Authenication and Authorization Events

- Broken artifacts in all Nexus repositories

- Broken files in all Nexus repositories

- Error and Warning events

- New artifacts in all Nexus repositories

- New cached artifacts in all Nexus repositories

- New cached files in all Nexus repositories

- New cached release artifacts in all Nexus repositories

- New deployed artifacts in all Nexus repositories

- New deployed files in all Nexus repositories

- New deployed release artifacts in all Nexus repositories

- New files in all Nexus repositories

- New release artifacts in all Nexus repositories

- Recent artifact storage changes in all Nexus repositories

- Recent file storage changes in all Nexus repositories

- Recent release artifact storage changes in all Nexus repositories

- Repository Status Changes in Nexus

- System changes in Nexus
 
[[using-sect-system-files]]
=== System Files



The System Files is only visible to Administrative users under the
Administrationmenu. Click on this option brings up the dialog shown in
<<fig-nexus-logs>>. From this screen you can view the Nexus log file
as well as the configuration files documented in
<<sect-installing-work-dir>>.

The nexus.log file is the general application log for Nexus. Unless
you are an administrative user, you might not have must interest in
the information in this log. If you are trying to debug an error, or
if you have uncovered a bug in Nexus, you can use this log viewer to
diagnose problems with Nexus.

[[fig-nexus-logs]]
.Browsing Nexus Logs and Configuration
image::figs/web/repository-manager_log-file.png[scale=60]

You can load, view and download the various files by using the buttons
and the dropdown to select the files to examine.

In <<fig-nexus-logs>> there is a "tail" checkbox. If this box is
checked, then Nexus will always show you the end of a log file. This
can come in handy if you want to see a continuously updated log
file. When this tail box is checked, a drop-down at the bottom of the
panel allows you to set the update frequency. The contents of this
drop-down are shown in <<fig-using-update-freq>>. If an update
interval is selected, Nexus will periodically refresh the selected log
file.

[[fig-using-update-freq]]
.Selecting the Update Frequency when Tailing a Log File
image::figs/web/using_tail-frequency.png[scale=60]


[[using-sect-user-profile]]
=== Working with Your User Profile

As a logged in user, you can click on your user name in the top right
hand corner of the Nexus user interface to expose a drop down with an
option to Logout as well as to access your user Profile displayed in
<<fig-using-user-dropdown>>.

[[fig-using-user-dropdown]]
.Drop Down on User Name with Logout and Profile Options
image::figs/web/using-user-dropdown.png[scale=60]

Once you have selected to display your profile you will get access to
the Summary section of the Profile tab as displayed in
<<fig-using-profile-summary>>.

[[fig-using-profile-summary]]
.Summary Section of the Profile Tab
image::figs/web/using-profile-summary.png[scale=60]

The Summary section allows you to edit your First Name, Last Name and
Email directly in the form. 

==== Changing Your Password

In addition to changing your name and email, the user profile allows
you to change your password by clicking on the Change Password
text. The dialog displayed in <<fig-using-profile-change-password>>
will be displayed and allow you to supply your current password, and
choose a new password. When you click on Change Password, your Nexus
password will be changed.

[[fig-using-profile-change-password]]
.Changing Your Nexus Password
image::figs/web/repository-manager_change-password.png[scale=60]

The password change feature only works with the Nexus built in XML
Realm security realm. If you are using a different security realm like
LDAP or Crowd, this option will not be visible and you will have the respective
other system tools to change your password.

==== Additional User Profile Tabs

The Profile tab can be used by other plugins and features to
change or access user specific data and functionality. One such use
case is the User Token access documented in <<config-sect-usertoken>>.

[[using-sect-filing-report]]
=== Filing a Problem Report

If you encounter a problem with Nexus, you can use the Nexus UI to
report a bug or file an issue against the Nexus project in Sonatype's
JIRA instance.

To file a problem report, you will first need to sign up for an
account on http://issues.sonatype.org. You can click on Report Problem
in the left hand Helpmenu, supply your Sonatype JIRA credentials, and
file a problem report. Supply your JIRA username and password along
with a short title and a description as shown in the following figure.

When you file a Nexus problem report, Nexus will create a new issue in
JIRA and attach your configuration and logs to the newly filed issue.

.Generating a Nexus Problem Report
image::figs/web/configuring-generate-report.png[scale=60]

[[confignx]]
== Configuring Nexus

Many of the configuration screens shown in this section are only
available to administrative users. Nexus allows the admin user to
customize the list of repositories, create repository groups, customize
server settings, and create routes or "rules" that Maven will use to
include or exclude artifacts from a repository.

[[configxn-sect-customizing-server]]
=== Customizing Server Configuration

In a production installation of Nexus, you'll probably want
to customize the administrative password to something other than
"admin123", and you might want to override the default directories that
Nexus uses to store repository data. To do this, log in as the
administrative user and click on Server under Administration in the
left-hand navigation menu as visible in <<fig-config-administration-menu>>. 

[[fig-config-administration-menu]]
.Administration Menu in the Left Hand Panel
image::figs/web/config-administration-menu.png[scale=80]

The server configuration screens subsections are documented in the
following.

==== SMTP Settings

Nexus sends email to users who need to recover user names and
password. To do this, you'll need to configure the SMTP server
settings in this dialog. This section of the form takes an SMTP Host
and Port as well as other parameters relating to SMTP authentication
and encryption. You can also change the From: header of an email from
Nexus.

[[fig-config-administration-smtp]]
.Administration SMTP Settings
image::figs/web/config-administration-smtp.png[scale=60]

==== HTTP Request Settings

The HTTP Request Settings allow you to configure the identifier which
Nexus uses when it is making an HTTP request. You may want to change
this if Nexus needs to use an HTTP Proxy, and the Proxy will only work
if the User Agent is set to a specific value.

You can also add extra parameters to place on a GET request to a
remote repository. You could use this to add identifying information
to requests.

The amount of time Nexus will wait for a request to succeed when
interacting with an external, remote repository can be configured with
the Request Timeout and Request Retry Attempts settings.

[[fig-config-administration-http]]
.Administration HTTP Request Settings
image::figs/web/config-administration-http.png[scale=60]


==== Security Settings

You can choose to enable or disable security, enable or disable
anonymous access, and set the username and password for anonymous
access. If you choose to enable security, you are telling Nexus to
enforce role-based access control to enforce read and write access to
repositories.

The anonymous username and password is used to integrate with
other realms that may need a special username for anonymous access.
In other words, the username and password here is what we attempt to
authorize when someone makes an anonymous request. You would change
the anonymous username to "guest" if you wanted to integrate Nexus
with Microsoft's Active Directory.

[[fig-config-administration-security]]
.Administration Security Settings
image::figs/web/config-administration-security.png[scale=60]


==== Error Reporting Settings

Nexus can be configured to automatically file exception and error
reports with the Nexus project in the Sonatype issue tracker.
Activating this setting in your own Nexus installation helps to
improve Nexus as the development team will receive automatic error
reports if your Nexus instance experiences an error or a failure. The
Nexus Server configuration's Automated Error Reporting Settings
section is shown in <<fig-config-administration-error-reporting>>. This section
accepts a JIRA username and password, and allows you to configure
Nexus to use the default HTTP Proxy Settings when Nexus attempts to
file an error report with the Sonatype issue tracker.

[[fig-config-administration-error-reporting]]
.Administration Error Reporting Settings
image::figs/web/config-administration-error-reporting.png[scale=60]

To sign up for an account on the Sonatype JIRA instance, go to
http://issues.sonatype.org. Once you see the web site shown in
<<fig-configuring-sonatype-jira>>, click on the "Signup" link below
the Login form.

[[fig-configuring-sonatype-jira]]
.Sonatype Issue Tracker 
image::figs/web/configuring_automated-error-jira-home.png[scale=60]

Fill out the sign-up form shown in
<<fig-configuring-sonatype-jira-signup>>, and choose a username and
password. This is the username and password you should use in the
Automated Error Reporting Settings section of the Server configuration
shown in <<fig-config-administration-error-reporting>>.

[[fig-configuring-sonatype-jira-signup]]
.Signing Up for a Sonatype Issue Tracker Account
image::figs/web/configuring_automated-error-jira-signup.png[scale=60]


==== Application Server Settings

This section allows you to change the Base URL for your Nexus
installation. It is used when generating links in emails and RSS
feeds. The Sonatype Nexus repository is available on
http://respository.sonatype.org, and it makes use of this Base URL
field to ensure that links in emails and RSS feeds point to the
correct URL. If you are hosting Nexus behind a proxy server and you
want to make sure that Nexus always uses the specified Base URL, check
the "Force Base URL" checkbox. If the Force Base URL is not checked,
Nexus will craft URLs in HTTP responses based on the request URL, but
it will use the Base URL when it is generating emails.

[[fig-config-administration-application-server]]
.Administration Application Server Settings
image::figs/web/config-administration-application-server.png[scale=60]

==== Default HTTP Proxy Settings

If you Nexus instance needs to reach public repositories like the
Central Repository via a proxy server, you can configure one or
multiple servers in this settings section.

There are a number of HTTP Proxy settings for Nexus installations
which need to be configured to use an HTTP Proxy. You can specify a
host, port, and a number of authentication options which might be
required by your proxy server.

[[fig-config-administration-http-prxy]]
.Administration Default HTTP Proxy Settings
image::figs/web/config-administration-http-proxy.png[scale=60]

==== System Notification Settings

[[fig-config-administration-system-notification]]
.Administration System Notification Settings
image::figs/web/config-administration-system-notification.png[scale=60]

==== New Version Availability

Nexus can notify you of new versions of Nexus via the Nexus
interface. To enable this feature, check the Enable checkbox in the
New Version Notification section of the Nexus server settings as shown
in <<fig-config-administration-new-version>>.

[[fig-config-administration-new-version]]
.Administration New Version Availability
image::figs/web/config-administration-new-version.png[scale=60]


==== PGP Key Server Information

Nexus Professional uses a PGP Key Server to retrieve PGP keys when
validating artifact signatures. To add a new Key Server URL, enter the
URL in the Key Server URL field and click on the Add button. To remove
a Key Server URL, click on the URL you wish to remove from the list
and click on the Remove button. Key Servers are consulted in the order
that they are listed in the Key Server URLs list, to reorder your Key
Server URLs, click and drag a URL in the Key Server URLs list.

[[fig-config-administration-pgp-key-server]]
.Administration PGP Key Server Information
image::figs/web/config-administration-pgp-key-server.png[scale=60]


[[confignx-sect-manage-repo]]
=== Managing Repositories

To manage Nexus repositories, log in as the administrative user and
click on Repositories in the Views/Repositories menu in the left-hand
navigation menu. 

Nexus provides for three different kinds of repositories - Proxy
Repositories, Hosted Repositories and Virtual Repositories.

==== Proxy Repository

A proxy repository is a proxy of a remote repository.  By default,
Nexus ships with the following configured proxy repositories:

    Apache Snapshots:: This repository contains snapshot releases from
    the Apache Software Foundation
    http://people.apache.org/repo/m2-snapshot-repository

    Codehaus Snapshots:: This repository contains snapshot released
    from Codehaus http://snapshots.repository.codehaus.org/

    Maven Central Repository:: This is the central repository (for
    releases).  http://repo1.maven.org/maven2/

==== Hosted Repository

A hosted repository is a repository which is hosted by Nexus. Maven
ships with the following configured hosted repositories:

    3rd Party:: This hosted repository should be used for third-party
    dependencies not available in the public Maven repositories.
    Examples of these dependencies could be commercial, proprietary
    libraries such as an Oracle JDBC driver that may be referenced by
    your organization.

    Releases:: This hosted repository is where your organization will
    publish internal releases.

    Snapshots:: This hosted repository is where your organization will
    publish internal snapshots.

==== Virtual Repository

This serves as an adaptor to and from different types of
repositories. Currently Nexus supports conversion to and from Maven 1
repositories and Maven 2 repositories and from Maven 2 to NuGet
repositories.

==== Configuring Repositories

The Repositories window displayed in <<fig-repo-config>> allows you to
create, update and delete different repositories with the Add, Delete
and Trash button. Use the Refresh button to update the displayed list
of repositories and repository groups.

[[fig-repo-config]]
.Repository Configuration Screen for a Proxy Repository
image::figs/web/repository-manager_repository-config.png[scale=60]


[[fig-repo-config-2]]
.Repository Configuration Screen for a Proxy Repository
image::figs/web/repository-manager_repository-config-2.png[scale=60]

[[fig-repo-config-hosted]]
.Proxy Configuration Access Settings for a Hosted Repository
image::figs/web/repository-manager_repository-config-3.png[scale=60]

<<fig-repo-config>> and <<fig-repo-config-2>> show the Repository
configuration screen for a Proxy repository in Nexus. From this
screen, you can manage the settings for proxying an external
repository:

Repository ID:: The repository ID is the identifier which will be used
in the Nexus URL. For example, the central proxy repository has an ID
of "central", this means that maven can access the repository directly
at http://localhost:8081/nexus/content/repositories/central. The
Repository ID must be unique in a given Nexus installation. ID is
required.

Repository Name:: The display name for a repository. Name is required.

Repository Type:: The type of repository (proxy, hosted, or
virtual). You can't change the type of a repository, it is selected
when you create a repository.

Provider and Format:: Provider and Format define in what format Nexus
exposes the repository to external tools. Supported formats are Maven
1, Maven 2, NuGet, OBR, P2 and P2 Update Site.

Repository Policy:: If a proxy repository has a policy of release than
it will only access released versions from the remote repository. If a
proxy repository has a policy of snapshot, it will download snapshots
from the remote repository.

Default Storage Location:: Not editable, shown for reference. This is
the default storage location for the local cached contents of the
repository.

Override Storage Location:: You can choose to override the storage
location for a specific repository. You would do this if you were
concerned about storage and wanted to put the contents of a specific
repository (such as central) in a different location.

Remote Repository Access:: This section tells Nexus where to look for
and how to interact with the remote Maven repository being proxied.

Remote Storage Location;; This is the URL of the remote Maven
repository.

Download Remote Indexes;; This field controls the downloading of the
remote indexes. Currently only central has an index at
http://repo1.maven.org/maven2/.index. If enabled, Nexus will download
the index and use that for its searches as well as serve that up to
any clients which ask for the index (like m2eclipse). The default for
new proxy repositories is enabled, but all of the default repositories
included in Nexus have this option disabled. To change this setting
for one of the proxy repositories that ship with Nexus, change the
option, save the repository, and then re-index the repository. Once
this is done, artifact search will return every artifact available on
the Maven Central repository.

Auto Blocking Enabled;; If Auto blocking active is set to true, Nexus
will automatically block a proxy repository if the remote repository
becomes unavailable. While a proxy repository is blocked, artifacts
will still be served to clients from a local cache, but Nexus will not
attempt to locate an artifact in a remote repository. Nexus will
periodically retest the remote repository and unblock the repository
once it becomes available.

File Content Validation;; If set to true, Nexus will perform a
lightweight check on the content of downloaded files. This will
prevent invalid content to be stored and proxied by Nexus, which
otherwise can happen in cases where the remote repository (or some
proxy between Nexus and the remote repository) for example returns an
HTML page instead of the requested file.

Checksum Policy;; Sets the checksum policy for a remote
repository. This option is set to Warn by
default. The possible values of this setting are:

* Ignore - Ignore the checksums entirely
* Warn - Print a warning in the log if a checksum is not correct

* StrictIfExists - Refuse to cache an artifact if the calculated
checksum is inconsistent with a checksum in the repository. Only
perform this check if the checksum file is present.

* Strict - Refuse to cache an artifact if the calculated checksum is
inconsistent or if there is no checksum for an artifact.

Authentication;; This section allows you to set a Username, Password,
NT LAN Host, and NT Lan Manager Domain for a remote repository.

Access Settings:: This section configures access settings for a
repository.

Deployment Policy;; This setting controls how a Hosted repository
allows or disallows artifact deployment. If this policy is set
to "Read Only", no deployment is allowed. If this policy is
set to "Disable Redeploy", a client can only deploy a
particular artifact once and any attempt to redeploy an
artifact will result in an error. If this policy is set to
"Allow Redeploy", clients can deploy artifacts to this
repository and overwrite the same artifact in subsequent
deployments. This option is visible for Hosted repositories as
shown in <<fig-repo-config-hosted>>.

Allow File Browsing;; When set to true, users can browse the contents
of the repository with a web browser.

Include in Search;; When set to true, this repository is search when
you perform an Artifact Search in Nexus. If this setting is
false, the contents of the repository are excluded from a
search.

Publish URL;; If this property is set to false, the repository will
not be published on a URL, and you will not be able to access
this repository remotely. You would set this configuration
property to false if you want to prevent clients for
connecting to this repository directly.

Expiration Settings:: Nexus maintains a local cache of artifacts and
metadata, you can configure expiration parameters for a proxy
repository. The expiration settings are:

Not Found Cache TTL;; If Nexus fails to locate an artifact, it will
cache this result for a given number of minutes. In other words, if
Nexus can't find an artifact in a remote repository, it will not
repeated attempt to resolve this artifact until the Not Found Cache
TTL time has been exceeded. The default for this setting is 1440
minutes (or 24 hours).

Artifact Max Age;; Tells Nexus when that maximum age of an artifact is
before it retrieves a new version from the remote repository.
The default for this setting is -1 for a repository with a
Release policy and 1440 for a repository with Snapshot
policy.

Metadata Max Age;; Nexus retrieves metadata from the remote
repository. It will only retrieve updates to metadata after the
Metadata Max Age has been exceeded. The default value for this setting
is 1440 minutes (or 24 hours).

HTTP Request Settings:: This section lets you change the properties of
the HTTP request to the remote repository. In this section you can
configure the User Agent of the request, add parameters to a request,
and set the timeout and retry behaviour. This section refers to the
HTTP request made from Nexus to the remote Maven repository being
proxied.

Override HTTP Proxy Settings:: This section lets you configure the
HTTP Proxy for the request from Nexus to the remote repository. You
can configure a proxy host and port plus an authentication settings
you need tell Nexus to use an HTTP Proxy for all requests to a remote
repository.

==== Selecting Mirrors for Proxy Repositories

Nexus also allows you to select which mirrors Nexus will
consult for a particular Proxy repository. Clicking on the Mirrors tab
will show the figure shown in <<fig-configuring-mirror-config>>.

[[fig-configuring-mirror-config]]
.Configuring Mirrors for Proxy Repositories
image::figs/web/repository-manager_config-mirrors.png[scale=60]

To configure a mirror repository, click on the Mirror URL drop-down
and select a mirror for the Proxy repository. Click the Add button, and
Nexus will then be configured to download artifacts from the selected
mirror. Nexus will always download checksums and metadata from the
original (or Canonical) URL for a proxy repository. For example, if
Nexus is going to download an artifact, it will retrieve the MD5
checksum from the original Maven Central repository and then retrieve
the artifact from the selected mirror.

==== Adding a Mirror Entry for a Hosted Repository

If you are logged in as a user with Administrative privilege, there
will be a Mirrors tab available when you are viewing a Hosted
repository, clicking on this Mirrors tab will show the form shown in
<<fig-configuring-mirror-config>>. This tab contains a list of mirror
URLs for this hosted repository. If there are other sites which mirror
the contents of this hosted repository, this tab allows you to
populate the repository mirror metadata with those URLs.

This repository mirror metadata can then be consumed by other systems
that interact with your hosted repository. For example, if you have a
release repository which is used by your customers or by the general
public, if one of people consuming your Hosted repository is also
running a Nexus, they can configure a Proxy repository that targets
your Hosted repository and they can use the mirror metadata to
configure their instance of Nexus to consume artifacts from mirrors of
your Hosted repository.

==== Viewing Repository Summary Panel

The Repository Summary panel can be loaded by selecting a
Hosted, Proxy, or Virtual repository and then clicking on the Summary
tab. When viewing the Summary tab of a Hosted repository, as shown in
<<fig-configuring-summary-hosted>>, you will also see the Distribution
Management settings which can be used to configure Maven to publish
artifacts to a Hosted repository.

[[fig-configuring-summary-hosted]]
.Repository Summary Panel for a Hosted Repository
image::figs/web/repository-manager_summary-hosted.png[scale=60]

The Repository Summary panel for a Proxy repository, as shown in
<<fig-configuring-summary-proxy>>, contains all of the
repository identifiers and configuration in addition to the size of the
local storage for the proxy repository and the URL of the remote
repository.

[[fig-configuring-summary-proxy]]
.Repository Summary Panel for a Proxy Repository
image::figs/web/repository-manager_summary-proxy.png[scale=60]

The Repository Summary panel for a Virtual repository, as shown in
<<fig-configuring-summary-virtual>>, displays repository
identifiers and the size of the Virtual repository on disk.

[[fig-configuring-summary-virtual]]
.Repository Summary Panel for a Virtual Repository
image::figs/web/repository-manager_summary-virtual.png[scale=60]

==== Auto Block/Unblock of Remote Repositories

What happens when Nexus is unable to reach a remote repository? If
you've defined a proxy repository, and the remote repository is
unavailable Nexus will now automatically block the remote repository.
Once a repository has been auto-blocked, Nexus will then periodically
retest the remote repository and unblock the repository once it becomes
available. You can control this behaviour by changing the Auto-blocking
Active setting under the Remote Repository Access section of the proxy
repository configuration as shown in the following figure:

.Configuring Remote Repository Auto Block/Unblock
image::figs/web/configuring_auto-block.png[scale=60]

[[confignx-sect-managing-groups]]
=== Managing Groups

Groups are a powerful feature of Nexus. They allow you to combine
multiple repositories and other repository groups in a single URL. Use
the left hand panel Repositories menu item in the Views/Repositories
menu to access the repositories and groups management interface.

Nexus ships with one group: public. The Public Repositories group
combines the multiple important external proxy repositories like the
Central Repository with the hosted repositories: 3rd Party, Releases,
and Snapshots.

In <<maven-sect-single-group>> we configured Maven via the
settings.xml to look for artifacts in the public group managed by
Nexus. <<fig-group-config>> shows the group configuration screen in
Nexus, in this figure you can see the contents of the public

[[fig-group-config]]
.Group Configuration Screen in Nexus
image::figs/web/repository-manager_group-config.png[scale=60]

Note that the order of the repositories listed in Order Group
Repositories is important. When Nexus searches for an artifact in a
group it will return the first match. To reorder a repository in this
list, click and the drag the repositories and groups in the Ordered
Group Repositories selection list.

The order of repositories or other groups in a group can be used to
influence the effective metadata that will be retrieved by Maven from
a Nexus Repository Group. We recommend placing release repositories
higher in the list than snapshot repositories so that LATEST and
RELEASE versions are merged appropriately. 

We also recommend placing repositories with a higher probability of
matching the majority of artifacts higher in this list. If most of
your artifacts are going to be retrieved from the Maven Central
Repository, putting Central higher in this list than a smaller, more
focused repository is going to be better for performance as Nexus is
not going to interrogate the smaller remote repository for as many
missing artifacts.

[[confignx-sect-managing-routes]]
=== Managing Routes

Nexus Routes are like filters you can apply to Nexus Groups, they
allow you to configure Nexus to include or exclude repositories from a
particular artifact search when Nexus is trying to locate an artifact
in a repository group. There are a number of different scenarios in
which you might configure a route in Nexus.

The most common is when you want to make
sure that you are retrieving artifacts in a particular group ID from a
particular repository. This is especially useful when you want to make
sure that you are trying to retrieve your own organization's artifacts
from the hosted Release and Snapshot repositories. 

Routes are applicable when you are trying to resolve an artifact from
a repository group; using Routes allow you to modify the repositories
Nexus will consult when it tries to resolve an artifact from a group
of repositories.

[[fig-route-config]]
.Routes Configuration Screen in Nexus
image::figs/web/repository-manager_route-config.png[scale=60]

<<fig-route-config>> shows the Repository Route Configuration
screen. Clicking on a route will bring up a screen which will allow
you to configure the properties of a route. The configuration options
available for a route are:

URL Pattern:: 
    This is the pattern which Nexus will use to match a request to
    Nexus. If the regular expression in this pattern is matched, Nexus
    will either include or exclude the listed repositories from a
    particular artifact query. In <<fig-route-config>>
    the two patterns are: 

    ".\*/(com|org)/somecompany/.*";; This pattern would match all
    paths which includes either "/com/somecompany/" or
    "/org/somecompany/". The expression in the parenthesis matches
    either com or org, and the ".*" matches zero or more
    characters. You would use a route like this to match your own
    organization's artifacts and map these requests to the hosted
    Nexus Releases and Snapshots repositories.

    ".\*/org/some-oss/.*";; This pattern is used in an exclusive
    route. It matches every path that contains "/org/some-oss/". This
    particular exclusive route excludes the local hosted Releases and
    Snapshots directory for all artifacts which match this path.  When
    Nexus tries to resolve artifacts that match this path, it will
    exclude the Releases and Snapshots repositories.

Rule Type:: Rule Type can be either "inclusive" or "exclusive". An
inclusive rule type defines the set of repositories which should be
searched for artifacts when the URL pattern has
been matched. An exclusive rule type defines repositories which
should not be searched for a particular artifact.

Ordered Route Repositories:: This is an ordered list of repositories
which Nexus will search to locate a particular artifact. Nexus
searches top to bottom; if it's looking for an artifact, it will
return the first match. When Nexus is looking for metadata, all
repositories in a group are checked and the results are merged. The
merging is applied giving preference to the earlier repositories. This
is relevant when a project is looking for a LATEST or a
RELEASE version. Within a Nexus Group, you should define the
release repositories before the snapshot repositories, otherwise
LATEST may incorrectly resolve to a snapshot version.

In this figure you can see the two dummy Routes that Nexus has as
default routes. 

The first route is an inclusive route, it is provided as an example of
a custom route an organization might use to make sure that internally
generated artifacts are resolved from the Releases and Snapshots
repositories. If your organization's group IDs all start with
com.somecompany, and if you deploy internally generated artifacts to
the Releases and Snapshots repositories, this Route will make sure
that Nexus doesn't waste time trying to resolve these artifacts from
public Maven repositories like the Maven Central Repository or the
Apache Snapshots repository.

The second dummy route is an exclusive route. This route excludes the
Releases and Snapshots repositories when the request path contains
"/org/some-oss". This example might make more sense if we replaced
"some-oss" with "apache" or "codehaus". If the pattern was
"/org/apache", this rule is telling Nexus to exclude the internal
Releases and Snapshots repositories when it is trying to resolve these
dependencies. In other words, don't bother looking for an Apache
dependency in your organization's internal repositories.

What if there is a conflict between two routes? Nexus will process
inclusive routes before it will process the exclusive routes.
Remember that Nexus Routes only affect Nexus' resolution of artifacts
when it is searching a Group. When Nexus starts to resolve an artifact
from a Nexus Group it will start with the list of repositories in a
group. If there are matching inclusive routes, Nexus will then take
the intersection of the repositories in the Group and the repositories
in the inclusive Nexus Route. The order as defined in the Nexus Group
will not be affected by the Inclusive route. Nexus will then take the
result of applying the inclusive route and apply the exclusive route
to that list of repositories. The resulting list is then searched for
a matching artifact.

One straightforward use of routes is to create a route that excludes
the Maven Central repository from all searches for your own
organization's hosted artifacts. If you are deploying your own
artifacts to Nexus under a groupId of org.mycompany, and if you are
not deploying these artifacts to a public repository, you can create a
rule that tells Nexus not to interrogate Central for your own
organization's artifacts. This will improve performance because Nexus
will not need to communicate with a remote repository when it serves
your own organization's artifacts. In addition to the performance
benefits, excluding Central from searches for your own artifacts will
reduce needless queries to the public repositories.

To summarize, there are creative possibilities with Routes that the
designers of Nexus may not have anticipated, but we advise you to
proceed with caution if you start relying on conflicting or
overlapping Routes.  Use Routes sparingly, and use course URL
patterns, as Nexus evolves there will be more features which allow for
more fine grained rules to allow you to prohibit requests for specific
artifacts and specific versions of artifacts. Remember that routes are
only applied to Nexus Groups, routes are not used when an artifact is
requested from a specific repository.

[[confignx-sect-managing-tasks]]
=== Managing Scheduled Tasks

Nexus allows you to schedule tasks that will be applied to all
repositories or to specific repositories on a configurable
schedule. Use the Scheduled Tasks menu item in the Administration menu
visible in <<fig-config-administration-menu>> to access the screen
shown in <<fig-repomap-scheduled>>, that allows you to manage your
Scheduled Tasks.

[[fig-repomap-scheduled]]
.Managing Nexus Scheduled Tasks
image::figs/web/repository-manager_schedule-service.png[scale=60]

You can create the following kinds of scheduled tasks:

Download Indexes:: This scheduled task will cause Nexus to download
indexes from remote repositories for proxied repositories. The
Download Remote Indexes configuration also needs to be enabled on the
proxy repository.

Empty Trash:: The Evict and Purge actions do not delete data from the
Nexus working directory. They simply move data to be cleared or
evicted to a trash directory under the Nexus work directory. This
service deletes the data in this trash directory.

Evict Unused Proxied Items From Repository Caches:: Use it or lose
it. This scheduled task tells Nexus to get rid of all proxied items
which haven't been "used" (referenced or retrieved by a client). This
can be a good job to run if you are try to conserve storage space. In
this service you can specify the number of days over which Nexus will
look for activity before making the decision to evict an
artifact. (See note about deletion.)

Optimize Repository Index:: To speed up searches in Nexus, this task
tells the internal search engine to optimize its index files. This has
no affect on the indexes published by Nexus. Typically, this task does
not have to run more than once a week.

Publish Indexes:: Just as Maven downloads an index from a remote
repository, Nexus can publish an index in the same format. This will
make it easier for people using m2eclipse or Nexus to interact with
your repositories.

Purge Nexus Timeline:: Nexus maintains a lot of data that relates to
the interaction between itself, proxied remote repositories, and
clients on Nexus.  While this information can be important for
purposes of auditing, it can also take up storage space. Using this
scheduled task you can tell Nexus to periodically purge this
information. (See note about deletion.)

Repair Repositories Index:: In certain cases it might be required to
remove the internal index as well as the published ones of a
repository.  This task does that and then rebuilds the internal index
by first trying to download remote indexes (if a proxy repository),
then scanning the local storage and updating the internal index
accordingly. Lastly, the index is published for the repository as
well. There should be no need to schedule this task. But when
upgrading Nexus, the upgrade instructions may sometimes include a
manual step of executing this task.

Remove Snapshots from Repository:: Often, you will want to remove
snapshots from a snapshot repository to preserve storage space.  Note
that configuring and running this job is not enough to reclaim disk
space.  You will also need to configure a scheduled job to empty the
trash folder.  Files are not deleted by the Remove Snapshots job, they
are only moved into the Trash folder.  When you create a scheduled
task to remove snapshots, you can specify:
+
Minimum Snapshots to preserve in a repository - This configuration
option allows you to specify a minimum number of SNAPSHOTs to preserve
per artifact.  For example, if you configured this option with a value
of 2, Nexus will always preserve at least two SNAPSHOT artifacts.
+
Snapshot Retention (in days) - This configuration option allows you to
specify the number of days to retain SNAPSHOT artifacts.  For example,
if you want to make sure that you are always keeping the last three
day's worth of SNAPSHOT artifacts, configure this option with a value
of 3.
+
Whether snapshots should be removed if an artifact has been released -
If your Nexus repository also contains a release repository, you can
configure Nexus to remove all SNAPSHOT artifacts once an artifact has
been released.

Synchronize Shadow Repository:: This service synchronizes a shadow (or
virtual) repository with its master repository.

Update Repositories Index:: If files are deployed directly to a
repository's local storage (not deployed through Nexus), you will need
to instruct Nexus to update its index. When executing this task, Nexus
will update its index by first downloading remote indexes (if a proxy
repository) and then scan the local storage to index the new files.
Lastly, the index is published for the repository as well. Normally,
there should be no need to schedule this task. One possible except
would be if files are deployed directly to the local storage regularly.

NOTE: The Evict and Purge actions do not delete data from the Nexus
working directory. They simply move data to be cleared or evicted to a
trash directory under the Nexus work directory. If you want to reclaim
disk space, you need to clear the Trash on the Browse Repositories
screen. If something goes wrong with a evict or clear service, you can
move the data back to the appropriate storage location from the trash.
You can also schedule the Empty Trash service to clear this directory
on a periodic basis.

When you create a new task you can configure it to apply to all
repositories, the repositories in a Nexus Group, or a specific Nexus
Repository. A task can be scheduled to run once at a specific date
and time, or periodically once every Day, Week, or Month. If none of
these options suit your specific needs, you can select a recurrence of
"Advanced" which will allow you to supply your own cron expression to
specify when the job should execute. There is also the recurrence
option of "Manual", which will allow you to initiate an execution of
the task manually.


TIP: In order to keep the heap usage in check it is recommended that
you schedule an "optimize indexes" task to run weekly. An number of
other maintenance tasks should also be scheduled for production
deployments.



==== Managing Configuration Backups with a Scheduled Task

Nexus Professional includes a scheduled task which allows you to
create automated, scheduled backups of your Nexus configuration.  This
scheduled job will archive the contents of the
sonatype-work/nexus/conf
directory. <<fig-configuring-schedule-conf-backup>> shows a scheduled
configuration backup job configured to backup the contents of the
Nexus configuration every day at 12:15 AM.

[[fig-configuring-schedule-conf-backup]]
.Configuring a Scheduled Backup of Nexus Configuration
image::figs/web/configuring_schedule-conf-backup.png[scale=60]

Once a backup has been run, the contents of the backup will be
available in sonatype-work/nexus/backup in a series
of ZIP archives which include the date and a timestamp.

[[confignx-sect-managing-security]]
=== Managing Security

Nexus has role-based access control (RBAC) which gives administrators
very fine-grained control over who can read from a repository (or a
subset of repositories), who can administer the server, and who can
deploy to repositories. The security model in Nexus is also so
flexible as to allow you to specify that only certain users or roles
can deploy and manage artifacts in a specific repository under a
specific groupId or asset class. The default configuration of Nexus
ships with four roles and four users with a standard set of
permissions that will make sense for most users. As your security
requirements evolve, you'll likely need to customize security settings
to create protected repositories for multiple departments, or
development groups. Nexus provides a security model which can adapt to
any scenario. The Security configuration is done via menu items in the
left hand Security menu.

Nexus' Role-based access control (RBAC) system is
designed around the following four security concepts:

Privileges:: Privileges are rights to read, update, create, or manage
resources and perform operations. Nexus ships with a set of core
privileges which cannot be modified, and you can create new privileges
to allow for fine-grained targeting of role and user permissions for
specific repositories.

Targets:: Privileges are usually associated with resources or
targets. In the case of Nexus, a target can be a specific repository
or a set of repositories grouped in something called a repository
target. A target can also be a subset of a repository or a specific
asset classes within a repository. Using a target you can apply to a
specific privilege to apply to a single groupId.

Roles:: Collections of privileges can be grouped into roles to make it
easier to define collections of privileges common to certain classes
of users. For example, deployment users will all have similar sets of
permissions. Instead of assigning individual privileges to individual
users, you use Roles to make it easier to manage users with similar
sets of privileges. A role has one or more privilege and/or one or
more roles.

Users:: Users can be assigned roles and privileges, and model the
individuals who will be logging into Nexus and read, deploying, or
managing repositories.

[[confignx-sect-managing-privs]]
=== Managing Privileges

Nexus has three types of privileges: application privileges which
cover actions a user can execute in Nexus, repository target
privileges which govern the level of access a user has to a particular
repository or repository target, and repository view privileges which
control whether a user can view a repository. Behind the scenes, a
privilege is related to a single REST operation and method like
create, update, delete, read.  

.Managing Security PrLoggiivileges
image::figs/web/repository-manager_security-privileges.png[scale=60]

To create a new privilege, click on the Add... button in the
Privileges panel and choose Repository Target privilege. Creating a
privilege will load the New Repository Target Privilege form shown in
<<fig-configuring-new-privilege>>. This form takes a privilege name, a
privilege description, the repository to target, and a repository
target.

[[fig-configuring-new-privilege]]
.Managing Security Privileges
image::figs/web/repository-manager_security-privileges-2.png[scale=60]

Once you create a new privilege, it will create four underlying
privileges: create, delete, read, and update. The four privileges
created by the form in <<fig-configuring-new-privilege>>
are shown in <<fig-configuring-new-privileges>>.

[[fig-configuring-new-privileges]]
.Create, Delete, Read, and Update Privileges Created
image::figs/web/repository-manager_security-privileges-3.png[scale=60]

[[confignx-sect-managing-repo-targets]]
=== Managing Repository Targets

A Repository Target is a set of regular expressions to match on the
path of artifacts in a repository (in the same way as the routing
rules work). Nexus is preconfigured with a number of repository
targets and allows you to create additional ones. Access the
management interface visible in <<fig-config-repo-target-mgt>> via
the Repository Targets menu item in the left hand Views/Repositories
menu.


[[fig-config-repo-target-mgt]]
.Managing Repository Targets
image::figs/web/repository-manager_repository-targets.png[scale=60]
 
Repository targets allow you to define for example a target called
Apache Maven with a pattern of `^/org/apache/maven/.*`. This would
match all artifacts with a groupId of 'org.apache.maven' and any
artifacts within nested groupIds like 'org.apache.maven.plugins'.

A pattern that would capture more artifacts like all artifacts with
any part of the path containing 'maven' could be `.*maven.*`.

The regular expressions can also be used to exclude artifacts as
visible with the pattern `(?!.*-sources.*).*` in
<<fig-config-repo-target-exclude>> where artifacts with the qualifier
'-sources' are excluded.

[[fig-config-repo-target-exclude]]
.Excluding Source Artifacts from a Repository Targets
image::figs/web/repository-manager_repository-targets-2.png[scale=60]

By combining multiple patterns in a repository target you can
establish a fine grained control of artifacts included and excluded.

Once you have created a repository target you can it as part of your
security setup.  You can add a new privilege that relates to the
target and controls the CRUD operations for artifacts matching that
path. The privilege can even span multiple repositories. With this
setup you can delegate all control of artifacts in 'org.apache.maven'
to a "Maven" team. In this way, you don't need to create separate
repositories for each logical division of your artifacts.

Repository targets are also be used for matching artifacts for
implicit capture in the Staging Suite as documented in <<staging>>.

[[confignx-sect-manage-security]]
=== Managing Roles

Nexus ships with four roles: Nexus Administrator Role,
Nexus Anonymous Role, Nexus Developer Role, and Nexus Deployment Role.
Click on the Roles link under Security in the Nexus menu to show the
list of roles shown in <<fig-configuring-security-roles>>.

[[fig-configuring-security-roles]]
.Viewing the List of Defined Roles
image::figs/web/repository-manager_security-roles.png[scale=60]

To create a new role, click on the Add... button and fill out the
New Nexus Role form shown in <<fig-configuring-creating-new-role>>.

When creating a new role, you will need to supply a role identifier,
a role name, a description, and a session timeout. Roles are comprised
of other roles and individual privileges, to assign a role or
privilege to a role, click on the role or privilege under Available
Roles/Privileges and drag the role or privilege to the Selected
Roles/Privileges list.

[[fig-configuring-creating-new-role]]
.Creating a New Role
image::figs/web/repository-manager_security-roles-3.png[scale=60]

The built-in roles Nexus Administrator Role, Nexus Anonymous Role,
Nexus Deployment Role, and Nexus Developer Role are managed by Nexus
and can not be edited or deleted. Selecting one of these built-in
roles will load the form shown in <<fig-configuring-builtin-role>>.

[[fig-configuring-builtin-role]]
.Viewing an Internal Role
image::figs/web/repository-manager_security-roles-2.png[scale=60]

A Nexus role is comprised of other Nexus roles and individual
Nexus privileges. To view the component parts of a Nexus Role, select
the role in the Roles panel and then choose the Role Tree tab as shown
in <<fig-configuring-role-tree>>.

[[fig-configuring-role-tree]]
.Managing Security Roles
image::figs/web/repository-manager_security-roles-4.png[scale=60]

With the Repository Targets, you have fine grained control over
every action in the system. For example you could make a target that
includes everything except sources (.*(?!-sources)\.*) and assign that
to one group while giving yet another group access to everything. This
means you can host your public and private artifacts in a single
repository without giving up control of your private artifacts.

[[confignx-sect-managing-users]]
=== Managing Users

Nexus ships with three users: admin, anonymous, and deployment. The
admin user has all privileges, the anonymous user has read-only
privileges, and the deployment user can both read and deploy to
repositories. If you need to create users with a more focused set of
permissions, you can click on Users under Security in the left-hand
navigation menu. Once you see the list of users, you can click on a
user to edit that specific user's user ID, name, email, or status. You
can also assign or revoke specific roles or permissions for a
particular user.

.Managing Users
image::figs/web/repository-manager_security-users.png[scale=60]

Clicking the Add button in the Role Management section will bring up
the list of available roles in a pop up window visible in
<<fig-config-security-user-add-role>>. It allows you filter and search
for roles and add one or multiple roles to the user.

[[fig-config-security-user-add-role]]
.Adding Roles to a User
image::figs/web/config-security-user-add-role.png[scale=60]

  
A user can be assigned one or more roles which in turn can include
references to other Nexus roles or to individual Nexus privileges. To
view a tree of assigned Nexus roles and privileges, select the Role Tree
for a particular user as shown in <<fig-configuring-security-user-role-tree>>.

[[fig-configuring-security-user-role-tree]]
.Nexus User Role Tree
image::figs/web/repository-manager_security-users-role-tree.png[scale=60]

If you need to find out exactly how a particular user has been
granted a particular privilege, you can use the Privilege Trace pane as
shown in <<fig-configuring-security-user-priv-trace>>.
The Privilege Trace pane lists all of the privileges that have been
granted to a particular user. Clicking on a privilege loads a tree of
roles that grant that particular privilege to a user. If a user has been
assigned a specific privilege by more than one Role or Privilege
assignment, you will be able to see this reflected in the Role
Containment list.

[[fig-configuring-security-user-priv-trace]]
.Nexus User Privilege Trace
image::figs/web/repository-manager_security-users-privilege.png[scale=60]

[[confignx-sect-network]]
=== Network Configuration

By default, Nexus listens on port 8081. You can change this port, by
changing the value in '+++$NEXUS_HOME/conf/nexus.properties+++' this
file is shown in <<fig-conf-nexus-properties>>. To change the port,
stop Nexus, change the value of applicationPort in this file, and then
restart Nexus. Once you do this, you should see a log statement in
'+++$NEXUS_HOME/logs/wrapper.log+++' telling you that Nexus is
listening on the altered port.

[[fig-conf-nexus-properties]]
.Contents of conf/nexus.properties
----
# Sonatype Nexus
# ==============
# This is the most basic configuration of Nexus.

# Jetty section
application-port=8081
application-host=0.0.0.0
nexus-webapp=${bundleBasedir}/nexus
nexus-webapp-context-path=/nexus

# Nexus section
nexus-work=${bundleBasedir}/../sonatype-work/nexus
runtime=${bundleBasedir}/nexus/WEB-INF
----

[[confignx-sect-log]]
=== Nexus Logging Configuration

You can configure the level of logging from
within the Nexus interface. To do this, click on Log Configuration under
the Administration menu in the left-hand navigation menu. Clicking on this
link will display the panel shown in <<fig-configuring-log-config>>.

[[fig-configuring-log-config]]
.The Log Configuration Panel
image::figs/web/repository-manager_log-config.png[scale=60]

From this panel you can configure the Root Logger Level. It controls
how verbose the Nexus logging will be. If set to DEBUG, Nexus will be
very verbose printing all log messages include debugging
statements. If set to ERROR, Nexus will be far less verbose only
printing out a log statement if Nexus encounters an error. INFO
represents an intermediate amount of logging.


[[confignx-sect-plugins]]
=== Nexus Plugins and REST Interfaces

As documented in <<install-additional-plugins>> Nexus is built as a
collection of plugins supported by a core architecture and additional
plugins can be installed. 

You can use the Nexus Plugin Console to list all installed Nexus
plugins and browse REST services made available by installed Nexus
Plugin. To open the Nexus Plugin Console, click on the Plugin Console
link in the Administration section of the Nexus menu as shown in
<<fig-config-administration-menu>>.

Once you open the Plugin Console, you will see a list of plugins
installed in your Nexus installation. Clicking on a plugin in this
list will display information about the plugin including name,
version, status, a description, SCM information about the plugin, and
the URL of the plugin's project web site and links to the plugin
documentation.

[[fig-config-plugin-console]]
.Plugin Console
image::figs/web/config-plugin-console.png[scale=60]

An example for the plugin documentation is the Core API documentation
linked off the Core Documentation plugin from
<<fig-config-plugin-console>> and displayed in
<<fig-config-plugin-core-api-site>>

[[fig-config-plugin-core-api-site]]
.Documentation Website for the Core API
image::figs/web/config-plugin-core-api-site.png[scale=60]


[[config-sect-usertoken]]
=== Security Setup with User Tokens

==== Introduction

When using Apache Maven with Nexus, the user credentials for accessing
Nexus have to be stored in clear text in the user's settings.xml
file. Maven has the ability to encrypt passwords in setting.xml, but
the need for it to be reversible in order to be used, limits its
security. In addition the general setup and use is cumbersome and the
potential need for regular changes due to strong security requirements
e.g. with regular, required password changes triggers the need for a
simpler and more secure solution.

The User Token feature of Nexus fills that need for Apache Maven as
well as other build systems and users. It introduces a two part token
for the user, replacing the username and password with a user code and
a pass code that allows no way of recovering the username and password
from the user code and pass code values, yet can be used for
authentication with Nexus from the command line e.g. via Maven as well
as in the UI.

This is especially useful for scenarios where single sign on solutions
like LDAP are used for authentication against Nexus and other systems
and the plain text username and password can not be stored in the
settings.xml following security policies. In this scenario the
generated user tokens can be used instead.

User token usage is integrated in the Maven settings template feature of Nexus
documented in <<settings>> to further simplify its use.

==== Enabling and Resetting User Tokens

The User Token based authentication can be activated by a Nexus
administrator or user with the role usertoken-admin or
usertoken-all by accessing the User Token item in the Security menu on
the left hand navigation. 

Once User Token is Enabled by activating the checkbox in the
administration tab displayed in <<fig-config-user-token-main>> and
pressing Save,  the feature is activated and the additional section to
Reset All User Tokens is available as well.
 
[[fig-config-user-token-main]]
.User Token Administration Tab Panel
image::figs/web/config-user-token-main.png[scale=60]

Selecting the Protect Content feature configures Nexus to require a
user token for any access to the content urls of Nexus, which includes
all repositories and groups.

Activating User Token as a feature automatically adds the User Token
Realm as a Selected Realm in the Security Settings section as
displayed in <<fig-config-user-token-security-settings>> and available
in the Server section of the left hand Administration menu. If
desired, you can reorder the security realms used, although the
default settings with the User Token Realm as a first realm is
probably the desired setup. This realm is not removed when the User
Token feature is disabled, however it will cleanly pass through to the
next realm and with the realm remaining any order changes stay
persisted in case the feature is reactivated at a later stage.


[[fig-config-user-token-security-settings]]
.Selected Realms Server Security Settings with User Token Realm activated
image::figs/web/config-user-token-security-settings.png[scale=60]

Besides resetting all user tokens, an administrator can reset the token
of an individual user by selecting the User Token tab in the Users
administration from the Security menu in the left hand navigation
displayed in <<fig-config-user-token-user-reset>>. The password
requested for this action to proceed is the password for the currently
logged in administrator resetting the token(s)


[[fig-config-user-token-user-reset]]
.User Token Reset for Specific User in Security Users Administration
image::figs/web/config-user-token-user-reset.png[scale=50]

WARNING: Resetting user tokens forces the users to update the
`settings.xml` with the newly created tokens and potentially breaks any
command line builds using the tokens until this change is
carried out. This specifically also applies to continuous integration
servers using user tokens or any other automated build executions.

==== Accessing and Using Your User Tokens

With User Token enabled, any user can access their individual tokens via their
Profile panel. To access the panel, select Profile when clicking on the
user name in the top right hand corner of the Nexus user
interface. Then select User Token in the drop down to get access to the User
Token screen in the Profile panel displayed in
<<fig-config-user-token-profile>>.

[[fig-config-user-token-profile]]
.User Token Panel for the Logged in Users in the Profile Section
image::figs/web/config-user-token-profile.png[scale=60]

In order to be able to see this User Token panel the user has to have
the usertoken-basic role or the usertoken-user privilege. To access or
reset the token you have to press the respective button in the panel
and then provide your username and password in the dialog.

Resetting the token will show and automatically hide a dialog with a
success message and accessing the token will show the dialog displayed
in <<fig-config-user-token-access>>.

[[fig-config-user-token-access]]
.Accessing the User Token information
image::figs/web/config-user-token-access.png[scale=60]

The User Token dialog displays the user code and pass code tokens in
separate fields in the top level section as well as a server section
ready to be used in a Maven settings.xml file. When using the server
section you simply have to replace the `${server}` placeholder with
the repository id that references your Nexus server you want to
authenticate against with the user token.  The dialog will close
automatically after one minute or can be closed with the Close button.

The user code and pass code values can be used as replacements
for username and password in the login dialog for Nexus. It is also
possible to use the original username and the pass code to log in to
Nexus.

With content protection enabled command line access to Nexus will
require the tokens to be supplied. Access to e.g. the releases
repository via 

----
curl -v --user admin:admin http://localhost:9081/content/repositories/releases/
----

has to be replaced with the usage of user code and pass code separated
by colon in the curl command line like this

----
curl -v --user HdeHuL4x:Y7ZH6ixZFdOVwNpRhaOV+phBISmipsfwVxPRUH1gkV09 http://localhost:9081/content/repositories/releases/
----

User token values can be accessed as part of the Maven settings
template feature automating updates as documented in <<settings>>.

NOTE: The user tokens are created at first access whether that is by
using the Nexus user interface or the Nexus Maven Plugin.

==== Configuring User Token Behaviour

The user token feature is preconfigured with built-in parameters and
no external configuration file is created by default. It is however
possible to customize some behaviour by creating a file
'sonatype-work/nexus/conf/usertoken.properties''.

The following properties can be configured:

////
According to Jason Dillon this is mostly for testing the underlying
mechanis and the super edge case when the default strategy incurs too
many name-code collissions, this is also not well tested so we remove
it for now (or ever)
usertoken.encodingStrategyProvider.strategy:: 	Define the
EncodingStrategy for the token with the default value being
'6-33-Base64' and '9-30-Base64' as optional alternative strategy.
similar to above, very advanced and should not be exposed to users at
this stage according to Jason Dillon
usertoken.userTokenServiceImpl.maximumUniqueNameCodeAttempts::
The maximum number of retries to find a unique name code, when
creating the token. Defaults to 10.
////

usertoken.userTokenServiceImpl.allowLookupByUserName:: This parameter controls
if username lookup is allowed when using a pass code. The default is
set to true. If set to false user code and pass code have to be used
to authenticated, otherwise username and pass code is also
possible. This would be the more secure setting.
usertoken.userTokenServiceImpl.restrictByUserAgent:: With this value
set to true, which is the default, any access to the Nexus content
with content protection enabled will only be allowed to web browser
based access even without credentials. Other tools like curl or wget
or other command line tools will be blocked. With the more secure
setting of 'false' any access without correct codes will be
disallowed.

The 'usertoken.' prefix is optional when the properties are loaded
from the 'usertoken.properties' file.


[[smartproxy]]
== Nexus Smart Proxy 

=== Introduction

Typically an organization runs one single Nexus instance to proxy
external artifacts as well as host internally produced artifacts. When
a build is running against this Nexus instance it will look for any
new artifacts in the proxied remote repositories. This adds additional
network traffic that in many cases will just be a response from the
remote server indicating that there are no changes.

This polling approach is fine for smaller deployment even though
performance is impacted by this behaviour. Depending on your proxy
timeout settings this polling won't actually result in updated
artifacts as soon as they become available upstream either.  If you
try to support distributed instances, the only way you are going to
achieve assurance that everything is up to date is by setting you
expiration times to zero and constantly polling.

With the increased usage of Nexus in globally distributed teams or
used by projects that span multiple organizations, each with their own
Nexus instance hosting their own artifacts as well as proxying the
other servers, this polling can result in significant traffic and a
performance hit for all involved servers.

The Smart Proxy feature replaces this constant polling approach with a
Publish-Subscribe based messaging approach between Nexus instances
sharing a mutual trust. The result is a significantly improved
performance due to nearly immediate availability of upstream artifact
information directly in the downstream Nexus instances.

With Smart Proxy enabled the repositories involved will be able to
keep their content in sync without sacrificing performance. This in
turn allows collocating proxy servers with the involved development
teams reducing build times and improving availability and performance
of the used repository servers. The payoff grows with the number of
involved Nexus servers in the network.

[[smartproxy-enabling_smart_proxy_publishing]]
=== Enabling Smart Proxy Publishing

In order to enable the Smart Proxy feature on your Nexus instance, you
need to navigate to the global Smart Proxy configuration screen. It is
available in the left hand navigation in the Enterprise
section. Selecting Smart Proxy will show you the configuration screen
displayed in <<fig-smart-proxy-global-config>>.
 
[[fig-smart-proxy-global-config]]
.Global Configuration for Smart Proxy
image::figs/web/smart-proxy-global-config.png[scale=60]

The Network Settings section allows you to enable the Smart Proxy
server with a check-box. This will need to be enabled on all servers
that will publish events in the Smart Proxy network, while servers
that will only act as subscribers can leave this option disabled.

In addition you can configure the address and port at which the
publishing server will be available. The default address of 0.0.0.0
will cause the proxy to listen on all addresses. The default port
number of 0 will trigger usage of a random available port number for
connection listening. If a random port is used, it will be chosen when
the server (re)starts.

With the Advertised URI field it is possible to configure a specific
address to be broad-casted by the proxy to the subscribing Smart
Proxy clients enabling e.g. usage of a publicly available fully
qualified host-name including the domain or also just usage of an
externally reachable IP number. 

TIP: It is important to enable the configured connection ports on any
firewall between the servers to allow the direct socket connection
between the servers and to avoid using random ports.

The Status field below the form will show the current status of the
Smart Proxy including the full address and port.

The Public Key field displays the key identifying this server
instance. It is automatically populated with the certificate associated
with the public/private key pair that is generated when the server is
first run.

TIP: The key is stored in sonatype-work/nexus/conf/keystore/private.ks
and identifies this server. If you copy the sonatype work folder from
one server to another as part of a migration or a move from testing to
staging or production you will need to ensure that keys are not
identical between multiple servers. To get a new key generated simply
remove the key-store file and restart Nexus.

[[smartproxy-establishing_trust]]
=== Establishing Trust

The servers publishing as well as subscribing to events identify
themselves with their Public Key. This key has to be registered with
the other servers in the Trusted Certificates section of the Smart
Proxy configuration screen.

To configure two Nexus repository servers as trusted Smart Proxies,
you copy the Public Key from the Certificate filed of the other server
in the Trusted Certificates configuration section by adding a new
certificate with a meaningful description as displayed in
<<fig-smart-proxy-copy-certificate>> and
<<fig-smart-proxy-add-certificate>>.

[[fig-smart-proxy-copy-certificate]]
.Copying a Certificate
image::figs/web/smart-proxy-copy-certificate.png[scale=60]

[[fig-smart-proxy-add-certificate]]
.Adding a Trusted Certificate
image::figs/web/smart-proxy-add-certificate.png[scale=60]

All the key generation and certificates related to the trust
management as handled by Nexus itself and no external configuration or
usage of external keys is necessary or possible.

[[smartproxy-repository_specific_smart_proxy_configuration]]
=== Repository Specific Smart Proxy Configuration

Once Smart Proxy has been configured and enabled as described above,
you have to configure, which repositories' content should be
synchronized between the servers. This is done in the Repositories
administration interface in a separate configuration tab titled Smart
Proxy, which allows you to configure repository specific details as
compared to server wide details described above.

On the publishing Nexus server you have to enable Smart Proxy on the
desired hosted, virtual or proxy repositories in the repository
configuration. This is accomplished by selecting the Publish Updates
check-box in the Publish section of the Smart Proxy configuration for a
specific repository as displayed in
<<fig-smart-proxy-repo-list-hosted>> and pressing save.

[[fig-smart-proxy-repo-list-hosted]]
.Smart Proxy Settings for a Hosted Repository
image::figs/web/smart-proxy-repo-list-hosted.png[scale=60]

On the Nexus instance subscribing to the publishing server you have to
create a new proxy repository to hold the synchronized artifacts. The
Smart Proxy configuration for this repository displayed in
<<fig-smart-proxy-repo-list-proxy>> allows you to activate the Receive
Updates check-box in the Subscribe configuration section.

[[fig-smart-proxy-repo-list-proxy]]
.Smart Proxy Settings for a Proxy Repository
image::figs/web/smart-proxy-repo-list-proxy.png[scale=60]

With a working trust established between the publishing and
subscribing Nexus servers the Smart Proxy configuration of the proxy
repository on the subscribing Nexus will display connection status as
displayed in <<fig-smart-proxy-subscribe-connected>>.

[[fig-smart-proxy-subscribe-connected]]
.Subscription with Smart Proxy Connected
image::figs/web/smart-proxy-subscribe-connected.png[scale=60]

[[smartproxy-smart_proxy_security_and_messages]]
=== Smart Proxy Security and Messages

Smart Proxy messages are started with an initial handshake via
HTTP. This handshake allows the two server to exchange their keys and
confirm that they are configured with a valid trust relationship to
communicate. After successful handshake, messages are sent in the
middleware layer and can be configured to be sent via SSL encrypted
messages. 

////
HOW do you configure the SSL stuff? TLS as well?
////
 
The following events are broad-casted via Smart Proxy.

- a new artifact has been deployed
- an artifact has been deleted
- an artifact has been changed
- repository cache or a part of it has been cleared
- Smart Proxy publishing has been disabled

On the recipient side this will cause the changes to be applied
mimicking what happened on the publisher. If Smart Proxy is disabled
the subscription will be stopped.

[[smartproxy-example_setup]]
=== Example Setup

In our example we are going to configure Smart Proxy for two Nexus
servers, Server A and Server B. These servers provide proxying of
external repositories like the Central Repository to the two
development teams Team A and Team B. Both team deploy SNAPSHOT as well
as release artifacts to their own Server A and Server B in the
respective release and snapshot repositories. These snapshot and
release artifacts are needed by the other team respectively. In
addition both servers receive third party artifacts from another
company wide Nexus instance for third party artifacts called Server T.

////
Tim to make a omnigraffle image for this maybe
////
To configure Smart Proxy between these three servers you have to 

- add the public key of Server A as trusted certificate to Server B
  and Server T

- add the public key of Server B as trusted certificate to Server A
  and Server T

- add the public key of Server T as trusted certificate to Server A
  and Server B

- set up the third party repository on Server T to publish updates

- set up a new third party proxy repository on Server A and Server B
  and configure it to receive updates from Server T

- set up a new snapshot and a new release proxy repository on Server A
  that proxies Server B

- set up a new snapshot and a new release proxy repository on Server B
  that proxies Server

- add all the new proxy repositories to the public group on Server A
  and Server B

- configure the snapshot and release hosted repositories on Server A
  and Server B to publish updates

- configure the new snapshot and new release proxy repositories on
  Server A and Server B to receive updates

With this setup the snapshot and release repositories of both servers
will be available to both teams and always be synchronized and up to
date. In addition both servers will have up to date content in their
third party proxy repository.  

[[ldap]]
== Nexus LDAP Integration

=== Introduction 

Nexus Open Source has a Lightweight Directory Access Protocol
(LDAP) Authentication realm which provides Nexus with the
capability to authenticate users against an LDAP server.  In
addition to handling authentication, Nexus can be configured to map
Nexus roles to LDAP user is a member of a group that matches
the ID of a Nexus role, Nexus will grant that user the matching Nexus
Role. In addition to this highly configurable user and group mapping
capability, Nexus can augment LDAP group membership with
Nexus-specific user-role mapping.

Nexus Professional offers LDAP support features for enterprise LDAP
deployments including the ability to cache authentication information,
support for multiple LDAP servers and backup mirrors, the ability to test
user logins, support for common user/group mapping templates, and the
ability to support more than one schema across multiple servers.

[[ldap-sect-enabling]]
=== Enabling the LDAP Authentication Realm

Authentication realm, you will need to add the Nexus LDAP
Authentication Realm to the Selected Realms in the Security section of
the Server configuration panel. To load the Server configuration
panel, click on the Server link under Administration in the Nexus
menu. Once you have the Server configuration panel loaded, select OSS
LDAP Authentication Realm in the Available Realms list under the
Security section and click the Add button (or Left Arrow) as shown in
<<fig-ldap-selecting-realm>>.

[[fig-ldap-selecting-realm]]
.Adding the LDAP Authentication Realm to Available Realms
image::figs/web/ldap_moving_ldap_realm_over.png[scale=60]

Next, click on the Save button in the Server configuration panel. To
make sure that your Nexus instance attempts to authenticate against
LDAP first, click on the OSS LDAP Authentication Realm in the Selected
Realms list and drag it to the top of the list as shown in <<fig-ldap-move-realm-to-top>>.
This will ensure that Nexus will consult the LDAP Server before it
consults the other Authentication Realms.

NOTE: Nexus will continue to fall-back to the Xml Authenticating Realm
if it cannot authenticate a user against the LDAP server. If your LDAP
server is unavailable, and you need to reconfigure the LDAP
connection, you can always login as the default admin

[[fig-ldap-move-realm-to-top]]
.Move the LDAP Authentication Realm to the Top of Selected
image::figs/web/ldap_moving_ldap_realm_to_top.png[scale=60]
      
[[ldap-sect-configuring]]
=== Configuring Nexus LDAP Integration

To configure LDAP integration, click on the LDAP Configuration link in
the Nexus menu as shown in <<fig-ldap-config-link>>. LDAP
Configuration is under Security in the Nexus menu.

[[fig-ldap-config-link]]
.LDAP Configuration Option in the Nexus Security Menu
image::figs/web/ldap_loading_ldap_configuration_panel.png[scale=60]

Clicking on the LDAP Configuration link will load the LDAP
Configuration panel as shown in <<fig-ldap-connection-authentication>>
and <<fig-ldap-user-mapping>>.  The following sections outline the
configuration options available in the LDAP Configuration Panel.

[[ldap-sect-connect-auth]]
=== Connection and Authentication

The following figure shows Nexus configured to connect to an LDAP
server running on localhost port 10389 using the search base of
"ou=system". On a more standard installation, you would likely not
want to use Simple Authentication as it sends the password in clear
text over the network, and you would also use a search base which
corresponds to your organization's top-level domain components such as
"dc=sonatype,dc=com".

[[fig-ldap-connection-authentication]]
image::figs/web/ldap_configure_connection_and_authentication.png[scale=60]

<<tbl-ldap-connection-config>> and <<tbl-ldap-authentication-config>>
contain detailed descriptions of the configuration fields in both the
Connection and Authentication sections of the LDAP Configuration
panel.

[[tbl-ldap-connection-config]]
.Connection Configuration for LDAP Integration
[cols="2,5",options="header"]
|====
|Field Name|Description
|Protocol| Valid values in this drop-down are ldap and ldaps which correspond to the Lightweight Directory Access Protocol and the Lightweight Directory Access Protocol over SSL
|Hostname| The hostname or IP address of the LDAP
|Port|The port on which the LDAP server is listening. Port 389 is the default port for the ldap protocol, and port 636 is the default port for the ldaps
|Search Base| The search base is the Distinguished Name (DN) to be appended to the LDAP. The search base usually corresponds to the domain name of an organization. For example, the search base on the Sonatype LDAP server is "dc=sonatype,dc=com"
|====

[[tbl-ldap-authentication-config]]
.Authentication Configuration for LDAP Integration
[cols="2,5",options="header"]
|====
|Field Name|Description
|Authentication Method|
Nexus provides four distinct authentication methods to be used when
connecting to the LDAP Server:

Simple Authentication:: Simple authentication is not recommended for
production deployments not using the secure ldaps protocol as it sends
a clear-text password over the network.

Anonymous Authentication:: Used when Nexus only needs read-only access
to non-protected entries and attributes when binding to the LDAP

Digest-MD5:: This is an improvement on the CRAM-MD5 authentication
method. For more information, see http://www.ietf.org/rfc/rfc2831.txt

CRAM-MD5:: The Challenge-Response Authentication Method (CRAM) based
on the HMAC-MD5 MAC algorithm. In this authentication method, the
server sends a challenge string to the client, the client responds
with a username followed by a Hex digest which the server compares to
an expected value. For more information, see RFC 2195

For a full discussion of LDAP authentication approaches, see
http://www.ietf.org/rfc/rfc2829.txt and
http://www.ietf.org/rfc/rfc2251.txt

|SASL Realm|

The Simple Authentication and Security Layer (SASL) Realm to connect
with. The SASL Realm is only available if the authentication method is
Digest-MD5 or CRAM-MD5.

|Username|

Username of an LDAP User to connect (or bind) with. This is a
Distinguished Name of a user who has read access to all users and
groups

|Password|

Password for an Administrative LDAP User

|====

[[ldap-sect-user-group-mapping]]
=== User and Group Mapping

The LDAP Configuration panel also contains sections to manage User
Element Mapping and Group Element Mapping as shown in <<fig-ldap-user-mapping>>.

[[fig-ldap-user-mapping]]
image::figs/web/ldap_configure_user_mapping.png[scale=60]

The fields for both the User Element Mapping and Group Element Mapping
sections are described in detail in <<tbl-ldap-user-element-config>>
and <<tbl-ldap-group-element-config>>.

[[tbl-ldap-user-element-config]]
.User Element Mapping Configuration for LDAP Integration
[cols="2,5",options="header"]
|====
|Field Name|Description
|Base DN|

Corresponds to the Base DN containing user entries. This DN
is going to be relative to the Search Base which was specified in
<<fig-ldap-connection-authentication>>. For example, if your users are all
contained in "ou=users,dc=sonatype,dc=com" and
you specified a Search Base of
"dc=sonatype,dc=com" you would use a value of
"ou=users"

|User Subtree|

True if there is a tree below the Base DN which can contain
user entries. False if all users are contain within the specified
Base DN. For example, if all users are in
"ou=users,dc=sonatype,dc=com" this field should
be false. If users can appear in organizational units within
organizational units such as
"ou=development,ou=users,dc=sonatype,dc=com"
this field should be true.

|Object Class|

This value defaults to inetOrgPerson
which is a standard object class defined in http://www.faqs.org/rfcs/rfc2798.html[RFC 2798].
inetOrgPerson contains standard fields such as mail, uid. Other
possible values are posixAccount or a custom class.

|User ID Attribute|

This is the attribute of the Object class which supplies
the User ID. Nexus will use this attribute as the Nexus User
ID.

|Real Name Attribute|

This is the attribute of the Object class which supplies
the real name of the user. Nexus will use this attribute when it
needs to display the real name of a user.

|E-Mail Attribute|

This is the attribute of the Object class which supplies
the email address of the user. Nexus will use this attribute when
it needs to send an email to a user.

|Password Attribute|

This is the attribute of the Object class which supplies
the password of the user. Nexus will use this attribute when it is
authenticating a user against an LDAP
server.

|Password Encoding|

Defines the preferred password encoding mechanism to be
used when sending password data to the LDAP
server.

|====

[[tbl-ldap-group-element-config]]
.Group Element Mapping Configuration for LDAP Integration
[cols="2,5",options="header"]
|====
|Field Name|Description
|Group Type|

Groups are generally one of two types in
LDAP systems - static or dynamic. A static
group contains a list of users. A dynamic group is where the user
contains a list of groups the user belongs to. In
LDAP a static group would be captured in an
entry with an Object class groupOfUniqueNames
which contains one or more uniqueMember
attributes. In a dynamic group configuration, each user entry in
LDAP contains an attribute which lists group
membership.

|Base DN|

This field is similar to the Base DN field described in
<<tbl-ldap-user-element-config>>. This field is visible if Static
Groups is selected. If your groups were defined under
"ou=groups,dc=sonatype,dc=com", this field
would have a value of "ou=groups

|Group Subtree|

This field is similar to the User Subtree field described
in <<tbl-ldap-user-element-config>>. If all groups are defined under the
entry defined in Base DN, this field should be false, if a group
can be defined in a tree of organizational units under the Base
DN, this field should be true. This field is visible if Static
Groups is selected.

|Object Class|

This value defaults to
groupOfUniqueNames which is a standard
object class defined in http://www.faqs.org/rfcs/rfc2798.html[RFC 4519]
groupOfUniqueNames is simply a collection
of references to unique entries in an LDAP directory and can be
used to associate user entries with a group. Other possible values
are posixGroup or a custom class. This
field is visible if Static Groups is selected.

|Group ID Attribute|

Specifies the attribute of the Object class which specifies
the Group ID. If the value of this field corresponds to the ID of
a Nexus Role, members of this group will have the corresponding
Nexus privileges. Defaults to "cn". This field
is visible if Static Groups is selected.

|Group Member Attribute|

Specifies the attribute of the Object class which specifies
a member of a group. A groupOfUniqueNames
has multiple uniqueMember attributes for
each member of a group. Defaults to
"uniqueMember". This field is visible if Static
Groups is selected.

|Group Member Format|

This field captures the format of the Group Member
Attribute and it is used by Nexus to extract a username from this
attribute. For example, if the Group Member Attribute has the
format "uid=brian,ou=users,dc=sonatype,dc=com",
then the Group Member Format would be
"uid=$username,ou=users,dc=sonatype,dc=com".
If the Group Member Attribute had the format
"brian", then the Group Member Format would be
"$username". This field is visible if Static
Groups is selected.

|Member of Attribute|

When Dynamic Groups is selected, Nexus will inspect an
attribute of the user entry to get a list of groups that the user
is a member of. In this configuration, a user entry would have an
attribute such as memberOf which would contain
the name of a group. This field is visible if Dynamic Groups is
selected.
|====

If your installation does not use
Static Groups, you can configure Nexus LDAP Integration
to refer to an attribute on the User entry to derive group membership. To
do this, select Dynamic Groups in the Group Type field in Group Element
Mapping. Selecting Dynamic Groups will show a single field named Member of
Attribute as shown in <<fig-ldap-dynamic-groups>>.

[[fig-ldap-dynamic-groups]]
image::figs/web/ldap_dynamic_groups.png[scale=60]

[[ldap-sect-mapping-active-directory]]
=== Mapping Users and Groups with Active Directory

When mapping users and groups to an Active Directory
installation, try the common configuration values listed in
<<tbl-ldap-ad-user-element>> and <<tbl-ldap-ad-group-element>>.

.Connection and Authentication Configuration for Active Directory
[cols="2,5",options="header"]
|====
|Configuration Element|Configuration Value
|Protocol|ldap
|Hostname|Hostname of Active Directory Server
|Port|389 (or port of AD server)
|Search Base|DC=yourcompany,DC=com (customize for your organization)
|Authentication|Simple Authentication
|Username|CN=Administrator,CN=Users,DC=yourcompany,DC=com
|====

[[tbl-ldap-ad-user-element]]
.User Element Mapping Configuration for Active Directory
[cols="2,5",options="header"]
|====
|Configuration Element|Configuration Value
|Base DN|cn=users
|User Subtree|false
|Object Class|user
|User ID Attribute|sAMAccountName
|Real Name Attribute|cn
|E-Mail Attribute|mail
|Password Attribute|(Not Used)
|Password Encoding|Crypt
|====

[[tbl-ldap-ad-group-element]]
.Group Element Mapping Configuration for Active Directory
[cols="2,5",options="header"]
|====
|Configuration Element|Configuration Value
|Group Type|Dynamic Groups
|Member Of Attribute|memberOf
|====

[[fig-ldap-microsoft-ad]] 
.Configuring Nexus LDAP for Active Directory
image::figs/web/ldap_active-directory.png[scale=60]

WARNING: You should connect to the AD through port 3268 if you have a
multi-domain, distributed Active Directory forest. Connecting directly
to port 389 might lead to errors.

[[ldap-sect-mapping-posix]]
=== Mapping Users and Groups with posixAccount

When mapping users and groups to LDAP entries of type
posixAccount, try the common configuration values listed in
<<tbl-ldap-posix-user-element>> and <<tbl-ldap-posix-group-element>>.

[[tbl-ldap-posix-user-element]]
.User Element Mapping Configuration for posixAccount
[cols="2,5",options="header"]
|====
|Configuration Element|Configuration Value
|Base DN|(Not Standard)
|User Subtree|false
|Object Class|posixAccount
|User ID Attribute|sAMAccountName
|Real Name Attribute|uid
|E-Mail Attribute|mail
|Password Attribute|(Not Used)
|Password Encoding|(Not Used)
|====

[[tbl-ldap-posix-group-element]]
.Group Element Mapping Configuration for posixGroup
[cols="2,5",options="header"]
|====
|Configuration Element|Configuration Value
|Group Type|Static Groups
|Base DN|(Not Standard)
|Group Subtree|false
|Object Class|posixGroup
|Group ID Attribute|cn
|Group Member Attribute|memberUid
|Group Member Format|${username}
|====

[[ldap-sect-mapping-roles-ldap]]
=== Mapping Roles to LDAP Users

Once User and Group Mapping has been configured, you can start
verifying how LDAP users and groups are mapped to Nexus Roles. If a
user is a member of an LDAP group that has a Group ID corresponding to
the ID of a Nexus Role, that user is granted the appropriate
permissions in Nexus. For example, if the LDAP user entry in
"uid=brian,ou=users,dc=sonatype,dc=com" is a member of a
groupOfUniqueNames attribute value of admin, when this user logs into
Nexus, it will be granted the Nexus Administrator Role if Group
Element Mapping is configured properly. To verify the User Element
Mapping and Group Element Mapping, click on Check User Mapping in the
LDAP Configuration panel directly below the Group Element Mapping
section, <<fig-ldap-verify-user-mapping>> shows the results of this check.

[[fig-ldap-verify-user-mapping]] 
.Checking the User and Group Mapping in LDAP Configuration
image::figs/web/ldap_verifying_user_mapping.png[scale=60]

In <<fig-ldap-verify-user-mapping>>, Nexus LDAP Integration locates a user with a User ID of
"brian" who is a member of the "admin" group. When brian logs in, he
will have all of the rights that the admin Nexus Role has.

[[ldap-sect-mapping-nexus-roles-ext]]
=== Mapping Nexus Roles for External Users

If you are unable to map all of the Nexus roles to LDAP groups, you
can always augment the Role information by adding a specific user-role
mapping for an external LDAP user in Nexus. In other words, if you
need to make sure that a specific user in LDAP gets a specific Nexus
role and you don't want to model this as a group membership, you can
add a role mapping for an external user in Nexus. Nexus will keep
track of this association independent of your LDAP server. Nexus
continues to delegate authentication to the LDAP server for this user,
Nexus will continue to map the user to Nexus roles based on the group
element mapping you have configured, but Nexus will also add any roles
specified in the User panel. You are augmenting the role information
that Nexus gathers from the group element mapping.

Once the User and Group Mapping has been configured, click on the
Users link under Security in the Nexus menu. The Users tab is going to
contain all of the "configured" users for this Nexus instance as shown
in <<fig-ldap-all-configured-users-initial>>. A
configured user is a user in a Nexus-managed Realm or an External User
which has an explicit mapping to a Nexus role. In <<fig-ldap-all-configured-users-initial>>, you can see the
three default users in the Nexus-managed default realm plus the brian
user from LDAP. The brian user appears because this user has been
mapped to a Nexus role.

[[fig-ldap-all-configured-users-initial]] 
.Viewing All Configured Users
image::figs/web/ldap_ad_all_configured_users_initial.png[scale=60]

The list of users in <<fig-ldap-all-configured-users-initial>> is a combination of
all of the users in the Nexus default realm and all of the External
Users with role mappings. To explore these two sets of users, click on
the All Configured Users drop-down and choose "Default Realm
Users". Once you select this, click in the search field and press
Enter. Searching with a blank string in the Users panel will return
all of the users of the selected type. In <<fig-ldap-all-default-realm>> you see a dialog containing
all three default users from the Nexus default realm.

[[fig-ldap-all-default-realm]]
.All Default Realm Users
image::figs/web/ldap_ad_all_default_realm_users.png[scale=60]

If you wanted to see a list of all LDAP users, select "LDAP" from the
"All Configured Users" drop-down shown in <<fig-ldap-all-configured-users-initial>> and click on the
search button (magnifying glass) with an empty search field. Clicking
search with an empty search field will return all of the LDAP users as
shown in <<fig-ldap-all-ldap-realm>>.

NOTE: Note that the user "tobrien" does not show up in the "All
Configured Users" list. This is by design. Nexus is only going to show
you information about users with external role mappings. If an
organization has an LDAP directory with thousands of developers, Nexus
doesn't need to retain any configuration information for users that
don't have custom Nexus role mappings.

[[fig-ldap-all-ldap-realm]]
.All LDAP Users
image::figs/web/ldap_ad_all_ldap_realm_users.png[scale=60]

To add a mapping for an external LDAP user, you would click on the
"All Configured Users" drop-down and select LDAP. Once you've selected
LDAP, type in the user ID you are searching for and click the search
button (magnifying glass icon to right of the search field). In <<fig-ldap-search-ldap-users>>, a search for "brian" yields
one user from the LDAP server.

[[fig-ldap-search-ldap-users]]
.Search LDAP Users
image::figs/web/ldap_ad_searching_ldap_users.png[scale=60]

To add a Nexus role mapping for the external user "brian" shown in
<<fig-ldap-search-ldap-users>>, click on the user in
the results table and drag a role from Available Roles to Selected
Roles as shown in <<fig-ldap-mapping-deploy>>. In this
case, the user "brian" is mapped to the Administrative group by virtue
of his membership in an "admin" group in the LDAP server. In this use
case, a Nexus administrator would like to grant Brian the Deployment
Role without having to create a LDAP group for this role and modifying
his group memberships in LDAP

[[fig-ldap-mapping-deploy]] 
.Mapping the Deployment Role to an External User
image::figs/web/ldap_ad_mapping_ldap_deployment.png[scale=60]

The end result of this operation is to augment the Group-Role mapping
that is provided by the LDAP integration. You can use LDAP groups to
manage coarse-grained permissions to grant people administrative
privileges and developer roles, and if you need to perform more
targeted privilege assignments in Nexus you can Map LDAP users to
Nexus roles with the techniques shown in this section.

[[ldap-sect-external-role-mapping-config]]
=== Mapping External Roles to Nexus Roles

Nexus makes it very straightforward to map an external
role to an internal Nexus role. This is something you would do, if you
want to grant every member of an externally managed group (such as an
LDAP group) a certain privilege in Nexus. For example, assume that you
have a group in LDAP named "svn" and you want to make sure that everyone
in the "svn" group has Nexus Administrative privileges. To do this, you
would click on the Add.. drop-down in the Role panel as shown in <<fig-ldap-select-ext-role-map>>. This drop-down can be found in
the Role management panel which is opened by clicking on Roles in the
Security menu.

[[fig-ldap-select-ext-role-map]] 
.Selecting External Role Mapping in the Role Management Panel
image::figs/web/ldap_mapping-external-role.png[scale=60]

Selecting External Role Mapping under Add... will show you a dialog
which contains a drop-down of External Realms. Selecting an external
realm such as LDAP will then bring up a list of roles managed by that
external realm. The dialog shown in <<fig-ldap-select-ext-role>> shows the external realm LDAP
selected and the role "svn" being selected to map to a Nexus role.

[[fig-ldap-select-ext-role]]
.Selecting an Externally Managed Role to Map to a Nexus Role
image::figs/web/ldap_mapping-external-role-select.png[scale=60]

Once the external role has been selected, Nexus will create a
corresponding Nexus Role. You can then assign other Roles to this new
externally mapped Role. <<fig-ldap-external-role-config>> shows that the SVN role from LDAP is being assigned the Nexus
Administrator Role. This means that any user that is authenticated
against the external LDAP Realm who is a member of the svn LDAP group
will be assigned a Nexus role that maps to the Nexus Administrator
Role.

[[fig-ldap-external-role-config]]
.Mapping an External Role to a Nexus Role
image::figs/web/ldap_mapping-external-role-config.png[scale=60]

[[ldap-sect-enterprise]]
=== Enterprise LDAP Support

The following sections outline Enterprise LDAP features which are
available in Nexus Professional.  

==== Enterprise LDAP Fail-over Support 

When an LDAP server fails, the applications authenticating
against it can also become unavailable. Because a central LDAP server
is such a critical resource, many large software enterprises will
install a series of primary and secondary LDAP servers to make sure
that the organization can continue to operate in the case of an
unforeseen failure. Nexus Professional's Enterprise LDAP plugin now
provides you with the ability to define multiple LDAP servers for
authentication. To configure multiple LDAP servers, click on
Enterprise LDAP under Security in the Nexus application menu. You
should see the Enterprise LDAP panel shown in the following figure.

.Defining Multiple LDAP Servers in Nexus Professional
image::figs/web/multiple-ldap-servers.png[scale=60]

You can use the Backup Mirror setting for an LDAP repository. This
backup mirror is another LDAP server which will be consulted if the
original LDAP server cannot be reached. Nexus Professional assumes
that the backup mirror is a carbon copy of the original LDAP server,
and it will use the same user and group mapping configuration as the
original LDAP server.  Instead of using the backup mirror settings,
you could also define multiple LDAP backup mirrors in the list of
configured LDAP servers shown in the previous figure. When you
configure more than one LDAP server, Nexus Professional will consult
the servers in the order they are listed in this panel. If Nexus can't
authenticate against the first LDAP server, Nexus Professional will
move on to the next LDAP server until it either reaches the end of the
list or finds an LDAP server to authenticate against.  

.Use Multiple LDAP Servers in a Fail-over Scenario 
image::figs/web/ldap-backup.png[scale=60]

The feature just described is one way to increase the reliability of
your Nexus instance. In the previous case, both servers would have the
same user and group information. The secondary would be a mirror of
the primary. But, what if you wanted to connect to two LDAP servers
that contained different data? Nexus Professional also provides…

==== Support for Multiple Servers and LDAP Schemas

The same ability to list more than one LDAP server also allows you
to support multiple LDAP servers which may or may not contain the same
user authentication information. Assume that you had an LDAP server for
the larger organization which contained all of the user information
across all of the departments. Now assume that your own department
maintains a separate LDAP server which you use to supplement this larger
LDAP installation. Maybe your department needs to create new users that
are not a part of the larger organization, or maybe you have to support
the integration of two separate LDAP servers that use different schema
on each server.

A third possibility is that you need to support authentication
against different schema within the same LDAP server. This is a common
scenario for companies which have merged and whose infrastructures has
not yet been merged. To support multiple servers with different
user/group mappings or to support a single server with multiple
user/group mappings, you can configure these servers in the Enterprise
LDAP panel shown above. Nexus will iterate through each LDAP server
until it can successfully authenticate a user against an LDAP
server.

.Supporting Multiple LDAP Schemas with Nexus Professional
image::figs/web/ldap-multiple.png[scale=60]

==== Enterprise LDAP Performance Caching and Timeout

If you are constantly authenticating against a large LDAP server,
you may start to notice a significant performance degradation. With
Nexus Professional you can cache authentication information from LDAP.
To configure caching, create a new server in the Enterprise LDAP panel,
and scroll to the bottom of the Connect tab. You should see the
following input field which contains the number of seconds to cache the
results of LDAP queries.

.Setting the LDAP Query Cache Duration (in Seconds)
image::figs/web/ldap-caching.png[scale=60]

You will also see options to alter the connection timeout and
retry interval for an LDAP server. If you are configuring a number of
different LDAP servers with different user and group mappings, you will
want to make sure that you've configured low timeouts for LDAP servers
at the beginning of your Enterprise LDAP server list. If you do this
properly, it will take Nexus next to no time to iterate through the list
of configured LDAP servers.

.Setting the LDAP Connection Timeout (in Seconds)
image::figs/web/ldap-timeout.png[scale=60]

We improved the overall caching in this release. The cache duration is
configurable and applies to authentication and authorization, which
translates into pure speed! Once you've configured LDAP caching in
Nexus Professional, authentication and other operations that involve
permissions and credentials once retrieved from an external server
will run in no time.

==== User and Group Templates

If you are configuring your Nexus Professional instance to connect
to an LDAP server there is a very good chance that your server follows
one of several, well-established standards. Nexus Professional's LDAP
server configuration includes these widely used user and group mapping
templates which great simplify the setup and configuration of a new LDAP
server. To configure user and group mapping using a template, select a
LDAP server from the Enterprise LDAP panel, and choose the User and
Group Settings. You will see a User &amp; Group Templates section as
shown in the following figure.

.Using User &amp; Group Mapping Templates
image::figs/web/ldap-templates.png[scale=60]

==== Testing a User Login

Nexus Professional provides you with the ability to test a user
login directly. To test a user login, go to the User and Group Settings
tab for a server listed in the Enterprise LDAP panel. Scroll to the
bottom of the form, and you should see a button named "Check
Login".

.Testing a User Login
image::figs/web/ldap-check-login.png[scale=60]

If you click on Check Login, you will then be presented with the
login credentials dialog shown below. You can use this dialog to login
as an LDAP user and test the user and group mapping configuration for a
particular server. This feature allows you to test user and group
mapping configuration directly. This feature allows you to quickly
diagnose and address difficult authentication and access control issues
via the administrative interface.

.Supply a User's Login Credentials
image::figs/web/ldap-login-credentials.png[scale=60]

[[procure]]
== Nexus Procurement Suite

[[procure-sect-intro]]
=== Introduction

Nexus Procurement Suite provides an organization with control over
what artifacts are allowed into a repository from an external, proxied
repository such as the Maven Central repository. Such control can be a
prerequisite for organizations unwilling or unable to trust the entire
contents of an external public repository. If an organization is
developing mission critical code, they will likely want to subject
every third party dependency to intense scrutiny and testing before
making an artifact available to build a release or support a team of
developers. In most Enterprise development environments, a developer
can't just decide to add in a new dependency to Hibernate or to the
Spring Framework on a whim; the decision to add dependencies to
third-party libraries will need to be funnelled through an oversight
process that relies on an architect or an administrator to promote
artifacts to a certified release repository.

Another, more common experience is an organization which needs to
proxy something like the Maven Central repository but wants to limit
access to specific versions of artifacts or prevent dependencies on
everything contained under a specific group. Some organizations are
more amenable to trusting the contents of a remote, proxied repository
like Central, but they also need the ability to block certain
dependencies.  Maybe you work on a team that needs to limit access to
dependencies with a certain license, or maybe you just want to make
sure no one uses a problematic version of Hibernate with a known bug?
The procurement suite is the tool that provides for both coarse and
fine-grained control of the artifacts that can appear in a repository.

[[procure-sect-stages]] 
=== The Stages of Procurement

A procured repository is a Hosted Repository which procures artifacts
from a Proxy Repository. For example, one could create a hosted
repository named "Secured Maven Central" and then configure this
hosted repository to procure artifacts from the "Maven Central"
repository. Once the hosted repository has been created and the source
of procurement has been configured, the repository will obtain
artifacts from the proxy repository as long as procurement is
activated.  If you start procurement for a Hosted repository, the
hosted repository will fetch artifacts from the Proxy repository
specified in the procurement settings. If you stop procurement for a
Hosted Repository, no additional artifacts will be retrieved from the
Proxy repository specified in the procurement settings.

The ability to enable or disable procurement for a Hosted repository
comes in very handy when you want to "certify" a Hosted repository as
containing all of the artifacts (no more and no less) required for a
production build. You can start procurement, run a build which
triggers artifact procurement, and then stop procurement knowing that
the procured repository now contains all of the artifacts required for
building a specific project. Stopping procurement assures you that the
contents of the repository will not change if the third-party,
external proxied repository does. This is an extra level of assurance
that your release artifacts depend on a set of artifacts under your
complete control.  

[[procure-sect-approaches]]
=== Two Approaches to Procurement

There are two main use cases for the Procurement Suite. In the first
use case, the Procured Release Repository, the Procurement features of
Nexus Professional are used to create a procured release repository to
make sure that the organization has full control over the artifacts
that are making it into a production release. The other use case, the
Procured Development Repository, is for organizations that need more
up-front control over which artifacts are allowed during the
development of a project. The following sections describe these two
uses cases in more detail.  [[procure-sect-cert]] 

==== Procured Release Repository

The Procurement Suite can be used in two different ways.  In the
"Procured Release" mode, developers work with a proxied 3rd party
repository exactly as they would without the Procurement Suite.  When
a developer needs to add a dependency on a new artifact, Nexus will
retrieve the artifact from the third-party repository (like Central or
Apache Snapshots) and this artifact will be served to Maven via a
proxied Nexus repository. When a QA or Release engineer needs to build
a release or staging artifact, the Release or QA build would be
configured to execute against a procured repository. A procured
repository is one which only serves the artifacts which have been
explicitly approved using the Procurement Suite.

.Procurement to a Certified Release Repository
image::figs/web/procurement_release-procurement.png[scale=60]

In this model, developers can add as many third-party dependencies as
they want, and it is the responsibility of the QA and Release
engineers to approve (or procure) artifacts from the Development
Repository to the QA/Release Repository. Developers can move forward,
adding dependencies freely from a third-party, proxied repository, but
once it is time to populate a Release repository, a Nexus
administrator can audit the required artifacts, create a hosted
repository, turn on procurement, populate the repository, and then
deactivate procurement. This has the effect of "locking down" the
artifacts that are involved in a production release.

[[procure-sect-dev]]
==== Procured Development Repository

There are some development environments which require even more
control over which artifacts can be used and referenced by
developers. In these situations, it might make sense to only allow
developers to work with a procured repository. In this mode, a
developer must ask a Nexus administrator for permission to add a
dependency on a particular third-party artifact. A Procurement Manager
would then have to approve the artifact, or group of artifacts so that
they would be made available to the developers. This is the
"ask-first" model for organizations that want to control which
artifacts make it into the development cycle.

.Procurement to a Certified Development Repository
image::figs/web/procurement_ask-first-procurement.png[scale=60]

This is a model common in industries that have strict oversight
requirements. More often than not, banks, hospitals, and government
agencies have fairly strict regulations on the software that can be
used by large development teams. With the Procured Development
Repository approach, an architecture group can have full control over
what artifacts can be referenced by a large development team.

[[procure-sect-install]]
=== Accessing Artifact Procurement

If you installed Nexus Professional, the Nexus Procurement Suite is
already installed. Just start Nexus and look for the Artifact
Procurement option in the left-hand Enterprise navigation menu of the Nexus
interface. 

[[procure-sect-configure]]
=== Setting up a Procured Repository

This section will walk through the process of creating and configuring
a hosted repository named "Procured Central" which will be procured
from the "Maven Central" proxy repository. Setting up a procured
repository consists of the following steps:

* Enabling Remote Index Downloads for a Proxy Repository

* Creating a Hosted Repository to be Procured

* Configuring Procurement for the Hosted Repository

* Configuring Procurement Rules

Before configuring a procured repository, you need to make sure that
you have enabled Remote Index downloading for the proxied repository
that will serve as the source for your procured repository.

NOTE: If you are attempting to procure artifacts from a remote
repository which does not have a repository index, you can still use
the procurement suite. Without a remote repository index, you will
need to configure procurement rules manually without the benefit of
the already populated repository tree shown in <<procure-sect-config-rule>>.

[[procure-sect-enabled-remote]]
==== Enable Remote Index Downloads

When you configure procurement rules for a hosted repository, the
administrative interface displays the repository as a tree of groups
and artifacts populated from the Remote Repository's Nexus
Index. Nexus ships with a set of proxy repositories, but remote index
downloading is disabled by default. 

To use procurement, you will need to tell Nexus to download the remote
indexes for a proxy repository. Click on "Repositories" under
Views/Repositories in the Nexus menu, then click on the Maven Central
repository in the list of repositories. Click on the Configuration
tab, locate Download Remote Indexes, and switch this option to "True"
as shown in <<fig-procure-enabling-remote>>.

[[fig-procure-enabling-remote]]
.Enabling Remote Index Downloads for a Proxy Repository
image::figs/web/procure_central-download-remote-index.png[scale=60]

Click on the Save button in the dialog shown in
<<fig-procure-enabling-remote>>. Right-click on the repository row in
the Repositories list and select "Update Index". Nexus will then
download the remote repository index and recreate the index for any
Repository Groups that contain this proxied repository.

Nexus may take a few minutes to download the remote index for a large
repository. Depending on your connection to the Internet, this process
can take anywhere from under a minute to a few minutes. The size of
the remote index for Maven Central is on the order of 30 MB.

To check on the status of the remote index download, click on System
Feeds under Views in the Nexus menu. Click on the last feed to see a
list of "System Changes in Nexus". If you see a log entry like the one
highlighted in <<fig-procure-system-feed>>, Nexus has successfully
downloaded the Remote Index from Maven Central.

[[fig-procure-system-feed]]
.Verification that the Remote Index has been Downloaded
image::figs/web/procure_reindex-system-feed.png[scale=60]
    
[[procure-sect-create-hosted]]
==== Create a Hosted Repository

When you configure procurement you are establishing a relationship
between a Proxy Repository and a Hosted Repository. To create a Hosted
Repository, select Repositories from the Views/Repositories section of
the Nexus menu, and click on the Add button selecting Hosted
Repository as shown in <<fig-procure-add-hosted>>.

[[fig-procure-add-hosted]]
.Adding a Hosted Repository
image::figs/web/procure_add-hosted.png[scale=60]

Selecting Hosted Repository will then load the Configuration form
shown in <<fig-procure-add-secured>>. Create a repository with a
Repository ID of "secured" and a name of "Secured". Make the release
policy "Release". Click the Save button to create the new Hosted
Repository and view the new repository created displayed in
<<fig-procure-add-secured>>.

[[fig-procure-add-secured]]
.Adding the "Secured" Hosted Repository
image::figs/web/procure_after-add-secured.png[scale=60]
          
[[procure-sect-config-procure-hosted]]
==== Configuring Procurement for Hosted Repository

At this point, the list of Repositories will have a new Hosted
repository named "Secured". The next step is to start procurement for
the new Secured repository. When you do this, you are establishing a
relationship between the new Hosted Repository and a Proxy Repository.
In this case, we're configuring procurement for the Secured repository
and we're telling the Procurement Suite to procure artifacts from the
Maven Central proxy repository. To configure this relationship and to
start procurement, click on Artifact Procurement under the Enterprise
menu. In the Procurement panel, click on Add Procured Repository as
shown in <<fig-procure-starting-procurement>>.

[[fig-procure-starting-procurement]]
.Adding a Procured Repository
image::figs/web/procure_add-procured-repository.png[scale=60]

You will then be presented with the Start Procurement dialog as shown
in <<fig-procure-start-procurement-dialog>>. Select the
"Maven Central" proxy repository from the list of available Source
repositories.

[[fig-procure-start-procurement-dialog]] 
.Configuring Procurement for a Hosted Repository
image::figs/web/procure_configure-procurement-confirm.png[scale=60] 

Procurement is now configured and started, if you are using an
instance of Nexus installed on localhost port 8081, you can configure
your clients to reference the new Secured repository at
http://localhost:8081/nexus/content/repositories/secured

By default, all artifacts are denied and without further customization
of the procurement rules no artifacts will be available in the new
Secured repository.

One interesting thing to note about the "Secured" repository is that
the Repository Type changed, once rocurement was started. When
procurement is activate for a Hosted repository, the repository will
not show up in the Repositories list as a User Managed
Repository. Instead it will show up as a Proxy Repository as a Nexus
Managed Repository. Use the drop down for User Managed/Nexus Managed
Repositories in the Repositories list. Click Refresh in the
Repositories list, and look at the Secured repository in the list of
Nexus Managed Repositories.  You will see that the repository type
column contains "proxy" as shown in <<fig-procure-hosted-now-proxy>>.
When procurement is started for a hosted repository it is effectively
a proxy repository, and when it is stopped it will revert back to
being a normal hosted repository.

[[fig-procure-hosted-now-proxy]]
.Hosted Repository is a Nexus Managed Proxy Repository while Procurement is Active
image::figs/web/procure_started-now-proxy.png[scale=60]
  

[[procure-sect-creating-rules]]
==== Procured Repository Administration

Once you've defined the relationship between a Hosted repository and a
Proxy repository and you have started procurement, you can start
defining the rules which will control which artifacts are allowed in a
procured repository and which artifacts are denied. You can also start
and stop procurement. This section details some of the administration
panels and features which are available for a procured repository.

A procurement rule is a rule to allow or deny the procurement of a
group, artifact, or a collection of groups or artifacts. You load the
Artifact Procurement interface by selecting Artifact Procurement under
the Enterprise section of the Nexus menu.  Clicking on this link will
load a list of procured repositories.  Clicking on the repository will
load the entire repository in a tree as shown in
<<fig-procure-repository-view>>.

This section will illustrate the steps required for blocking access to
an entire artifact and then selectively allowing access to a
particular version of that same artifact. This is a common use-case in
organizations which want to standardize on specific versions of a
particular dependency.

NOTE: If you are attempting to procure artifacts from a remote
repository which does not have a repository index, you can still use
the procurement suite. Without a remote repository index, you will
need to configure procurement rules manually without the benefit of
the already populated repository tree shown in this section.

[[fig-procure-repository-view]]
.Viewing a Repository in the Artifact Procurement Interface
image::figs/web/procure_repository-view.png[scale=60]

The directory tree in <<fig-procure-repository-view>> is the index of
the proxy repository from which artifacts are being procured.

[[procure-sect-config-rule]]
=== Configuring a Procurement Rule

To configure a procurement rule, right click on a folder in the
tree. <<fig-procure-deny-group-all>> displays the
procurement interface after right clicking on the jython artifact
folder. In this dialog, we are telling the procurement interface to
deny everything in the jython group and its sub-groups. If you attempt
to retrieve any version under the jython artifact after this rule is
created, the Procurement Suite will prevent access to this
artifact. For example, if you attempt to build a project that depends
on jython:jython:2.1, it will not be made available via the Secured
repository created in <<procure-sect-configure>>.

[[fig-procure-deny-group-all]]
.Denying Procurement for Everything Under a Group
image::figs/web/procure_deny-all-jython.png[scale=60]

After denying access to the entire jython artifact, right-click on the
2.1 version folder under the jython artifact folder. Select "Exactly
the artifact" as shown in <<fig-procure-allowing-artifact>> to allow
for the procurement of only the 2.1 version. This has the effect of
creating a specific rule which allows the procurement of a single
version of the jython:jython artifact.

[[fig-procure-allowing-artifact]]
.Allowing Access to a Single Artifact in a Denied Group
image::figs/web/procure_approve-artifact.png[scale=60]

After allowing this element, your procurement tree is going to contain
red and green markers on the affected folders as shown in
<<fig-procure-composite-effects>>. While the jython artifact folder
has a red slash through it the 2.1 version folder has a green
check. You have configured the Procurement Suite to deny access to all
versions of the jython artifact except version 2.1.

[[fig-procure-composite-effects]]
.Viewing the Effect of Composite Procurement Rules on the Tree
image::figs/web/procure_only-one-jython.png[scale=60]

[[procure-sect-manage-rules]]
=== Managing Procurement Rules

Once you've created a set of procurement rules you are going to want
to know how to view the procurement rules which are applicable to a
particular node. Procurement rules will frequently overlap; for
example, in <<procure-sect-creating-rules>>, there are
two rules: one rule applies to all of the versions (folder) below the
jython artifact folder, and the other rule applies to a particular
version directory. Since rules can overlap, Nexus provides a simple
way to list and manage the rules which apply to a specific node in the
directory tree. <<fig-procure-composite-effects>> shows
the resolved procurement rules after clicking on the Jython 2.1
version artifact from <<procure-sect-configure>>.

[[fig-procure-effective]]
.Effective Procurement Rules for a Particular Node
image::figs/web/procure_effective-rules.png[scale=60]

This dialog gives the procurement administrator a fine-grained view
into the rules that apply to a particular node. From this dialog you
can remove rules which apply to a specific node.

[[procure-sect-stopping]]
=== Stopping Procurement

Some organizations may want to "lock down" the artifacts that a
release build can depend upon, and it is also a good idea to make sure
that your build isn't going to be affected by changes to a repository
not under you control. A procurement administrator might configure a
procured repository, start procurement, and run an enterprise build
against the repository to populate the procured, hosted repository
with all of the necessary artifacts. After this process, the
procurement administrator can stop procurement and continue to run the
same release build against the hosted repository which now contains
all of the procured artifacts.

To stop procurement, go to the Artifact Procurement management
interface by clicking on Artifact Procurement under the Enterprise
section of the Nexus menu. Right click on the repository and choose
Stop Procurement as shown in <<fig-procure-stopping>>.

[[fig-procure-stopping]]
.Stopping Procurement for a Procured Repository
image::figs/web/procure_stop-procurement.png[scale=60]

After choosing Stop Procurement, you will then see a dialog confirming
your decision to stop procurement. Once procurement is stopped, the
Secure repository will revert back to being a plain-old Hosted
Repository.

[[staging]]
== Build Promotion with the Nexus Staging Suite

[[staging-sect-intro]]
=== Introduction

If you release software, you will often need to test a release before
deploying it to a production system or an externally accessible
repository. For example, if you are developing a large, enterprise web
application you may want to stage a release candidate to a staging
system and perform a series of rigorous tests before a release manager
makes a decision to either return a system to development or deploy a
system to production.

The Staging Suite in Nexus Professional allows an organization
to create a temporary staging repository and to manage the promotion
of artifacts from a staging repository to a release repository. This
ability to create an isolated, release candidate repository that can be
discarded or promoted makes it possible to support the decisions that
go into certifying a release, while the certification process is done
on the same binaries that will ultimately be released.

[[staging-sect-without]]
==== Releasing Software without a Staging Repository

Without the Staging Suite, when a developer deploys an artifact to a
hosted repository such as the Release repository, this artifact is
published and immediately made available - there is no oversight,
there is no approval or certification process. There is no chance to
test the artifact before writing the artifact to a hosted
repository. If there is a mistake in the release, often the only
option available is to republish the artifacts to the release
repository or deploy a new version of the artifacts.

.Release Deployment Without the Nexus Staging Suite
image::figs/web/staging_without_staging.png[scale=60]

While this is acceptable for some users, organizations and enterprises
with a QA cycle often need a temporary storage for potential release
candidates: a staging repository. With the Nexus Staging Suite, an
organization can automatically stage releases to a temporary
repositor,y which can then be used to test and certify a set of
artifacts, before they are published to a final release
repository. This temporary repository can then be promoted as a whole
or dropped depending on the results of testing. When used the binary
artifacts being tested and certified are the identical artifacts that
will ultimately be released and not a clean fresh build kicked off
after the certification finished as is often the case without a
staging suite being used.

[[staging-sect-how]]
==== How the Staging Suite Works

Here's how staging works in Nexus Professional:

. A developer deploys an artifact (or a set of artifacts) to Nexus
Professional

. The staging suite intercepts this deployment and determines if the
deployment matches for a staging profile 

. If a match is found a temporary staging repository is created and
the artifacts are deployed to this repository.

. Once the developer has deployed a set of artifacts to Nexus, they
will then "Close" the staging repository.

. The Staging Suite will then add this temporary staging repository to
one or more Target Repository Groups.

Once the staging repository is closed and has been added to a target
repository group, the artifacts in the staging repository are
available to Nexus users for testing and certification via a
repository group. Tests can be performed on the artifacts as if they
were already published in a hosted repository. At this point, one of
two things can happen to a staging repository:

Release:: A Nexus user can "release" a staging repository and select a
hosted repository to publish artifacts to. Releasing the contents of a
repository publishes all artifacts from the staging repository to a
hosted repository and deletes the temporary staging repository.

Drop:: A Nexus user can "drop" a staging repository. Dropping a
staging repository will remove it from any groups and delete the
temporary staging repository.

Promote:: If your Nexus installation contains Build Promotion
profiles, you will also see an option to "promote" a staging
repository to a Build Promotion Group. When you promote a staging
repository you expose the contents of that staging repository via
additional groups. Build Promotion profiles are explained in detail in
the next section.

.Release Deployment with the Nexus Staging Suite
image::figs/web/staging_with_staging.png[scale=60]

[[fig-staging-release-description]]
.The Stages of a Staging Repository starting with Deployment and Ending with a Release or a Drop of the Repository
image::figs/web/staging-workflow.png[scale=60]


[[staging-sect-prepare-nexus]]
=== Configuring the Nexus Staging Suite

==== Overview

The Staging Suite is part of the default Nexus Professional install
and is accessible with the menu items Staging Profiles, Staging
Repositories, Staging Ruleset, and Staging Upload options in the
left-hand navigation menu of the Nexus interface called Build
Promotion.

Staging Profiles define the rules by which artifact deployments from
your project are intercepted by Nexus and staged in Staging
Repositories. 

Staging Repositories are dynamically created by Nexus as they are
needed. They are temporary holding repositories for your artifacts
that are used for the different staging related steps. Using them in
the Nexus user interface users can promote the contents of the
staging repository to a hosted repository, discard them and more.

Staging Rulesets allow you to define rules that the artifacts being
deployed have to follow in order to allow successful deployment. 

Staging Upload allows you to manually upload artifacts to Nexus via
the user interface rather than by using your build system.

==== Configuring a Staging Profile

Staging profiles control the process by which artifacts are selected
for staging. When you define a Staging profile, you are defining a set
of rules which will control the way in which Nexus intercepts an
artifact deployment and what actions to perform during and after
staging the artifacts. When you click on Staging Profiles in the Nexus
menu, you will see a list of configured staging profiles.  Clicking on
Add... will display the drop-down menu shown in
<<fig-staging-add-staging-profile>>.

[[fig-staging-add-staging-profile]]
.Adding a Staging Profile
image::figs/web/staging_add-staging-profile.png[scale=60]

Selecting Staging Profile will create a new Staging Profile and
display the form shown in <<fig-staging-edit-profile>>.

<<fig-staging-edit-profile>> defines a Staging Profile named Test.  It
is configured to only intercept explicit deployments in the Profile
Selection Strategy using the Profile ID and the Nexus Staging Maven
Plugin. It uses the template "Maven2 (hosted, release)" for newly
created temporary staging repositories, and it will automatically add
closed staging repositories to the Public Repositories group.

[[fig-staging-edit-profile]]
.Creating a New Staging Profile
image::figs/web/staging_profile-edit.png[scale=60]

The form allows you to configure a profile with the following fields:

Profile ID and Deploy URL:: These two fields are only available as
read only display once a profile has been created. The Profile ID
displays the unique identifier that can be used for staging to this
repository using the Nexus Staging Maven Plugin. The Deploy URL
displays the generic staging URL that can be used with the default
Maven Deploy Plugin together with the Repository Target configuration
to intercept the deployment and move the artifacts into the Staging
Suite instead.

Profile Name:: The name of the staging profile. This can be an arbitrary
value. It is simply a convenience for the Nexus Administrator, and
it is also used to create Nexus roles that are used to grant
permissions to view and manipulate staging repositories created by
this profile.

Profile Selection Strategy:: Select the strategy used by Nexus to
select this staging profile. Explicit or Implicit is the default
behaviour and causes Nexus to select the profile by the provided
staging profile identifier and if none is provided fall back to an
automatic determination. It is necessary to be used with
the Maven Deploy Plugin and the correct staging profile is determined
using Repository Targets together with the generic Deploy URL of Nexus.
+
When using the Nexus Staging Maven Plugin for deployments, and
therefore an explicitly defined staging profile in the project POM, the
setting should be changed to Explicit Only. This will prevent the
profile from implicitly capturing a deployment in this repository due
to the matching defined and allow Nexus to ensure that the deployment
reaches the Staging Profile with the configured Staging Profile ID
even if the default matching and staging profile order could
potentially cause a deployment to end up in a different profile.

Searchable Repositories:: The default value of enabling this
feature will cause any new artifacts in this staging profile to be
added to the indexes and therefore be available in search
queries. Disable this feature to "hide" artifacts in staging.

Staging Mode:: This field contains the options "Deploy," "UI Upload,"
and "Deploy and UI Upload." This controls how artifacts can be staged
to this staging profile. If Deploy is selected, artifacts can only be
deployed using Maven to upload build artifacts. If UI Upload is
selected, users can upload artifacts to Nexus using the Nexus user
interface.

Template:: Defines the template for the format of the temporary
staging repositories created by this staging profile. The current
version of Nexus Professional provides the option "Maven2 (hosted,
release)" only. Additional templates can be supplied by plugins that
enable staging for other repository types. An example for such a
plugin is the http://code.google.com/p/nexus-yum-plugin/[Nexus Yum
Plugin].

Repository Target:: When a developer deploys an artifact to the
generic Deploy URL, the Staging Suite will check to see if the
artifact matches the patterns defined in this Repository Target. The
repository target defines the "trigger" for the creation of a staging
repository from this staging profile and is only needed for implicit
deployments with the Deploy URL and not for explicit deployments using
the Profile ID.

Release Repository:: Staged artifacts are stored in a temporary
staging repository which is made available via Target Groups. Once a
staged deployment has been successfully tested, artifacts contained in
the temporary staging repository are promoted to a hosted repository
as their final storage place. The Release Repository setting
configures this target release repository for this staging profile.

Content Type:: Nexus can create staging repositories for repositories
of type Maven2. This value is automatically selected based on the chosen
template. 

Target Groups:: When a Staging Repository is "closed" and is made
available to users and developers involved in the testing process, the
temporary Staging Repository is added to one or more Repository
Groups. This field defines those groups.

Close Repository Notification Settings:: After a developer has
deployed a set of related release artifacts, a staging repository is
"closed". This means that no further artifacts can be deployed to the
same staging repository.  A repository would be closed when a
developer is satisfied that a collection of staged artifacts is ready
to be certified by a manager or a quality assurance resource. In this
setting, it is possible to define email addresses and roles which
should be notified of a staging repository being closed. A
notification email will be sent to all specified email addresses, as
well as all Nexus users in the specified roles, informing that a
staging repository has been closed. It is also possible to select that
the creator of the staging repository receives this notification.

Promote Repository Notification Settings:: Once a closed staging
repository has been certified by whoever is responsible for testing
and checking a staged release, it can then be promoted (published) or
dropped (discarded). In this setting, it is possible to define email
addresses and Nexus security roles which should be notified of a
staging repository being promoted. A notification email will be sent
to all specified email addresses, as well as all Nexus users in the
specified roles, informing that a staging repository has been
promoted. It is also possible to select that the creator of the
staging repository receives this notification.

Drop Repository Notification Settings:: In this setting, it is
possible define email addresses and roles which should be notified of
a staging repository being dropped.  A notification email will be sent
to all specified email addresses, as well as all Nexus users in the
specified roles, informing that a staging repository has been
dropped. It is also possible to select that the creator of the staging
repository receives this notification.
           
Close Repository Staging Rulesets:: This defines the rulesets which
will be applied to a staging repository before it can be closed. If
the staging repository does not pass the rules defined in the
specified rulesets, you will be unable to close it. For more
information about rulesets, see <<staging-sect-rulesets>>.

Promote Repository Staging Rulesets:: This defines the rulesets which
will be applied to a staging repository on promotion. If the staging
repository does not pass the rules defined in the specified rulesets,
the promotion will fail with an error message supplied by the failing
rule. For more information about rulesets, see
<<staging-sect-rulesets>>.


[[staging-sect-config-build-profile]]
==== Configuring Build Promotion Profiles

A Build Promotion profile is used when you need to add an additional
step between initial staging and final release. To add a new Build
Promotion profile, open the Staging Profiles link from the Nexus menu
and click on Add... to display the drop-down menu shown in
<<fig-staging-build-promo-link>>. Select Build Promotion Profile from
this drop-down to create a new Build Promotion Profile.

[[fig-staging-build-promo-link]]
.Multi-level Staging and Build Promotion
image::figs/web/staging_add-build-promotion-orilfe.png[scale=60]

After creating a new Build Promotion profile, you will see the
form shown in <<fig-staging-build-promo-profile>>. This
form contains the following configuration fields:

Profile Name:: This is the name for the Build Promotion profile which
will be displayed in the promotion dialog shown in
<<fig-staging-promote-stating>>. This name will also be associated
with repositories created from this promotion profile.

Template:: This is the template for repositories generated by this
Build Promotion profile. The default value for this field is "Maven2
(group)".

Target Groups:: This is the most important configuration field for a
Build Promotion profile. It controls the group that promoted artifacts
will be made available through. Artifacts can be made available
through one or more groups.

[[fig-staging-build-promo-profile]]
.Configuring a Build Promotion Profile
image::figs/web/staging_closed-beta-promotion-group.png[scale=60]

[[staging-sect-security]]
==== Staging Related Security Setup

Staging Suite is controlled by three roles:

- Staging: Deployer
- Staging: Promoter
- Staging: Repositories

These roles are available as general 'admin' roles that apply to all
staging profiles with the respective access. When you create a new
staging profile, Nexus will create new roles that grant permissions
specific to that staging profile. If you created the staging profile
named 'Test', Nexus created the three new and profile specific roles:

Staging: Repositories (Test):: This role grants a user read and view
access to the staging repositories created by the 'Test' staging
profile.
 
Staging: Deployer (Test):: This role grants all of the privileges from
the Staging: Repositories role and in addition grants the user
permission to deploy artifacts, close and drop any staging repository
created by the 'Test' staging profile.

Staging: Promoter (Test):: This role grants all of the privileges from
the Staging: Deployer role and in addition grants the user permission
to promote abt staging repository created by the 'Test' staging
profile.

To perform a staged deployment, the user deploying the artifact must
have the "Staging: Deployer (admin)" role or the "Staging: Deployer"
role for a specific Staging Profile.

To configure the deployment user with the appropriate staging role,
click on Users under the Security menu in the Nexus menu. Once you see
the Users panel , click on the deployment user to edit this user's
roles. Click on the Add button in the Role Management section of the
Config tab visible in <<fig-staging-user-add-role>> for the user to be
able to add new roles to the user.


[[fig-staging-user-add-role]]
.Adding a Role to a User 
image::figs/web/staging-user-add-role.png[scale=60]

Use the Filter section with the keyword Staging and press the Apply
 Filter button to see all available staging related roles as displayed
 in <<fig-staging-user-add-role>>.

[[fig-staging-user-add-role-dialog]]
.Available Roles for Staging with a Test Staging Profile 
image::figs/web/staging-user-add-role-dialog.png[scale=50]

You should see the "Staging: Deployer (admin)" role listed as well as
the 'Test' staging profile specific role, the promoter and
repositories ones for 'admin' and 'Test' and a few staging user
interface related roles. If you need to add a specific permission to
activate a single Staging Profile, you would select that specific
role.

Once the deployment user has the "Staging: Deployer (admin)" role, you
can then use this user to deploy to the staging URL and trigger any
staging profile. Without this permission, the deployment user would
not be able to publish a staged artifact. 

In a similar fashion you can assign the promoter role to users.

==== Using Repository Targets for Staging 

The Staging Suite intercepts deployments to Nexus using Repository
Targets as documented in <<confignx-sect-managing-repo-targets>> when
using implicit matching as a profile selection strategy based on the
artifacts path in the repository.

For example, if you wanted to intercept all deployments to the
com.sonatype.sample groupId, you would create a repository target
with a pattern with a regular expression of
`^/com/sonatype/sample/.*` and use that repository target in your
Staging Profile configuration.

[[staging-sect-deployment]]
=== Configuring your Project for Deployment

Once Nexus is configured to receive artifacts in the staging suite as
documented in <<staging-sect-prepare-nexus>>, you will have to update
your project build configuration to deploy to the staging suite.

The preferred way to do this is to take advantage of the features
provided by the Nexus Staging Maven Plugin or the Nexus Staging Ant
Tasks  as documented in
<<staging-sect-deployment-nexus-staging-maven-plugin>>
and <<staging-sect-deployment-nexus-staging-ant-tasks>>.

If you need to continue to use the Maven Deploy Plugin you can read
about using it with the Nexus Staging Suite in 
<<staging-sect-deployment-maven-deploy-plugin>>. 

With all tools you can use the manual upload of your artifacts
documented in <<staging-sect-deployment-manual>>.

[[staging-sect-deployment-nexus-staging-maven-plugin]]
==== Deployment with the Nexus Staging Maven Plugin

The Nexus Staging Maven Plugin is a Nexus specific and more powerful
replacement for the Maven Deploy Plugin with a number of features
specifically geared towards usage with the Nexus Staging Suite. The
simplest usage can be configured by adding it to the project build plugins
section as an extension:

----
<build>
  <plugins>
    <plugin>
      <groupId>org.sonatype.plugins</groupId>
      <artifactId>nexus-staging-maven-plugin</artifactId>
      <version>1.0</version>
      <extensions>true</extensions>
      <configuration>
        <serverId>local-nexus</serverId>
        <nexusUrl>http://localhost:8081/nexus/</nexusUrl>
      </configuration>
    </plugin>
----

Following Maven best practices the version should be pulled out into a
pluginManagement section in a company POM or parent POM.

This configuration works only in Maven 3 and automatically replaces
the deploy goal invocation of the Maven Deploy Plugin in the deploy
Maven lifecycle phase with the deploy goal invocation of the Nexus
Staging Maven Plugin. 

The minimal required configuration parameters for the Nexus Staging Maven Plugin are:

serverId:: the id of the server element in `settings.xml` from which
the user credentials for accessing Nexus should be retrieved 
nexusUrl:: the base URL at which the Nexus server to be used for
staging is available

With this configuration the Nexus Staging Maven Plugin will stage the
artifacts locally and connect to Nexus. Nexus will try to determine
the appropriate Staging Profile by matching the artifact path with any
repository targets configured with staging profiles with an activated
implicit profile selection strategy. If an appropriate staging profile
is found a staging repository is created on the fly and the artifacts
are deployed into it. If no profile is found the upload will fail.

To successfully deploy to your Nexus instance, you will
need to update your Maven Settings with the credentials for the
deployment user. These credentials are stored in the Maven Settings file
in ~/.m2/settings.xml. 

To add these credentials, add the following element to the servers
element in your ~/.m2/settings.xml file as shown in
<<ex-staging-deployment-credentials>>.

[[ex-staging-deployment-credentials]]
.Listing deployment credentials in Maven Settings
----
<settings>
  ...
  <servers>
    ...
    <server>
      <id>nexus</id>
      <username>deployment</username>
      <password>deployment123</password>
    </server>
  </servers>
  ...
</settings>
----

Note that the server identifier listed in
<<ex-staging-deployment-credentials>> should match the serverId
parameter you are passing to the Nexus Staging Maven Plugin and in the
example contains the default password for the Nexus deployment user -
deployment123.  You should change this password to match the
deployment password for your Nexus installation.

If more control is desired over when the plugins deploy goal is
activated or if Maven 2 is used, you have to explicitly deactivate the
Maven Deploy Plugin and replace the Maven Deploy Plugin invocation
with the Nexus Staging Maven Plugin like this

----
<build> 
  <plugins> 
    <plugin> 
      <groupId>org.apache.maven.plugins</groupId> 
      <artifactId>maven-deploy-plugin</artifactId> 
      <configuration>
        <skip>true</skip> 
      </configuration> 
    </plugin> 
    <plugin> 
      <groupId>org.sonatype.plugins</groupId> 
      <artifactId>nexus-staging-maven-plugin</artifactId>
      <executions> 
        <execution> 
          <id>default-deploy</id> 
          <phase>deploy</phase> 
          <goals> 
            <goal>deploy</goal> 
          </goals> 
        </execution> 
      </executions> 
      <configuration> 
        <serverId>local-nexus</serverId>
        <nexusUrl>http://localhost:8081/nexus/</nexusUrl>
      </configuration> 
    </plugin>
...
----

The implicit matching relies on the setup of repository targets as
well as the correct order of staging profiles and is therefore an
error prone approach when many staging profiles are in use. 

The preferred way to work in this sceneario is to change the profile
selection strategy on all staging profiles to explicit only and pass
the staging profile id to the Nexus Staging Maven Plugin using the
`stagingProfileId` configuration parameter.

In order to deploy project artifacts to Nexus with the above setup you
would invoke a build with

----
mvn clean deploy
----

The build will locally stage the artifacts for deployment in
`target/nexus-staging`, on the console and create a closed staging repository in Nexus
holding the build artifacts. This execution of the `deploy`
goal of the Nexus Staging Maven Plugin performs the following actions:

- the artifacts are staged locally, 

- a staging profile is selected either implicitly or explicitly

- a staging repository is either created on the fly if needed or just
  selected

- an atomic upload to the staging repository is performed

- and the staging repository is closed (or dropped if upload fails)

The log of a successful deployment would look similar to this:

----
[INFO] --- nexus-staging-maven-plugin:1.0-SNAPSHOT:deploy (injected-nexus-deploy) @ staging-example ---
[INFO] Using server credentials with ID="nexus-releases" from Maven settings.
[INFO] Preparing staging against Nexus on URL http://localhost:8081/nexus/
[INFO]  * Remote Nexus reported itself as version 2.1-SNAPSHOT and edition "Professional"
[INFO]  * Using staging profile ID "12a1656609231352" (matched by Nexus).
[INFO] Staging locally (stagingDirectory="/Users/manfred/dev/staging-example/target/nexus-staging/12a1656609231352")...
Uploading: file: ... staging-example-1.0.0.jar
Uploaded: file: ... staging-example-1.0.0.jar (4 KB at 1051.1 KB/sec)
Uploading: file: ... staging-example-1.0.0.pom
Uploaded: file: ... staging-example-1.0.0.pom (4 KB at 656.2 KB/sec)
Downloading: file: ...maven-metadata.xml
Uploading: file: ...maven-metadata.xml
Uploaded: file: ... maven-metadata.xml (322 B at 157.2 KB/sec)
[INFO] Staging remotely...
[INFO] Uploading locally staged directory: 12a1656609231352
[INFO] Performing staging against Nexus on URL http://localhost:8081/nexus/
[INFO]  * Remote Nexus reported itself as version 2.1-SNAPSHOT and edition "Professional"
[INFO]  * Created staging repository with ID "test-002", applied tags: {javaVersion=1.6.0_26, localUsername=manfred}
[INFO]  * Uploading locally staged artifacts to: http://localhost:8081/nexus/service/local/staging/deployByRepositoryId/test-002
[INFO]  * Upload of locally staged artifacts done.
[INFO]  * Closing staging repository with ID "test-002".
[INFO] Finished staging against Nexus with success.
---- 

Failures are accompanied by error reports that reveal further details:

----
[ERROR] Error while trying to close staging repository with ID "test-003".
[ERROR] 
[ERROR] Nexus Staging Rules Failure Report
[ERROR] ==================================
[ERROR] 
[ERROR] Repository "Test-003 (u:admin, a:127.0.0.1)" (id=n/a) failures
[ERROR]   Rule "RepositoryWritePolicy" failures
[ERROR]     * Artifact updating: Repository ='releases:Releases' does not allow updating artifact='/com/sonatype/training/nexus/staging-example/t1.0.0/staging-example-1.0.0.jar'
[ERROR]     * Artifact updating: Repository ='releases:Releases' does not allow updating artifact='/com/sonatype/training/nexus/staging-example/1.0.0/staging-example-1.0.0.pom'
[ERROR] 
[ERROR] 
----

If the configuration parameter
`skipStagingRepositoryClose` set to `true` is passed to the plugin
execution, the remote staging repository will not be closed.

Instead of Nexus creating a staging repository based on the implicit
or explicit staging profile selection, you can explicitly configure
the staging repository to use by providing the staging repository name
as value of the `stagingRepositoryId` configuration property via the
plugin configuration or command line invocation. 

The identifier of a staging repository can be determined by looking at
the name column in the list of staging repositories. The name column
used the capitalized id and adds the username and address the staging
was deployed from in brackets. For example a name could be 
`Test-003 (u: admin, a: 127.0.0.1)`. The ID of this staging repository
is `test-003`.

Together with skipping the closing of the repository using
`skipStagingRepositoryClose` it is possible to get multiple builds to
deploy to the same staging repository and therefore have a number of
artifacts go through the staging workflow together. An alternative to
this approach would be to create an aggregating project that assembles
all artifacts together e.g. in an assembly and then use this project
for staging.


Finally to override all staging you can define the full repository URL to
deploy to with the `deployUrl` configuration parameter e.g.

---- 
http://localhost:8081/nexus/content/repositories/releases/`.
----

This would cause any staging to be skipped and a straight upload of
the artifacts to the repository to occur.

As part of the configuration section for the plugin you can define
tags with arbitrary key and value names. For example you could create
a tag with key localUsername and a value of the current user picked up
from the USER environment variable:

----
...
<configuration>
...  
  <tags>
    <localUsername>${env.USER}</localUsername>
    <javaVersion>${java.version}</javaVersion>
  </tags>
...
----


Once artifacts are released these tags are transformed into attributes
stored along the artifacts in the release repository and  can be
accessed via the REST interface and therefore any plugin and user
interface integration. 

In addition to the above documented configuration options that
determine the behvaiour of the Nexus Staging Maven Plugin, further
configuration can be provided with the following parameters:

altStagingDirectory:: defaulting to target/nexus-staging you can
set the property to set a different folder for the local staging 
description:: allows you to provide a description for the staging
repository action like close or drop carried out as part of the plugin
execution. The description will then be used in any notification just
like a description provided in the user interface.
keepStagingRepositoryOnFailure:: setting this flag to true will cause
the plugin to skip any clean up operations like dropping a staging
repository for failed uploads, by default these clean up operations
occur
skipStaging:: set to false by default this flag will cause to skip any
execution of the plugin when set to true
skipRemoteStaging:: if this flag is set to true any step related to
remote staging will be skipped and only local staging will be
performed, the default setting is false

With `skipRemoteStaging` set to true, only the local staging
happens. This local staging can then be picked up for the remote
staging and closing by running the `deploy-staged` goal of the plugin
explicitly like this

----
mvn nexus-staging:deploy-staged
----

Besides the default `deploy` goal the Nexus Staging Maven Plugin
supports a number of additional goals. By configuring executions of
the goals as part of your POM or manually invoking them further
automation of a staged release process can be achieved.

deploy-staged:: perform full staging deployment workflow for a locally
staged project e.g. with the artifacts in target/nexus-staging

close:: close the staging repository for current context

drop:: drop the staging repository for current context

release:: release the staging repository for current context

promote:: promote the staging repository for the current context

Closing, dropping and releasing the staging repository using the goals
relies on content of a local staging folder .

Promoting additionally needs the build promotion profile name passed in
via the `buildPromotionProfileId` configuration parameter.

While the above goals need the context of a project with configuration
for the Nexus Staging Plugin in the POM file, it is possible to
execute staging repository related tasks without a project as
well. The Nexus Staging Maven Plugin offers remote-control goals to
control staging in Nexus:

rc-close:: close a specified staging repository 

rc-drop:: drop a specified staging repository 

rc-release:: release a specified staging repository 

rc-promote:: promote a specified staging repository

When invoking these goals outside a project context you need to have
the Nexus Staging Maven Plugin groupId specified as a pluginGroup in
your settings.xml:

----
 <pluginGroups>
       <pluginGroup>org.sonatype.plugins</pluginGroup>
 </pluginGroups>
----

In addition you need to specify all parameters on the command line as
properties passed in via `-Dkey=value`.

At a minimum the required parameters `serverId` and `nexusUrl` have to
be specified:
----
 mvn nexus-staging:rc-close -DserverId=local-nexus -DnexusUrl=http://localhost:8081/nexus
---- 

Depending on the goal you will have to configure the staging
repositories you want to close, drop or release with

----
 -DstagingRepositoryId=repo-001,repo-002
----

and you can also supply a description like this

----
-Ddescription="Dropping since QA of issue 123 failed"
----

For promoting you need to add the required parameter that specifies
the build promotion profile identifier:

----
-DbuildPromotionProfileId=12a25eabf8c8b3f2
----

A successful remote control drop would be logged in the command line
similar to this

---- 
— nexus-staging-maven-plugin:1.0-SNAPSHOT:rc-drop (default-cli) @ standalone-pom —
[INFO] Connecting to Nexus...
[INFO] Using server credentials with ID="nexus-releases" from Maven settings.
[INFO] RC-Dropping staging repository with IDs=[test-003]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
----

WARNING: The Nexus Maven Plugin in versions earlier than 2.1.0 had goals
to work with staging repositories. These goals have been deprecated in
favour of the remote control goals of the Nexus Staging Maven Plugin.

[[staging-sect-deployment-nexus-staging-ant-tasks]]
==== Deployment with the Nexus Staging Ant Tasks

The Nexus Staging Ant Tasks provide equivalent features to the Nexus
Staging Maven Plugin for Apache Ant users covering all use cases for
interacting with the Nexus Staging Suite.

To use the Ant tasks in your Ant build file you need to download the
complete jar with the included dependencies. You can find it at
the Central Repository. Simply search for 'nexus-staging-ant-tasks'
and download the jar file with the `uber` classifier
e.g. `nexus-staging-ant-tasks-1.0-uber.jar`.

After downloading, put the jar file somewhere in your
project or in your system so you can add it to the classpath in your
build file with a task definition. In the following example the jar
file is placed in a `tasks` folder within the project.

----
<taskdef uri="antlib:org.sonatype.nexus.ant.staging" 
         resource="org/sonatype/nexus/ant/staging/antlib.xml">
  <classpath>
    <fileset dir="tasks" includes="nexus-staging-ant-tasks-*uber.jar" />
  </classpath>
</taskdef>
----

The deployment related information for your project is captured in a
`nexusStagingInfo` section in your build file that contains all the
necessary configuration.

----
<staging:nexusStagingInfo id="target-nexus" 
    stagingDirectory="target/local-staging">
  <staging:projectInfo groupId="org.sonatype.nexus.ant"
      artifactId="nexus-staging-ant-tasks"
      version="1.0" />
  <staging:connectionInfo 
      baseUrl="http://localhost:8081/nexus">
    <staging:authentication 
      username="deployment" 
      password="deployment123" />
  </staging:connectionInfo>
</staging:nexusStagingInfo>
----

nexusStagingInfo:id:: the identifier that allows you to reference the
staging information in the Ant build file

stagingInfo:stagingDirectory:: the local staging directory, a place
where local staging will happen. Ensure that this directory is cleaned
up by "clean" tasks (or alike, if any).

projectInfo:: the project information targetting a staging
profile. This can be done explicitly with the stagingProfileId or
implicitly with groupId, artifactId and version. stagingRepositoryId
can also be part of projectInfo identifying a staging repository for
interaction

connectionInfo:baseUrl:: the base URL of the Nexus server you want to
deploy to and interact with

If necessary the connection Info can have a nested proxy section

----
<staging:proxy 
    host="proxy.mycorp.com" 
    port="8080">
  <staging:authentication 
      username="proxyUser" 
      password="proxySecret" />
</staging:proxy>
----

With the above setup you are ready to add a deploy target to your
build file that stages the artifacts locally as well as remotely and
closes the staging repository. 

----
<target name="deploy" description="Deploy: Local and Remote Staging">

  <staging:stageLocally>
    <staging:nexusStagingInfo 
        refid="target-nexus" />
      <fileset dir="target/local-repo" 
        includes="**/*.*" />
    </staging:stageLocally>

  <staging:stageRemotely>
    <staging:nexusStagingInfo 
        refid="target-nexus" />
  </staging:stageRemotely>

</target>
----

Similarily you can create a target that releases the staged artifacts
by adding the closeStagingRepository task to the end of the target:

----
<staging:releaseStagingRepository>
  <staging:nexusStagingInfo 
      refid="target-nexus" />
</staging:releaseStagingRepository>
----

The stageLocally task takes a fileset as configuration. The
stageRemotely task has additional configuration options 

keepStagingRepositoryOnFailure:: set to true this causes the remote
staging repository to be kept rather than deleted in case of a failed
upload, default setting is false

skipStagingRepositoryClose:: by default a staging repository is
automatically closed, setting this parameter to true will cause the
staging repository to remain open

In addition to the tasks for local and remote staging the Nexus
Staging Ant Tasks includes tasks for closing, dropping, releasing and
promoting a staging repository:

- closeStagingRepository

- dropStagingRepository

- releaseStagingRepository

- promoteStagingRepository

All these tasks take the context information from the local staging
directory or from the optional parameter `stagingRepositoryId`. The
task to promote a repository has the additional, mandatory attribute
`buildPromotionProfileId` to specify the build promotion profile to
promote.


[[staging-sect-deployment-maven-deploy-plugin]]
==== Deployment with the Maven Deploy Plugin

When using the Maven Deploy Plugin with the Nexus Staging Suite, you
rely on implicit matching of the artifacts against a staging profile
based on a repository target definition. 

To deploy a staged release, a developer needs to deploy to the
staging URL. To configure a project to deploy to the Staging URL, add
the a distributionManagement element to your project's POM. 

[[ex-staging-dist-management]]
.Listing the Staging URL in distributionManagement
----
<project xmlns="http://maven.apache.org/POM/4.0.0" 
...
  <distributionManagement>
    <repository>
      <id>nexus</id>
      <name>Nexus Staging Repo</name>
      <url>http://localhost:8081/nexus/service/local/staging/deploy/maven2/</url>
    </repository>
  </distributionManagement>
...
</project>
----

This configuration element, distributionManagement, defines the
repository to which our deployment will be made. It references the
Staging Suite's Staging URL:
http://localhost:8081/nexus/service/local/staging/deploy/maven2

This URL acts as a something of a virtual repository to be published
to.  If an artifact being published matches one of the Repository
Targets in a Staging Profile, that Staging Profile is "activated" and
a temporary Staging Repository is created.

Once the sample project's distributionManagement has been set
to point at the Nexus Staging URL and your deployment credentials are
updated in your ~/.m2/settings.xml file, you can deploy to the Staging
URL. To do this, run mvn deploy

----
$ mvn deploy
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building staging-test
[INFO]    task-segment: [deploy]
[INFO] ------------------------------------------------------------------------
[INFO] [resources:resources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:compile]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:testCompile]
[INFO] Nothing to compile - all classes are up to date
[INFO] [surefire:test]
[INFO] Surefire report directory: /private/tmp/staging-test/target/surefire-reports

...
[INFO] [jar:jar]
[INFO] [install:install]
[INFO] Installing /private/tmp/staging-test/target/staging-test-1.0.jar to \
~/.m2/repository/com/sonatype/sample/staging-test/1.0/staging-test-1.0.jar
[INFO] [deploy:deploy]
altDeploymentRepository = null
Uploading: http://localhost:8081/nexus/service/local/staging/deploy/maven2/\
com/sonatype/sample/staging-test/1.0/staging-test-1.0.jar
2K uploaded
[INFO] Uploading project information for staging-test 1.0
[INFO] Retrieving previous metadata from nexus
[INFO] repository metadata for: 'artifact com.sonatype.sample:staging-test' 
could not be found on repository: nexus, so will be created
[INFO] Uploading repository metadata for: 'artifact com.sonatype.sample:staging-test'
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
----

If the Staging Suite is configured correctly, any deployment to the
staging URL matching in a repository target configured for a stating
profile should be intercepted by the Staging Suite and placed in a
temporary staging repository. Deployment with the Maven Deploy Plugin
will not automatically close the staging repository. Closing the
staging repository has to be done with the Nexus user interface or the
Nexus Staging Maven Plugin.  Once this repository has been closed, it
will be made available in the Target Group you selected when you
configured the Staging Profile.


[[staging-sect-deployment-manual]]
==== Manually Uploading a Staged Deployment in Nexus

You can also upload a staged deployment via the Nexus interface. To
upload a staged deployment, select Staging Upload from the Nexus
menu. Clicking Staging Upload will show the panel shown in
<<fig-staging-artifact-upload>>.

[[fig-staging-artifact-upload]]
.Uploading a Staged Deployment in Nexus
image::figs/web/staging_artifact-upload.png[scale=60]

To upload an artifact, click on Select Artifact(s) for Upload... and
select one or more artifacts from the filesystem to upload. Once you
have selected an artifact, you can modify the classifier and the
extension before clicking on the Add Artifact button. Once you have
clicked on the Add Artifact button, you can then configure the source
of the Group, Artifact, Version (GAV) parameters.

If the artifact you are uploading is a JAR file that was created by
Maven it will already have POM information embedded in it, but if you
are uploading a JAR from a vendor you will likely need to set the
Group Identifier, Artifact Identifier, and Version manually. To do
this, select GAV Parameters from the GAV Definition drop-down at the
top of this form.  Selecting GAV Parameters will expose a set of form
fields which will let you set the Group, Artifact, Version, and
Packaging of the artifacts being uploaded. If you would prefer to set
the Group, Artifact, and Version from a POM file which was associated
with the uploaded artifact, select From POM in the GAV Definition
drop-down. Selecting From POM in this drop-down will expose a button
labelled "Select POM to Upload". Once a POM file has been selected for
upload, the name of the POM file will be displayed in the form field
below this button.

The Staging Upload panel supports multiple artifacts with the same
Group, Artifact, and Version identifiers. For example, if you need to
upload multiple artifacts with different classifiers, you may do so by
clicking on Select Artifact(s) for Upload and Add Artifact multiple
times.  This interface also accepts an Artifact Bundle which is a JAR
that contains more than one artifact.

Once a staging artifact upload has been completely configured, click
on Upload Artifact(s) button to begin the upload process. Nexus will
upload the artifacts to the Staging URL which will trigger any staging
profiles that are activated by the upload. If a staging profile is
activated, a new staging repository will be created and can be managed
using the procedures outlined in <<staging-sect-managing-staging>>.


[[staging-sect-managing-staging]]
=== Managing Staging Repositories in Nexus

Once you completed the process outlined in <<staging-sect-deployment>>,
you will have an automatically generated Staging Repository. In
this section, you will walk through the process of managing staging
repositories. Once a staging repository has been created, there are
two steps in the lifecycle of a staging repository. Once you have
deployed a set of related artifacts, you must "Close" the repository
moving it from an "Open" to a "Closed" state. Once a repository is in
the "Closed" state it is added to a Repository Group and is made
available for testing purposes. Once testing is completed, a Nexus
administrator can either Promote or Drop a Closed repository. 

If the repository is Dropped, the repository is discarded and removed
from the Repository Group. If the repository is Promoted, the Nexus
administrator can select a Hosted repository and publish the contents
of the temporary staging repository to a Hosted repository.

[[staging-sect-closing]]
==== Closing an Open Repository

Once you deploy an artifact that triggers a staging
profile, Nexus Staging Suite will create a repository that contains the
artifacts you deployed. A separate staging repository is created for
every combination of User ID, IP Address, and User Agent. This means
that you can perform more than one deployment to a single Staging
Repository as long as you perform the deployment from the same IP, with
the same deployment user, and the same installation of Maven. 

You can perform multiple deployments to an "Open" staging repository,
to see a list of these temporary "Open" Staging repositories, select
"Staging" from the Nexus menu and click on the appropriate Staging
Profile to browse a list of staging repositories which correspond to a
staging profile.

.Listing Repositories Associated with a Staging Profile
image::figs/web/staging_close-repository.png[scale=60]

Once you are ready to start testing the staging repository, you
will need to transition the staging repository from the "Open" state to
the "Closed" state. This will close the temporary staging repository to
more deployments. 

To close a repository, right-click on the repository in the Staging
Repositories panel and select "Close". This will bring up the
following dialog for a staging deployer to describe the contents of a
staging repository. This description field can be used to pass
essential information to the person that needs to test a
deployment. 

In <<fig-staging-close-description>>, the description field is used to
describe the release for the user that needs to certify and promote a
release.

[[fig-staging-close-description]]
.Confirmation and Description Dialog for Closing a Staging Repository
image::figs/web/staging_close-confirm.png[scale=60]

Confirming this state transition will close the repository and add
the repository to a repository group. Once a repository has been closed,
it will be listed as "Closed" in the Profile's Repositories tab.

.Closed Repository After Selecting Finish
image::figs/web/staging_closed-repository.png[scale=60]

[[staging-sect-using-repository]]
==== Using the Staging Repository

Once the Staging Repository has been closed, it will automatically be
added to the Repository Group that was specified in the Staging
Profile. <<fig-staging-add-to-group>> shows an instance of a staging
repository appended to the end of a group named "Public Repositories".

This has the effect of making the staged artifacts available to
everyone who is referencing this public group.  Developers who are
referencing this public repository group can now test and interact
with the staged artifacts as if they were published to a Hosted
repository. 

While the artifacts are made available in a repository group, the fact
that they are held in a temporary staging directory gives the
administrator the option of promoting this set of artifacts to a
Hosted repository or dropping this temporary staging repository if
there are problems discovered during the testing and certification
process for a release.

[[fig-staging-add-to-group]]
.Staging Repository Added to the End of a Repository Group
image::figs/web/staging_staged-to-group.png[scale=60]

Once a staging repository is closed, you can also browse and
search the repository. To view Staging Repositories, click on Browse
Repositories and then select Nexus Managed Repositories as shown in
<<fig-staging-selecting-nexus>>.

[[fig-staging-selecting-nexus]]
.Viewing Nexus Managed Repositories
image::figs/web/staging_select-nexus-managed.png[scale=60]

Once you've selected Nexus Managed Repositories, Nexus will then
show you all of the repositories that have been created by the Nexus
Staging Suite. You can select and browse this temporary Staging
Repository as you would any other repository.

.Browsing a Staging Repository
image::figs/web/staging_browsing-staged.png[scale=60]

You can browse the contents of a staging repository from the
Staging Repositories panel. Click on Staging Repositories in the Nexus
menu, click on a Staging Repository to browse the contents and perform
operations a staging repository.

.Browsing Repository via Staging Profiles
image::figs/web/staging_browsing-via-profiles.png[scale=60]

[[staging-sect-releasing]]
==== Releasing a Staging Repository

Once you are finished testing or certifying that the contents of a
Staging Repository are correct, you are ready to either Release or
Drop the Staging Repository. Dropping the Staging Repository will
delete the temporary staging repository from Nexus and remove any
reference to this repository from the groups it was associated with.
Releasing the Staging Repository allows you to publish the contents of
this temporary repository to a Hosted repository.

To release a Staging Repository select Staging from the Nexus menu
and then click on the appropriate Staging Profile. This will display a
list of Staging Repositories associated with that Staging Profile. To
release the contents of a repository, load the list of Staging
Repositories, check the box next to the staging repository you which to
promote and then click the Release button shown in <<fig-staging-promote>>.

[[fig-staging-promote]]
.Promoting a Staging Repository
image::figs/web/staging_promote-repository.png[scale=60]

Once you click Release, the Nexus Staging Suite will ask you to supply
a description for this release action.

.Selecting the Destination Repository for Staged Repository Promotion
image::figs/web/staging_promote-confirm.png[scale=60]

Supplying a description and clicking on Release will publish the
contents of a Staging Repository to a Hosted repository and delete the
Staging Repository from Nexus.

.Confirmation Dialog for Repository Promotion
image::figs/web/staging_success-promote.png[scale=60]

[[staging-sect-promoting]]
==== Promoting a Staging Repository

If you have a staging repository that you want to promote to a
Build Promotion profile, open the list of Staging Repositories by
selecting Staging Repositories from the Nexus menu, select the
repository you intend to promote, and click the Promote button as shown
in <<fig-staging-promote-button>>.

[[fig-staging-promote-button]]
.Promoting a Staging Repository
image::figs/web/staging_promote-to-group-button.png[scale=60]

After clicking the Promote button the Promote Staging Repository shown
in <<fig-staging-promote-stating>> will be displayed. In this dialog,
you can choose the Build Promotion profile to promote the staging
repository to, and you can supply a short description of the
promotion. Clicking on the Promote button in this dialog will promote
the staging profile to a build promotion profile and expose the
contents of the selected staging repository through a group associated
with the build promotion profile.

[[fig-staging-promote-stating]]
.Multi-level Staging and Build Promotion
image::figs/web/staging_promote-to-group.png[scale=60]

After you promote a staging repository to a Build Promotion
profile the build promotion profile will create a temporary repository
which contains the contents of the promoted staging repository. The
staging repository will be a Group Member of the Build Promotion
repository. One or more staging repositories can be promoted to a
single Build Promotion profile, and you can browse the Group Member by
selecting the Build Promotion repository and viewing the Group Member
tab as shown in <<fig-staging-group-members>>.

[[fig-staging-group-members]]
.Multi-level Staging and Build Promotion
image::figs/web/staging_browse-group-members.png[scale=60]

[[staging-sect-using-build]]
==== Releasing, Promoting, and Dropping Build Promotion Profiles

When you configure a Build Promotion profile and promote Staging
Repositories to promotion profiles, each Build Promotion profile creates
a repository which contains one or more Staging Repositories. Just like
you can promote the contents of a Staging Repository to a Build
Promotion profile, you can also promote the contents of a Build
Promotion profile to another Build Promotion profile. When you do this
you can create hierarchies of staging repositories and build promotion
profiles which can then be dropped or released together.

[[fig-staging-build-promo-agg]]
.Releasing, Promoting, and Dropping Build Promotion Profiles
image::figs/web/staging-promotion.png[scale=60]

When you promote a staging repository to a build promotion
profile, you make the contents of a staging repository available via a
repository group associated with a build promotion profile. 


For example, if you staged a few artifacts to a QA Staging Repository
and then subsequently promoted that repository to a Closed Beta Build
Promotion group, the contents of the QA Staging Repository would
initially be made available via a QA Repository Group. After a build
promotion, these artifacts would also be available via a Closed Beta
repository group.  

You can take it one step further and promote the contents of the
Closed Beta Build Promotion profile to yet another Build Promotion
profile. In this way you can have an arbitrary number of intermediate
steps between the initial staging deployment and the final release.

If you drop the contents of a build promotion profile, you roll back
to the previous state. For example, if you decided to drop the
contents of the Closed Beta build promotion group, Nexus will revert
the status of the Staging Repository from promoted to closed, and make
the artifacts available via the QA Staging Repository. The effects of
promoting, dropping, and releasing artifacts through a series of
Staging Profiles and Build Promotion Profiles is shown in
<<fig-staging-build-promo-agg>>.

When you perform a release on a Build Promotion profile, each Staging
Repository is going to release artifacts to the Release Repository
configured in <<fig-staging-edit-profile>>.  Because a Build
Repository can contain one or more promoted staging repositories, this
means that releasing a Build Promotion profile can cause artifacts to
be published to more than one Release Repository.  Build Promotion
profiles are not directly related to release repositories, only
staging profiles are directly associated with target release
repositories. <<fig-staging-multi-to-one>> illustrates this behaviour
with two independent Staging Repositories each configured with a
separate Release Repository. Releasing the Build Promotion profile
causes Nexus to publish each Staging Repository to a separate hosted
repository.

[[fig-staging-multi-to-one]]
.Promoting Multiple Repositories to the Same Build Promotion Profile
image::figs/web/multiple-promotion-release.png[scale=60]




[[staging-sect-multi]]
==== Multi-level Staging and Build Promotion

Nexus also supports multi-level staging and build
promotion. With multi-level staging, a staging repository can be
tested and then promoted to a separate "build promotion" profile and
exposed through different repository groups to allow for additional
testing and qualification before a final
frelease. <<fig-staging-multi-scenario>> illustrates a potential use
for multi-level staging:

Stage:: A developer publishes artifacts to a QA staging profile which
exposes the staged artifacts in a QA repository group used by an
internal quality assurance team for testing.

Promote to Beta:: Once the QA team has successfully completed
testing, they promote the temporary staging repository to build
promotion profile which will expose the staged artifacts to a limited
set of customers who have agreed to act as a beta testers for a new
feature.

Release:: Once this closed beta testing period is finished, the
staged repository is then released and the artifacts it contains are
published to a hosted release repository and exposed via the public
repository group.

[[fig-staging-multi-scenario]]
.Multi-level Staging and Build Promotion
image::figs/web/multi-level-staging.png[scale=60]

To support this multi-level staging feature, you can configure Build
Promotion profiles as detailed in
<<staging-sect-config-build-profile>>. Once you have promoted a
Staging Repository to a Build Promotion profile, you can drop,
promote, or release the artifacts it contains as detailed in
<<staging-sect-prepare-nexus>>.


[[staging-sect-rulesets]]
=== Enforcing Standards for Deployment and Promotion with Rulesets

Nexus has the ability to define staging rules that must be satisfied
to allow successful deployment or before a staging repository can be
promoted.

[[staging-sect-staging-rulesets]]
==== Managing Staging Rulesets

Staging Rulesets are groups of rules that are applied to a Staging
repository at promotion time. A staging repository associated with a
staging ruleset cannot be promoted until all of the rules associated
with the rulesets have been satisfied. This feature allows you to set
standards for your own hosted repositories, and it is the mechanism
that is used to guarantee the consistency of artifacts stored in the
Maven Central repository.

Nexus Professional contains the following rules:

Staging Javadoc Validation:: The Staging Javadoc Validation rule will
verify that every project has an artifact with the javadoc
classifier. If you attempt to promote a staging repository which
contains artifacts not accompanied by "-javadoc.jar" artifacts, this
validation rule will fail.

Staging Artifact Uniqueness Validation:: This rule checks to see that
the artifact being released, promoted, or staged is unique in a
particular Nexus instance.

Staging Checksum Validation:: This rule validates file checksums
against published artifacts.

Staging No Release Repository:: This rule will fail if a particular
staging profile is not defined with a release repository.

Staging POM Validation:: The Staging POM Validation rule will verify
Project URL - project/url, Project Licenses - project/licenses and
Project SCM Information - project/scm.  If any of these POM elements
are missing or empty, this Staging Ruleset will cause a promotion to
fail.

Staging Signature Validation:: The Staging Signature Validation rule
verifies that every item in the repository has a valid PGP
signature. If you attempt to promote a staging repository which
contains artifacts not accompanied by valid PGP signature, this
validation will fail.

Staging Sources Validation:: The Staging Sources Validation rule will
verify that every project has an artifact with the sources
classifier. If you attempt to promote a staging repository which
contains artifacts not accompanied by "-sources.jar" artifacts, this
validation rule will fail.

To create a Staging Ruleset, click on the Staging Ruleset link in the
Nexus Menu. This will load the interface shown in
<<fig-staging-rulesets>>.  The Staging Ruleset panel is used to define
sets of rules that can be applied to Staging
Profiles. <<fig-staging-rulesets>> shows a ruleset which contains all
four predefined staging rules.

[[fig-staging-rulesets]]
.Creating a Staging Ruleset
image::figs/web/staging-rulesets.png[scale=60]

[[staging-sect-defining-rulesets]]
==== Defining Rulesets for Promotion

To define a ruleset to be used for promotion, click on Staging in the
Nexus menu and select a Staging Profile. Click on the Configuration
tab, and scroll down to the Promote Repository Staging Rulesets
section of the Staging Profile configuration as shown in
<<fig-staging-associate-ruleset>>. The next time you attempt to
promote a staging repository that was created with this profile, Nexus
Professional will check that all of the rules in the associated
rulesets are being adhered to.

[[fig-staging-associate-ruleset]]
.Associating a Staging Ruleset with a Staging Profile
image::figs/web/staging-rulesets-associate.png[scale=60]

[[rhc]]
== Repository Health Check

Repository Health Check is a feature of Nexus that integrates data
used for http://sonatype.com/Products/Sonatype-Insight[Sonatype
Insight]. Sonatype Insight is a separate product that consists of
tools to monitor and manage license, quality and security data about
artifacts used in your software development life cycle. 

Repository Health Check provides access to a limited subset of the
available data in Sonatype Insight via the Sonatype Insight Service
right in your Nexus server. The Sonatype Insight Service is part of
the Central Repository and exposes data about the artifacts there,
including license information, security vulnerability data and other
statistics like usage data and download numbers.

To perform a Repository Health Check about the artifacts in your Nexus
instance, you have to click the Analyze button in the Quality column
of the list of Repositories displayed in
<<fig-rhc-repo-list-quality>>. In order to be able to do that you have
to be logged in as an administrator. Once the data gathering analysis
is completed the Quality column will display the number of security
and license issues found.

[[fig-rhc-repo-list-quality]]
.The Repositories List with Different Quality Status Indicators and Result Counts
image::figs/web/rhc-repo-list.png[scale=60]

Hovering your mouse pointer of that value will display the Repository
Health Check summary data in a pop up window. A sample window is
displayed in <<fig-rhc-summary-pop-up>>.

[[fig-rhc-summary-pop-up]]
.A Result Summary Window for a Repository Health Check
image::figs/web/rhc-summary-report.png[scale=60]

At the bottom of the pop up window you find a button to disable the
analysis for this repository as well as the button View Detailed
Report to access the detailed report. It will show up
in another tab in the main area of the Nexus user interface.

The detailed report contains the same overview data and charts for
security and license information at the top displayed in
<<fig-rhc-detail-summary>> .

[[fig-rhc-detail-summary]]
.Summary of the Detailed Repository Health Check Panel
image::figs/web/rhc-detail-summary.png[scale=50]

Below this overview a drop down for Security and
License information allows you to toggle between two lists displaying
further details. Both lists have a filter for each column at the
bottom of the list that allows you to narrow down the number of rows
in the table and therefore find specific entries easily.

The security list as visible in <<fig-rhc-detail-security-list>>
contains columns for Threat Level, Problem Code and the GAV parameters
identifying the affected artifact. The Problem Code column is a link
to the security warning referenced and commonly links a specific entry
in http://www.osvdb.org[the Open Source Vulnerability Database] or
http://cve.mitre.org[the Common Vulnerabilities and Exposures] list.
Both of these databases have a descriptive text for the vulnerability
and further information and reference links.

[[fig-rhc-detail-security-list]]
.The Security Data in the Detailed Repository Health Check Report
image::figs/web/rhc-detail-security-list.png[scale=40]

The license list as visible in <<fig-rhc-detail-license-list>>
shows a derived threat in the Effective License Threat column. The
Declared License column details the license information found in pom
file. The Observed Licenses in Source columns lists all the licences
found in the actual source code of the library in the form of file
headers and license files. The next columns for the GAV parameters
allow you to identify the artifact. The last column Security Issues
displays an indicator for potentially existing security issue for the
same artifact.

[[fig-rhc-detail-license-list]]
.The License Data in the Detailed Repository Health Check Report
image::figs/web/rhc-detail-license-list.png[scale=40]

Nexus will report all artifacts in the local storage of the respective
repository in the detail panel. This means that at some stage
a build running against your Nexus instance required these artifacts
and caused Nexus to download them to local storage.

To determine which project and build caused this download to be able
to fix the offending dependency by upgrading to a newer version or
removing it with an alternative solution with a more suitable license
you will have to investigate all your project.

Sonatype Insight itself helps with these tasks by enabling monitoring
of builds and products, analyzing release artifacts and creating bill
of material and other reports. 


[[settings]]
== Managing Maven Settings

[[settings-sect-intro]]
=== Introduction

Nexus Professional allows you to define templates for Maven Settings
and use Nexus as a way to distribute updates to a global Maven
Settings template. When you move an organization to a repository
manager such as Nexus, one of the constant challenges is keeping
everyone's Maven Settings synchronized.

If a Nexus administrator makes a change which requires every developer
to modify his or her ~/.m2/settings.xml file, this feature can be used
to manage the distribution of Maven Settings changes to the entire
organization. Once you have defined a Maven Settings template in Nexus
Professional, developers can then use the Nexus Maven plugin to
retrieve the new Maven Settings file directly from Nexus Professional.


[[settings-sect-install]]
=== Manage Maven Settings Templates

To manage Maven Settings templates, click on Maven Settings in the
Enterprise section of the Nexus menu on the left side of the Nexus
UI. Clicking on Maven Settings will load the panel shown in <<fig-settings-maven-settings>>.

[[fig-settings-maven-settings]]
.The Maven Settings Panel
image::figs/web/settings_managing-templates.png[scale=60]

The Maven Settings panel allows you to add, delete, and edit a Maven
Settings template. The default template has an id of "default" and is
read-only, it contains the recommended settings for a standard Nexus
installation. To create a new Maven Settings template, click on the
Add...  button and select "Settings Template". Once the new template
is created, assign a name to the template in the Template ID text
input and click the Save button.

To edit a template, click on a template that has a User Managed value
of true, and edit the template in the Settings Templated panel. Once
you are finished editing the template, click Save to save the
template. When editing the template, the following variables can be
used and will be replaced with their values at request time:

baseurl::  the base URL of the Nexus installation.
userId::   the user id of the user that is generating a Maven Settings file from this template.
userToken:: the formatted user token composed of name code, ':' and
pass code.
userToken.nameCode:: the name code part of the user token
userToken.passCode:: the pass code part of the user token

An example usage of baseurl and user token in a settings
template follows:

----
<settings>
  <servers>
    <server>
      <id>nexus</id>
      <!-- User-token: ${userToken} -->
      <username>${userToken.nameCode}</username>
      <password>${userToken.passCode}</password>
    </server>
  </servers>
  <mirrors>
    <mirror>
     <id>nexus</id>
      <mirrorOf>*</mirrorOf>
      <url>${baseurl}/content/groups/public</url>
    </mirror>
...
----

To preview a Maven Settings template, click on the Template URL in the
table of Maven Settings templates. Clicking on this URL will load a
dialog window which contains the Maven Settings file generated from
this template. This rendered view of the Maven Settings template will
have all variable references replaced using the current context of the
user. The property replacement can be running on the Nexus server side
as done in the dialog or when used with the Nexus Maven Plugin on the
client side as well. Server side replacement uses the standard Maven
syntax of '${property.name}' using curly braces, while client side
replacement uses '$[property.name]' with square braces.

Client side properties supported by the Nexus Maven Plugin are

- userToken
- userToken.encrypted
- userToken.nameCode
- userToken.nameCode.encrypted
- userToken.passCode
- userToken.passCode.encrypted

Maven itself supports 

- server.password
- server.passphrase
- proxy.password

Using client side interpolation is useful when using 
http://maven.apache.org/guides/mini/guide-encryption.html[Maven
master-password encryption] with the master keyword in
'settings-security.xml' or in general when Maven and the Nexus Maven
Plugin are used to download the setting. In this use case the '.encrypted'  values
should be used like this

----
<server>
  <id>nexus-client-side-interp-encrypted</id>
  <!-- User-token: $[userToken.encrypted] -->
  <username>$[userToken.nameCode.encrypted]</username>
  <password>$[userToken.passCode.encrypted]</password>
</server>
----

which will result in values using the encrypted value syntax based on
the master keyword similar to e.g.

----
<server>
  <id>nexus-client-side-interp-encrypted</id>
  <!-- User-token: {2Sn+...} -->
  <username>{3HQg...}</username>
  <password>{fsx2f...}</password>
</server>
----

Server side interpolation takes effect even when the download of the
settings template is done with tools like curl.

[[settings-sect-downloading]]
=== Downloading Maven Settings with the Nexus Maven Plugin

Once you have defined a set of Maven templates, you can use the Nexus
Maven plugin to distribute changes to the Maven Settings file to the
entire organization.

==== Running the Nexus Maven Plugin

To invoke goals in the Nexus Maven plugin, you will initially have to
use a fully qualified groupId and artifactId as shown in
<<ex-qualified-nexus-plugin>>.

[[ex-qualified-nexus-plugin]]
.Invoking the Nexus Maven Plugin goal settings-download with a fully qualified groupId and artifactId
----
mvn org.sonatype.plugins:nexus-maven-plugin:settings-download
----

To be able to invoke the plugin with the simple identifier "nexus" as
shown in <<ex-short-nexus-plugin>>, you have to add the appropriate
plugin group to your Maven Settings file as shown in
<<ex-settings-nexus-plugin-group>>. An initial invocation of the
settings-download goal will update your settings file, with a template
from Nexus Professional. Every default template in Nexus Professional
adds the org.sonatype.plugins group to the pluginGroups, so you will
not have to do this manually. It is essential that you make sure that
any new, custom templates also include this plugin group
definition. Otherwise, there is a chance that a developer could update
his or her Maven Settings and lose the ability to use the Nexus Maven
plugin with the short identifier.

[[ex-short-nexus-plugin]]
.Invoking the Nexus Maven Plugin goal settings-download with a short identifier
----
mvn nexus:settings-download
----

[[ex-settings-nexus-plugin-group]]
.Adding org.sonatype.plugins to pluginGroups in Maven Settings
----
<settings>
  ...
  <pluginGroups>
    <pluginGroup>org.sonatype.plugins</pluginGroup>
  </pluginGroups>
  ...
</settings>
----

The "settings-download" goal of the Nexus Maven Plugin downloads a
Maven Settings file from Nexus Professional and stores it on a local
machine. This goal can be configured to update a user's
~/.m2/settings.xml file or the global configuration file which is
stored in the Maven installation directory. If you are replacing a
Maven Settings file, this goal can be configured to make a backup of
an existing Maven Settings file.

==== Configuring Nexus Maven Plugin for Settings Management

The Settings Management goal in the Nexus Maven plugin requires
security credentials and a base URL for the Nexus server you are
interacting with. You can specify security credentials by supplying a
username and password or by supplying a server id that corresponds to
a server in your Maven Settings (~/.m2/settings.xml). The common
configuration parameters and security configuration properties are:

nexusURL:: Points to the Nexus server installation's base URL. If you
have installed Nexus on your local machine, this would be
http://localhost:8081/nexus/

username:: Username to use for authenticating to Nexus. Default value
is $user.name.

password:: Password to use for authenticating to Nexus

serverAuthId:: You should specify either username and password or the
serverAuthId. If you specify a value for serverAuthId, the Nexus Maven
plugin is going to look at the contents of your ~/.m2/settings.xml
file and use the username and password from a server definition.

In most cases a valid user login will be required to access your
settings templates. By default, if you don't specify the nexusURL and
password parameters, the plugin will prompt you for them. If you don't
specify the username parameter, the Java System property
$user.name will be used.

In addition to these security options, all of the Maven
Settings management goals have the following configuration
parameters:

verboseDebug:: If verboseDebug is set to true Maven will print out
debug messages that detail the plugin's interaction with Nexus.

backupFormat:: When backing up an existing settings.xml file, use this
date format in conjunction with SimpleDateFormat to construct a new
filename of the form: settings.xml.$(format). Date stamps are used for
backup copies of the settings.xml to avoid overwriting previously
backed up settings files. This protects against the case where the
download mojo is used multiple times with incorrect settings, where
using a single static backup-file name would destroy the original,
pre-existing settings. Default value is: yyyyMMdd_HHmmss.

destination:: The standard destination where the downloaded
settings.xml template should be saved. If the destination is "global",
the Nexus Maven plugin will save the Maven Settings file to
$M2_HOME/conf. Is the destination is "user", the Nexus Maven plugin
will save the Maven Settings file to ~/.m2/settings.xml. If the target
parameter is set, it will override this value. Default value is: user.

doBackup:: If true and there is a pre-existing settings.xml file in
the way of this download, backup the file to a date-stamped filename,
where the specific format of the date-stamp is given by the
backupFormat parameter. Default value is: true.

encoding:: Use this parameter to define a non-default encoding for the
settings file.

target:: If set, ignore the standard location given by the destination
parameter, and use this file location to save the settings template
instead. If this file exists, it will be backed up using the same
logic as the standard locations (using the doBackup and backupFormat
parameters).

url:: The full URL of a settings template available from a particular
Nexus Professional instance. If missing, the mojo will prompt for this
value.

==== Downloading Maven Settings

To download Maven Settings from Nexus Professional, you will
need to know the URL of the Maven Settings template. If you omit this
URL on the command-line, the Nexus Maven plugin will prompt you for a
URL when it is executed:

----
$ mvn org.sonatype.plugins:nexus-maven-plugin:settings-download
[INFO] [nexus:settings-download]
Settings Template URL: \
.../nexus/service/local/templates/settings/default/content
[INFO] Existing settings backed up to: \
/Users/tobrien/.m2/settings.xml.20090408_204422
[INFO] Settings saved to: /Users/tobrien/.m2/settings.xml
----

Alternatively, you can specify the username, password, and URL on
the command line.

----
$ export NX_URL="http://localhost:8081/nexus/"
$ mvn org.sonatype.plugins:nexus-maven-plugin:settings-download \
-Durl=${NX_URL}/service/local/templates/settings/default/content \
-Dusername=admin \
-Dpassword=admin123</screen>
----

[[osgi]]
== OSGi Bundle Repositories

[[osgi-sect-intro]]
=== Introduction

Nexus Professional supports the OSGi Bundle Repository format. The
OSGi Bundle format is defined by the http://www.osgi.org/Download/File?url=/download/rfc-0112_BundleRepository.pdf[OSGi
RFC 112 "Bundle Repository"]. It is a format for the
distribution of OSGi "bundles" which includes any components that are
described by the OSGi standards set forth in RFC 112. An OBR
repository has a single XML file which completely describes the
contents of the entire repository.  Nexus Professional can read this
OBR repository XML and create proxy repositories which can download
OSGi bundles from remote OBR repositories.  Nexus Professional can
also act as a hosting platform for OSGi bundles, you can configure
your builds to publish OSGi bundles to Nexus Professional, and then
you can expose these bundle repositories to internal or external
developers using Nexus Professional as a publishing and distribution
platform.

Nexus Professional can also act as a bridge between Maven repositories
and OSGi bundle repositories. When you configure a virtual OBR
repository which uses a Maven 2 repository as a source repository,
Nexus Professional will expose artifacts with the appropriate metadata
from the Maven repository as OSGi bundles. In this way, you can unify
your OSGi and non-OSGi development efforts and publish artifacts with
the appropriate OSGi metadata to Nexus Professional. Non-OSGi clients
can retrieve software artifacts from a Maven repository, and
OSGi-aware clients can retrieve OSGi bundles from a virtual OBR
repository.  

The following sections detail the procedures for creating and managing
OBR repositories.

[[osgi-sect-proxy]]
=== Proxy OSGi Bundle Repositories

Nexus can proxy an OSGi Bundle Repository, using the OBR
repository XML as the remote storage location. To create a new proxy OBR
repository:

. Login as an Administrator.

. Click Repositories in the Left Navigation Menu.

. Click the Add.. button above the list of Nexus repositories,
and choose Proxy repository from the drop-down of repository
types.

. In the New Proxy Repository window,

.. Select OBR as the Provider.

.. Supply an id and a repository name.

.. Enter the URL to the remote repository OBR XML as the
Remote Storage location.

.. Click Save.

<<fig-obr-create-proxy>> provides some sample
configuration used to create a proxy of the Apache Felix OBR repository.

[[fig-obr-create-proxy]]
.Creating an OSGi Bundle Proxy Repository
image::figs/web/obr_create_proxy.png[scale=60]

To verify that the OBR proxy repository has been properly
configured, you can then load the OBR XML from Nexus Professional. If
Nexus Professional is properly configured, you will be able load the
obr.xml by navigating to the
obr.xml
directory:

----
$curl http://localhost:8081/nexus/content/repositories/felix-proxy/.meta/obr.xml
<?xml version='1.0' encoding='utf-8'?>
<?xml-stylesheet type='text/xsl' href='http://www2.osgi.org/www/obr2html.xsl'?>
<repository name='Felix OBR Repository' lastmodified='1247493075615'>
    <resource id='org.apache.felix.javax.servlet/1.0.0' 
              presentationname='Servlet 2.1 API' 
              symbolicname='org.apache.felix.javax.servlet' 
    uri='../bundles/org.apache.felix.javax.servlet-1.0.0.jar' 
              version='1.0.0'>
        <description>
            Servlet 2.1 API
        </description>
        <documentation>
            http://www.apache.org/
        </documentation>
        <license>
            http://www.apache.org/licenses/LICENSE-2.0.txt
        </license>
        ...
----

[[osgi-sect-hosted]]
=== Hosted OSGi Bundle Repositories

Nexus can host an OSGi Bundle Repository, providing you
with a way to publish your own OBR bundles. To create an OBR hosted
repository:

. Login as an Administrator.

. Click Repositories in the Left Navigation Menu.

. Click the Add.. button above the list of Nexus repositories,
and choose Hosted repository from the drop-down of repository
types.

. In the New Hosted Repository window,

.. Select OBR as the Provider.

. Supply an id and a repository name.

. Click Save.

<<fig-obr-create-hosted>> provides some sample
configuration used to create a hosted OBR repository.

[[fig-obr-create-hosted]]
.Creating a Hosted OSGi Bundle Repository
image::figs/web/obr_create_hosted.png[scale=60]

[[osgi-sect-virtual]]
=== Virtual OSGi Bundle Repositories

Nexus Professional can also be configured to convert a
traditional Maven repository into an OSGi Bundle repository using a
virtual OBR repository. To configure a virtual OBR repository:

. Login as an Administrator.

. Click Repositories in the Left Navigation Menu.

. Click the Add.. button above the list of Nexus repositories,
and choose Virtual repository from the drop-down of repository
types.

. In the New Virtual Repository window,

.. Select OBR as the Provider.

.. Select another repository's ID in the Source Nexus
Repository ID drop-down

.. Supply an id and a repository name.

.. Click Save.

The next figure provides some sample
configuration used to create a virtual OBR repository which transforms
the proxy repository for Maven Central into an OBR repository.

[[fig-obr-create-virtual]]
.Creating a Virtual OSGi Bundle Repository from a Maven Repository
image::figs/web/obr_create_virtual.png[scale=60]

[[osgi-sect-grouping]]
=== Grouping OSGi Bundle Repositories

Just like Nexus can group Maven repositories, Eclipse update
sites, and P2 repositories, Nexus can also be configured to group OSGi
Bundle Repositories. To group OSGi bundle repositories:

. Login as an Administrator.

. Click Repositories in the Left Navigation Menu.

. Click the Add.. button above the list of Nexus repositories, and
choose Repository Group from the drop-down of repository types.

. In the New Repository Group window,

.. Select OBR Group as the Provider.

.. Drag and drop one or more hosted, proxy, or virtual OSGi
Bundle repositories into the new group.

.. Supply an id and a repository name.

.. Click Save.

<<fig-obr-create-group>> shows an example of the a
new repository group which contains a hosted OSGi Bundle repository, a
virtual OSGi Bundle repository, and a OSGi Bundle proxy repository.

[[fig-obr-create-group]]
.Creating a new OSGi Bundle Repository Group
image::figs/web/obr_create_group.png[scale=60]

[[p2]]
== P2 Repositories

[[p2-sect-intro]]
=== Introduction

Nexus Professional supports the P2 Repository format. The P2
repository format is a provisioning platform for Eclipse
components. For more information about the P2 repository format, see
the http://wiki.eclipse.org/Equinox/p2[Equinox P2 documentation] on
the Eclipse Wiki.

The following sections detail the procedures for creating and managing
P2 repositories.

=== Proxy P2 Repositories

Nexus can proxy a P2 Repository. To create a new proxy P2
repository:

. Login as an Administrator.

. Click Repositories in the Left Navigation Menu.

. Click the Add.. button above the list of Nexus repositories,
and choose Proxy repository from the drop-down of repository
types.

. In the New Proxy Repository window,

.. Select P2 as the Provider.

.. Supply an id and a repository name.

.. Enter the URL to the remote P2 repository as the Remote
Storage location.

.. Click Save.

<<fig-p2-create-proxy>> provides some sample
configuration used to create a proxy of the Indigo Simultaneous Release P2
repository.

[[fig-p2-create-proxy]]
.Creating a P2 Proxy Repository
image::figs/web/p2-create-proxy.png[scale=60]

=== Grouping P2 Repositories

Just like Nexus can group Maven repositories and OBR
repositories, Nexus can also be configured to group P2 Repositories. To
group P2 repositories:

. Login as an Administrator.

. Click Repositories in the Left Navigation Menu.

. Click the Add.. button above the list of Nexus repositories, and
choose Repository Group from the drop-down of repository types.

. In the New Repository Group window,

.. Select P2 as the Provider.

.. Drag and drop one or more P2 repositories into the new
group.

.. Supply an id and a group name.

.. Click Save.

<<fig-p2-create-group>> shows an example of a
repository group which contains two P2 proxy repositories.

[[fig-p2-create-group]]
.Creating a new P2 Repository Group
image::figs/web/p2_create_group.png[scale=60]

[[nuget]]
== .NET Package Repositories

=== Introduction

With the recent creation of the http://nuget.org/[NuGet] project a
package management solution for .NET developers has become
available. Similar to Maven dependency management for Java developers,
NuGet makes it easy to add, remove and update libraries and tools in
Visual Studio projects that use the .NET Framework. 

The project websites at http://nuget.org[nuget.org] and
http://nuget.codeplex.com[nuget.codeplex.com] host tool downloads,
detailed documentation as well as links to further resources and
provide a repository and features to upload your open source NuGet
packages. With the NuGet Gallery a repository of open source libraries
and tools is available and the need for repository management arises.

Nexus supports the NuGet repository format for hosted and proxy
repositories. Nexus also supports aggregation of NuGet repositories
and conversion of other repositories containing ".nupkg" artifacts
to the NuGet format. This allows you to improve collaboration and
control while speeding up .NET development facilitating open source
libraries and sharing of internal artifacts across teams. When you
standardize on a single repository for all your development and use it
for internal artifacts as well you will get all the benefits of Nexus
when working in the .NET architecture.

To share a library or tool with NuGet you create a NuGet package and
store it in the Nexus based NuGet repository. Similarly you can use
packages others have created and made available in their NuGet
repository by proxying it or downloading the package and installing it
in your own hosted repository for third party packages.

The NuGet Visual Studio extension allows you to download the package
from the repository and install it in your Visual Studio project or
solution. NuGet copies everything and makes any required changes to
your project setup and configuration files. Removing a package will
clean up any changes as required.

[[nuget-nuget_proxy_repositories]]
=== NuGet Proxy Repositories

To proxy an external NuGet repository you simply create a new Proxy
Repository as documented in <<confignx-sect-manage-repo>>. The
Provider has to be set to NuGet. The Remote Storage Location has to be
set to the source URL of the repository you want to proxy.

A complete configuration for proxying nuget.org is visible in
<<fig-nuget-proxy-org>>.

[[fig-nuget-proxy-org]]
.NuGet Proxy Repository Configuration for nuget.org
image::figs/web/nuget-proxy-org.png[scale=60]

The source URL for the main NuGet.org repository is

----
http://nuget.org/api/v2/
----

The repository configuration for a NuGet proxy repository has an
additional tab titled NuGet as visible in
<<fig-nuget-gallery-package-source>>, which displays the Nexus URL at
which the repository is available as a NuGet repository.

[[fig-nuget-gallery-package-source]]
.NuGet Gallery with Package Source URL
image::figs/web/nuget-gallery-package-source.png[scale=60]


When creating a NuGet proxy repository a Scheduled Task is
automatically created to download the index data about the content of
the remote NuGet repository. This task is available in the Scheduled
Tasks administration section and by default created for a daily
schedule. To modify the task access it via the Administration panel in
the left hand navigation area and the Scheduled Tasks menu item. The
task will be using the name of the proxy repository with (NuGet Feed)
appended. A user interface as displayed in
<<fig-nuget-scheduled-task>> will allow you to adjust the task as
desired.

[[fig-nuget-scheduled-task]]
.NuGet Proxy Repository Scheduled Task
image::figs/web/nuget-scheduled-task.png[scale=60]

The default task incrementally downloads information about the latest
version of published packages. If you want details about all versions
you can select the Fetch All Versions checkbox, save the updated
configuration and manually trigger the Scheduled Task.

Deleting the proxy repository will remove the scheduled task.

[[nuget-nuget_hosted_repositories]]
=== NuGet Hosted Repositories

A hosted repository for NuGet can be used to upload your own
packages as well as third party packages. It is good practice to
create two separate hosted repositories for these purposes.

To create a NuGet hosted repository simply create a new Hosted
Repository and set the Provider to NuGet. A sample configuration for an
internal releases NuGet hosted repository is displayed in
<<fig-nuget-hosted-releases-configuration>>.

[[fig-nuget-hosted-releases-configuration]]
.Example Configuration for a NuGet Hosted Repository for Release Packages
image::figs/web/nuget-hosted-releases-configuration.png[scale=60]

Besides the NuGet tab the configuration for the repository has
a NuPkg Upload tab as displayed in <<fig-nuget-hosted-nupkg-upload>>,
that allows you to manually upload one or multiple packages.

[[fig-nuget-hosted-nupkg-upload]]
.The NuPkg Upload Panel for a Hosted NuGet Repository
image::figs/web/nuget-hosted-nupkg-upload.png[scale=60]

The NuGet feed is immediately updated as packages are deployed or
deleted from the host repository. If for some reason you ever need to
rebuild the feed for a hosted NuGet repository you can manually
schedule a Rebuild NuGet Feed task.

=== NuGet Virtual Repositories

If you have deployed NuGet packages to a Maven repository in the past
you can expose them to Visual Studio by creating a Virtual repository
and setting the Format to NuGet Shadow Repository. The setup displayed
in <<fig-nuget-virtual-releases>> shows a virtual repository set up to
expose the content of the regular Maven Releases repository in the
form of a NuGet repository, so that NuGet can access any NuGet
packages deployed to the releases repository.

[[fig-nuget-virtual-releases]]
.A Virtual NuGet Repository for the Maven Releases Repository
image::figs/web/nuget-virtual-releases.png[scale=60]

The NuGet feed is immediately updated as packages are deployed or
deleted from the shadowed repository. If for some reason you ever need
to rebuild the feed for a virtual NuGet repository you can manually
schedule a Synchronize Shadow Repository task.

[[nuget-nuget_group_repositories]]
=== NuGet Group Repositories

A repository group allows you to expose the aggregated content of
multiple proxy and hosted repositories with one URL to your
tools. This is possible for NuGet repositories by creating a new
Repository Group with the Format set to NuGet.

A typical useful example would be to group the proxy repository that
proxies nuget.org, an internal releases NuGet hosted repository and a
third party Nuget hosted repository. The configuration for such a
setup is displayed in <<fig-nuget-group>>.

[[fig-nuget-group]]
.A Public Nuget Group Combining a Proxy and Two Hosted Repositories
image::figs/web/nuget-group.png[scale=60]

Using the Repository Path of the repository group as your NuGet
repository URL in your client tool will give you access to the
packages in all three repositories with one URL.

[[nuget-accessing_packages_in_repositories_and_groups]]
=== Accessing Packages in Repositories and Groups

Once you have set up you hosted and proxy repositories for NuGet
packages and potentially created a group you can access them with the
nuget tool on the command line. Copy the Package Source url from the
NuGet tab of the repository/group configuration you want to access and
add it to nuget on the command line with e.g.:

----
nuget sources add -name NuGetNexus -source http://localhost:8081/nexus/service/local/nuget/nuget-public
----

Replace localhost with the public hostname or url of your Nexus server
and nuget-public with the name of the repository you want to
proxy. Ideally this will be your NuGet group.

After this source was added you can list the available packages with 
----
nuget list
----

[[nuget-deploying_packages_to_nuget_hosted_repositories]]
=== Deploying Packages to NuGet Hosted Repositories

In order to authenticate a client against a NuGet repository NuGet uses
an API key for deployment requests. These keys are generated separately
on-request from a user account on the NuGet gallery and can be
re-generated at any time. At regeneration all previous keys generated
for that user are invalid.

==== Creating a NuGet API-Key

For usage with Nexus, API keys are only needed when packages are going
to be deployed. Therefore API key generation is by default not exposed
in the user interface to normal users. Only users with the Deployer
role have access to the API keys.

Other users that should be able to access and create an API key have
to be given the Nexus API-Key Access role in the Users Security
administration user interface.

In addition the NuGet API-Key Realm has to be activated. To do this,
simply add the realm to the selected realms in the Security Settings
section of the Server Administration.

Once this is set up you can view, as well as reset, the current
Personal API Key in the NuGet tab of any NuGet proxy or hosted
repository as visible in <<fig-nuget-api-key>>

[[fig-nuget-api-key]] 
.Viewing and Resetting the NuGet API Key in the NuGet Configuration Tab
image::figs/web/nuget-api-key.png[scale=60]

==== Creating a Package for Deployment

Creating a package for deployment can be done with the pack command of
the nuget command line tool or within Visual Studio. Detailed
documentation can be found on the http://docs.nuget.org/[NuGet
website].

==== Deployment with the NuPkg Upload User Interface

Manual upload of one or multiple packages is done on the NuPkg Upload
tab of the repository displayed in
<<fig-nuget-hosted-nupkg-upload>>. Press the Browse button to access
the package you want to upload on the file system and press Add
Package. Repeat this process for all the packages you want upload and
press Upload Package(s) to complete the upload.

==== Command line based Deployment to a Nexus NuGet Hosted Repository

The nuget command line tool allows you to deploy packages to a
repository with the push command. The command requires you to use the
API Key and the Package Source path. Both of them are available in the
NuGet tab of the hosted NuGet repository you want to deploy to. Using
the delete command of nuget allows you to remove packages in a similar
fashion.


Further information about the command line tool is available in the
http://docs.nuget.org/docs/reference/command-line-reference[on-line
help].

[[nuget-integration_of_nexus_nuget_repositories_in_visual_studio]]
=== Integration of Nexus NuGet Repositories in Visual Studio

In order to access a Nexus NuGet repository or preferable all Nexus
NuGet repositories exposed in a group you provide the Repository Path
in the Visual Studio configuration for the Package Sources of the
Package Manager as displayed in
<<fig-nuget-visualstudio-packageoptions>>.

[[fig-nuget-visualstudio-packageoptions]]
.Package Source Configuration for the Package Manager in Visual Studio to Access A Nexus NuGet Repository Group
image::figs/web/nuget-visualstudio-packageoptions.png[scale=60]

With this configuration in place all packages available in your Nexus
NuGet repository will be available in the Package Manager in Visual
Studio ready for install.

[[sites]]
== Deploying Sites to Nexus

[[sites-sect-intro]]
=== Introduction

Nexus Professional provides a new hosted repository type: a Maven Site
repository. This repository can be used to hold a Maven-generated web
site. This chapter details the process of configuring a Maven Site
repository and configuring a simple Maven project to publish a
Maven-generated project site to an instance of Nexus Professional.

=== Creating a New Maven Project

In this chapter, you will be creating a simple Maven project with a
simple web site that will be published to a Nexus Professional Maven
Site repository. To create a new Maven project, use the archetype
plugin's archetype:generate goal on the command line, and supply the
following identifiers:

* groupId: org.sonatype.books.nexus

* artifactId: sample-site

* version: 1.0-SNAPSHOT

* package: org.sonatype.books.nexus

----
~/examples$ mvn archetype:generate
[INFO] [archetype:generate {execution: default-cli}]
[INFO] Generating project in Interactive mode
Choose archetype:
1: internal -> appfuse-basic-jsf 
...
13: internal -> maven-archetype-portlet (A simple portlet application)
14: internal -> maven-archetype-profiles ()
15: internal -> maven-archetype-quickstart ()
...
Choose a number:  (...14/15/16...) 15: : 15
Define value for groupId: : org.sonatype.books.nexus
Define value for artifactId: : sample-site
Define value for version:  1.0-SNAPSHOT: : 1.0-SNAPSHOT
Define value for package:  org.sonatype.books.nexus: : org.sonatype.books.nexus
Confirm properties configuration:
groupId: org.sonatype.books.nexus
artifactId: sample-site
version: 1.0-SNAPSHOT
package: org.sonatype.books.nexus
Y: : 
[INFO] Parameter: groupId, Value: org.sonatype.books.nexus
[INFO] Parameter: packageName, Value: org.sonatype.books.nexus
[INFO] Parameter: package, Value: org.sonatype.books.nexus
[INFO] Parameter: artifactId, Value: sample-site
[INFO] Parameter: basedir, Value: /private/tmp
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] OldArchetype created in dir: /private/tmp/sample-site
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 23 seconds
[INFO] Finished at: Sat Oct 03 07:09:49 CDT 2009
[INFO] Final Memory: 13M/80M
[INFO] ------------------------------------------------------------------------
----

After running the archetype:generate command you
will have a new project in a sample-site/
sub-directory.


=== Configuring Maven for Site Deployment

To deploy a site to a Nexus Professional Maven Site repository, you
will need to configure the project's distribution management settings,
add site deployment information, and then update your Maven settings
to include the appropriate credentials for Nexus.

----
~/examples$ cd sample-site
~/examples/sample-site$ more pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.sonatype.books.nexus</groupId>
  <artifactId>sample-site</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>sample-site</name>
  <url>http://maven.apache.org</url>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>
----

Add the following section to sample-site/pom.xml after the
dependencies element.  This section will tell Maven where to publish
the Maven-generated project web site:

[[ex-sites-dist-man]]
.Distribution Management for Site Deployment to Nexus
----
<distributionManagement>
  <site>
    <id>nexus-site</id>
    <url>dav:http://localhost:8081/nexus/content/sites/site/</url>
  </site>
</distributionManagement>
----

NOTE: In <<ex-sites-dist-man>>, there is a Nexus
Professional installation running on localhost port 8081. In your
environment you will need to customize this URL to point to your own
Nexus instance.

In addition to the distributionManagement element, you will want to
add the following build element that will configure Maven to use
version 2.0.1 of the Maven Site plugin.

.Configuring the Maven Site Plugin for Nexus Site Deployment
----
<build>
  <plugins>
    <plugin>
      <artifactId>maven-site-plugin</artifactId>
      <version>2.0.1</version>
    </plugin>
  </plugins>
</build>
----

NOTE: Site deployment to Nexus Professional requires version 2.0.1 or
higher of the Maven Site Plugin.

=== Adding Credentials to Your Maven Settings

When the Maven Site plugin deploys a site to Nexus, it will need to
supply the appropriate deployment credentials to Nexus. To configure
this, you will need to add credentials to your Maven Settings.  Open
up your ~/.m2/settings.xml and add the following server configuration
to the servers element. If you already have a servers element, just
add a new server element with the appropriate id, and password

[[ex-sites-deploy-credentials]]
.Configuring Deployment Credentials for Nexus Site Deployment
----
<settings>
  <servers>
    <server>
      <id>nexus-site</id>
      <username>deployment</username>
      <password>deployment123</password>
    </server>
  </servers>
</settings>
----

NOTE: <<ex-sites-deploy-credentials>>, uses the default
deployment user and the default deployment user password. You will need
to configure the username and password to match the values expected by
your Nexus installation.

=== Creating a Maven Site Repository

To create a Maven Site Repository, log in as a user with
Administrative privileges, and click on "Repositories" under
Views/Repositories in the Nexus menu. Under the Repositories tab, click on
the Add... drop-down and choose "Hosted Repository" as shown in <<fig-sites-add-hosted>>.

[[fig-sites-add-hosted]]
.Adding a Hosted Repository
image::figs/web/sites-add-hosted.png[scale=60]

In the New Hosted Repository form, click on the Repository Type
drop-down and chose the Maven Site Repository format as shown in
<<fig-sites-new-site-repo>>. Although you can use any arbitrary name
and identifier for your own Nexus repository, for the chapter's
example, use a Repository ID of "site" and a Repository Name of "Maven
Site".

[[fig-sites-new-site-repo]]
.Creating a New Maven Site Repository
image::figs/web/sites-new-repo.png[scale=60]

After creating a new Maven Site repository, it should appear in the
list of Nexus repositories as shown in <<fig-sites-newly-created>>. Note that the Repository Path
shown in <<fig-sites-newly-created>>, is the same as
the repository path referenced in <<ex-sites-dist-man>>.

[[fig-sites-newly-created]]
.Newly Created Maven Site Repository
image::figs/web/sites-new-repo-listed.png[scale=60]

=== Add the Site Deployment Role

In the Maven Settings shown in <<ex-sites-deploy-credentials>>, you configured your Maven
instance to use the default deployment user and password. To
successfully deploy a site to Nexus, you will need to make sure that
the deployment user has the appropriate role and permissions. To add
the site deployment role to the deployment user, click on Users under
the Security section of the Nexus menu, and then highlight the
deployment user as shown in <<fig-sites-add-role>>.

[[fig-sites-add-role]]
.Adding the Site Deployment Role to the Deployment User
image::figs/web/sites-deploy-role.png[scale=60]

Locate the "Repo: All Maven Site Repositories (Full Control)" role in
the Available Roles list, click this role, and drag it over to the
Selected Roles list. Once the role is in the Selected Roles list,
click on the Save button to update the roles for the deployment
user. The deployment user will now have the ability to publish sites
to a Maven Site repository.

=== Publishing a Maven Site to Nexus

To publish a site to a Maven Site repository in Nexus Professional,
run mvn site site:deploy from the sample-site/ project created earlier
in this chapter.  The Maven Site plugin will deploy this site to Nexus
using the credentials stored in your Maven Settings.

----
~/examples/sample-site$ mvn site site:deploy
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building sample-site
[INFO]    task-segment: [site, site:deploy]
[INFO] ------------------------------------------------------------------------
[INFO] [site:site {execution: default-site}]
[INFO] Generating "About" report.
[INFO] Generating "Issue Tracking" report.
[INFO] Generating "Project Team" report.
[INFO] Generating "Dependencies" report.
[INFO] Generating "Project Plugins" report.
[INFO] Generating "Continuous Integration" report.
[INFO] Generating "Source Repository" report.
[INFO] Generating "Project License" report.
[INFO] Generating "Mailing Lists" report.
[INFO] Generating "Plugin Management" report.
[INFO] Generating "Project Summary" report.
[INFO] [site:deploy {execution: default-cli}]
http://localhost:8081/nexus/content/sites/site/ - Session: Opened  
Uploading: ./css/maven-base.css to http://localhost:8081/nexus/content/sites/site/

#http://localhost:8081/nexus/content/sites/site//./css/maven-base.css \
- Status code: 201

Transfer finished. 2297 bytes copied in 0.052 seconds
Uploading: ./css/maven-theme.css to http://localhost:8081/nexus/content/sites/site/

#http://localhost:8081/nexus/content/sites/site//./css/maven-theme.css \
- Status code: 201

Transfer finished. 2801 bytes copied in 0.017 seconds

Transfer finished. 5235 bytes copied in 0.012 seconds
http://localhost:8081/nexus/content/sites/site/ - Session: Disconnecting  
http://localhost:8081/nexus/content/sites/site/ - Session: Disconnected
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 45 seconds
[INFO] Finished at: Sat Oct 03 07:52:35 CDT 2009
[INFO] Final Memory: 35M/80M
[INFO] ------------------------
----

Once the site has been published, you can load the site in a browser
by going to http://localhost:8081/nexus/content/sites/site/

.Sample Site Maven Project Web Site
image::figs/web/sites-sample-site.png[scale=60]



[[bundles]]
== Artifact Bundles

=== Introduction

Artifact bundles are groups of related artifacts which are all related
by the same groupId, artifactId, and version (GAV) coordinate. They
are used by projects that wish to upload artifacts to the 
Central Repository.

Bundles must contain the following POM elements:

* modelVersion
* groupId
* artifactId
* packaging
* name
* version
* description
* url
* licenses
* scm
** url
** connection

=== Creating an Artifact Bundle from a Maven Project

Artifact bundles are created with the Maven Repository Plugin. For
more information about the Maven Repository plugin, see
http://maven.apache.org/plugins/maven-repository-plugin/

<<ex-bundles-sample-pom>>, lists a project's POM which
satisfies all of the constraints that are checked by the Maven
Repository plugin. The following POM contains, a description and a
URL, SCM information, and a reference to a license. All of this
information is required before an artifact bundle can be published to
the Maven Central repository.

[[ex-bundles-sample-pom]]
.Sample POM Containing all Required Bundle Elements
----
<project xmlns="http://maven.apache.org/POM/4.0.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.sonatype.sample</groupId>
  <artifactId>sample-project</artifactId>
  <packaging>jar</packaging>
  <version>1.0</version>
  <name>sample-project</name>
  <description>A Sample Project for the Nexus Book</description>
  <url>http://books.sonatype.com</url>
  <licenses>
    <license>
      <name>The Apache Software License, Version 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
      <distribution>repo</distribution>
    </license>
  </licenses>
  <scm>
    <connection>
      scm:git:git://github.com/sonatype/sample-project.git
    </connection>
    <url>scm:git:git://github.com/sonatype/sample-project.git</url>
    <developerConnection>
      scm:git:git://github.com/sonatype-sample-project.git
    </developerConnection>     
  </scm>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>
----

To create a bundle from a Maven project, run the
repository:bundle-create goal. This goal will check the POM to see if
it complies with the standards for publishing a bundle to a public
repository, it will then bundle all of the artifacts are generated by
a particular build. To build a bundle that only contains the standard,
unclassified artifact from a project, run mvn
repository:bundle-create. To generate a bundle which contains more
than one artifact, run mvn javadoc:jar source:jar
repository:bundle-create

----
~/examples/sample-project$ mvn javadoc:jar source:jar repository:bundle-create
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'javadoc'.
[INFO] ------------------------------------------------------------------------
[INFO] Building sample-project
[INFO]    task-segment: [javadoc:jar, source:jar, repository:bundle-create]
[INFO] ------------------------------------------------------------------------
[INFO] [javadoc:jar {execution: default-cli}]
Loading source files for package com.sonatype.sample...
Constructing Javadoc information...
Standard Doclet version 1.6.0_15
Building tree for all the packages and classes...
...
[INFO] Preparing source:jar
[INFO] No goals needed for project - skipping
[INFO] [source:jar {execution: default-cli}]
...
-------------------------------------------------------
T E S T S
-------------------------------------------------------
Running com.sonatype.sample.AppTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.03 sec

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO] [jar:jar {execution: default-jar}]
[INFO] Building jar: ~/temp/sample-project/target/sample-project-1.0.jar
[INFO] [repository:bundle-create {execution: default-cli}]
[INFO] The following files are marked for inclusion in the repository bundle:

0.) Done
1.) sample-project-1.0.jar
2.) sample-project-1.0-javadoc.jar
3.) sample-project-1.0-sources.jar

Please select the number(s) for any files you wish to exclude, or '0' when \
you're done.  Separate the numbers for multiple files with a comma (',').

Selection: 
0
[INFO] Building jar: ~/temp/sample-project/target/sample-project-1.0-bundle.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 11 seconds
[INFO] Finished at: Sat Oct 10 21:24:23 CDT 2009
[INFO] Final Memory: 36M/110M
[INFO] ------------------------------------------------------------------------
----

Once the bundle has been created, there will be a bundle JAR in the
target/ directory. As shown in the following command
output, the bundle JAR contains: a POM, the project's unclassified
artifact, the javadoc artifact, and the sources artifact.

----
~/examples/sample-project$ cd target
~/examples/sample-project/target$ jar tvf sample-project-1.0-bundle.jar 
0 Sat Oct 10 21:24:24 CDT 2009 META-INF/
98 Sat Oct 10 21:24:22 CDT 2009 META-INF/MANIFEST.MF
1206 Sat Oct 10 21:23:46 CDT 2009 pom.xml
2544 Sat Oct 10 21:24:22 CDT 2009 sample-project-1.0.jar
20779 Sat Oct 10 21:24:18 CDT 2009 sample-project-1.0-javadoc.jar
891 Sat Oct 10 21:24:18 CDT 2009 sample-project-1.0-sources.jar
----

[[bundles-sect-uploading]]
=== Uploading an Artifact Bundle to Nexus

To upload an artifact bundle to Nexus Professional, select Staging
Upload from the Enterprise section of the Nexus menu as shown in
<<fig-bundles-upload-link>>.

[[fig-bundles-upload-link]]
.Staging Upload Link
image::figs/web/bundles-upload-link.png[scale=60]

Selecting the Staging Upload link will load the Staging Upload
dialog. Choose Artifact Bundle form the Upload Mode drop-down the
Staging Upload panel will switch to the form shown in
<<fig-bundles-staging-upload>>.  Click on Select Bundle to
Upload... and then select the JAR that was created with the Maven
Repository plugin used in the previous sections.  Once a bundle is
selected, click on Upload Bundle.

[[fig-bundles-staging-upload]]
.Uploading an Artifact Bundle
image::figs/web/bundles-staging-upload.png[scale=60]

After uploading the Artifact Bundle, click on the Staging link in the
Enterprise section of the Nexus menu as shown in
<<fig-bundles-upload-link>>.  Click on Staging will load a list of all
the defined staging profiles. Click on the first default profiles
named "Release Staging Profile", and you should see that the Staging
Artifact Upload created and closed a new staging repository as shown
in <<fig-bundles-staged-bundle>>. This repository contains all of the
artifacts contained in the uploaded bundle. It allows you to promote
or drop the artifacts contained in a bundle as a single unit.

[[fig-bundles-staged-bundle]]
.Staging Repository Created for Artifact Bundle Upload
image::figs/web/bundles-staged-bundle.png[scale=60]

To promote a staging repository, right click on the closed repository
shown in <<fig-bundles-staged-bundle>>, and select "Promote". Once you
select promote, Nexus will present the Promote Staged Repository
dialog shown in <<fig-bundles-stage-promote>>. Select the repository
that you want to published the staging repository to, and click on the
Promote button.

[[fig-bundles-stage-promote]]
.Promoting a Staged Repository
image::figs/web/bundles-stage-promote.png[scale=60]

After promotion, Nexus will then display a confirmation that the
promotion was completed successfully as shown in
<<fig-bundles-stage-success>>.

[[fig-bundles-stage-success]]
.Confirmation that Staged Repository has been Promoted
image::figs/web/bundles-stage-success.png[scale=60]


[[best]]
== Nexus Best Practises

[[best-sect-intro]]
=== Introduction

Once you decide to install a Repository Manager, the next decision is
how to setup your repositories, particularly if you have multiple
teams sharing the same instance. Nexus is very flexible in this area
and supports a variety of configurations. I'll first describe the
options and then discuss the thought process used to decide what makes
sense for your organization.

[[best-sect-per]]
=== Repositories per Project/Team

The first and most obvious way to support multiple teams is to
configure a pair of repositories per team (one release, one snapshot).
The team is then given the appropriate C.R.U.D. permissions and they
are able to use the system for their artifacts.

Our http://oss.sonatype.org instance is for the most part configured
in this manner, where each project like Jetty has their own
repositories separate from everyone else.

[[best-sect-shared]]
=== Partition Shared Repositories

Another option is to have a single (or a few) pair of Release/Snapshot
repositories for your entire organization. In this case, the access is
controlled by a mechanism we call "Repository Targets."

Simply put, a Repository Target is a way to manage a set of artifacts
based on their paths. A Repository Target is simply a list of regular
expressions and a Name. For example, a Repo Target for Maven would be
"./org/apache/maven/. and Nexus OSS would be "./org/sonatype/nexus/."

NOTE: While it is most common to manage artifacts based on the path of
their groupId, the Regular Expression is matched against the entire
path, and so it is also possible, for example, to define "Sources" as
".*-sources.jar" … it's also worth noting that Repository Targets are
not mutually exclusive. It is perfectly valid for a given path to be
contained by multiple targets.

In this model, you would create a Repo Target for each project in your
system. You are then able to take the Repo Target and associate it
with one or more Repositories or Groups in your system. When you do
this, new, specific, C.R.U.D. privileges are created. For example, I
could take the Maven Repo target, associate it with my Release and
Snapshot repository, and now I get privileges I can assign to Create,
Read, Update, Delete "Maven" (./org/apache/maven/.) artifacts in my
Release and Snapshot repositories.

This method is used to manage the http://repository.apache.org
instance, where we have just one Release and Snapshot repository and
each project team gets permissions to their artifacts based on the
path.

==== Selecting an Approach

First of all, these choices aren't mutually exclusive. In fact, the
first option builds upon the default Repository Target of ".*" which
simply gives you access to all artifacts regardless of the path. You
still associate the default Repo Target with specific repositories to
create the assignable privileges

In general, it's my opinion that fewer repositories will scale better
and are easier to manage. It's also easier to start off with a single
pair of repositories, with the default "All M2″ (.*) target and simply
refine the permissions as you scale. Most things that are configured
per repository (Cache, Storage location, Snapshot purging, etc) will
generally be applicable for all projects, so this mode avoids the
duplication of these tasks. Since everything will be stored together
in a single folder on disk, it makes backups easier as well.

The reasons why you would want multiple sets of repositories is
essentially the opposite of above: If you need different expiration,
Snapshot purging or storage folders, then a single shared repo won't
work.  Replication and fail-over strategies may also make this method
easier to support. If you absolutely must maintain total separation
between Project teams, i.e. they can't read each other's artifacts,
then this solution might be more applicable as well. (but is still
possible with Repo Targets…just grant Read to only the appropriate
targets)

In Summary, Nexus allows you to control the security of your artifacts
based on the repository and/or the path of the artifact, meaning it is
possible to slice and dice the system any way you see fit. My default
position is to use a few Hosted Repositories as possible and control
the permissions by the Repository Target.


[[plugins]]
== Using Nexus Plugins

Nexus Open Source and Nexus Professional are built using a plugin
architecture, where Professional simply includes additional
plugins. Besides the default installed plugins you can install optional
plugins shipped with Nexus as well as plugins you or somebody else
created.
 
[[install-additional-plugins]]
=== Installing Additional Plugins

Optional plugins supplied by Sonatype can be found in the directory
+++$NEXUS_HOME/nexus/WEB-INF/optional-plugins+++. To install any of
these simply copy the folder containing the desired plugin into
+++$NEXUS_HOME/nexus/WEB-INF/plugin-repository+++. 

WARNING: When updating Nexus you will have to redo the install of any
optinal plugins using the newest version shipping with the download of
the new Nexus version. Any configuration of the plugin will be
preserved from one version to the other.

Plugins supplied by third parties like the
http://code.google.com/p/nexus-yum-plugin/[Nexus Yum Plugin] and
others, are installed by copying the folder with the plugin code into
+++sonatype-work/nexus/plugin-repository+++.

After a restart of Nexus the new plugins will be active and ready
to use. Upgrades are done by simply copying over the newer plugin and
removing the older one.

Plugins can be removed by deleting the respective folder in the
plugin-repository and restarting Nexus.

[[nexus-outreach-plugin]]
=== Nexus Outreach Plugin

The Nexus Outreach Plugin is installed by default in Nexus Open Source
and Nexus Professional. It allocates space in the user
interface left navigation and welcome page for linking to further
documentation and support resources. This data is retrieved from Sonatype
servers.

In a case where this outgoing traffic from your Nexus instance or the
resulting documentation and links are not desired, the plugin can be
safely removed without any other negative side effects. To do so
simply remove the 'nexus-outreach-plugin-X.Y.Z' folder in
'$NEXUS_HOME/nexus/WEB-INF/plugin-repository/' and restart your Nexus
instance.

[[custom-metadata-plugin]]
=== Custom Metadata Plugin

The custom metadata plugin is an optional plugin that comes as part of
any Nexus download. It allows you to view, edit and search for
additional metadata about any artifact in your Nexus repositories.

The directory containing the plugin code is called
nexus-custom-metadata-plugin-X.Y.Z. Install the plugin following the
instructions in <<install-additional-plugins>>.

==== Viewing Artifact Metadata

The Custom Metadata Plugin gives you the ability to view artifact
metadata. When browsing repository storage or a repository index,
clicking on an artifact will load the Artifact Information panel.
Selecting the Artifact Metadata tab will display the interface shown
in <<fig-using-viewing-metadata>>.

[[fig-using-viewing-metadata]]
.Viewing Artifact Metadata
image::figs/web/meta_existing-meta-value.png[scale=60]

Artifact metadata consists of a key, a value, and a namespace.
Existing metadata from an artifact's POM is given a urn:maven
namespace, and custom attributes are stored under the urn:nexus/user
namespace.

==== Editing Artifact Metadata

The Custom Metadata Plugin gives you the ability to add custom
attributes to artifact metadata. To add a custom attribute, click on
an artifact in Nexus, and select the Artifact Metadata tab. On the
Artifact Metadata tab, click on the Add... button and a new row will
be inserted into the list of attributes. Supply a key and value and
click the Save button to update an artifact's
metadata. <<fig-using-editing-metadata>> shows the Artifact Metadata
panel with two custom attributes: "approvedBy" and "approved".

[[fig-using-editing-metadata]]
.Editing Artifact Metadata
image::figs/web/meta_setting-meta-value.png[scale=60]

==== Searching Artifact Metadata

The Custom Metadata Plugin provides you with the ability to configure
custom artifact metadata and search for artifacts with specific
metadata. To search for artifacts using metadata, click on the
Advanced Search link directly below the search field in the Nexus
application menu to open the Search panel. Once in the search panel,
click on the Keyword Search and click on Metadata Search in the search
type drop-down as shown in <<fig-using-search-metadata>>.

[[fig-using-search-metadata]]
.Searching Artifact Metadata
image::figs/web/meta_search-selection.png[scale=60]

Once you select the Metadata Search you will see two search fields and
an operator drop-down. The two search fields are the key and value of
the metadata you are searching for. The key corresponds to the key of
the metadata you are searching for, and the value contains the value
or value range you are searching for. The operator drop-down can be set
to Equals, Matches, Bounded, or Not Equal.

.Metadata Search Results for Custom Metadata
image::figs/web/meta_search-function.png[scale=60]

Once you locate a matching artifact in the Metadata Search interface,
click on the artifact and then select the Artifact Metadata to examine
an artifacts metadata as shown in <<fig-using-search-metadata-results>>.

[[fig-using-search-metadata-results]]
.Metadata Search Results for Custom Metadata
image::figs/web/meta_search-result-0.png[scale=60]


[[user-account]]
=== User Account Plugin

Nexus Professional's User Account Plugin allows anonymous users to
sign-up for a Nexus account without administrative intervention.  This
"self-serve" capability for user account creation is especially
important when an open source project is using Nexus as a primary
means for distribution. In such an environment, there may be hundreds
of Nexus users who all need a basic level of read-only access, and
making these users wait for an administrator to create an account
makes little sense. In such a setting, anyone can create an account,
activate the account via a verification email, and then access a
repository with a default level of access you can
define.

[[user-account-sect-installation]]
==== Installing the User Account Plugin

The user account plugin is an optional plugin that comes as part of the
Nexus Professional download. The directory containing the plugin code is called
nexus-user-account-plugin-X.Y.Z. Install the plugin following the
instructions in <<install-additional-plugins>>.
 
[[user-account-sect-configuring]]
==== Configuring the User Account Plugin

After a restart of Nexus the installed plugin will be available for
use but still be deactivated.  To configure the User Account Plugin,
click on Server under the Administration section of the Nexus menu,
and scroll down to the section named "User Sign Up". The User Sign Up
section is shown in <<fig-user-account-user-sign-up-preference>>.

[[fig-user-account-user-sign-up-preference]]
.Configuring the User Account Plugin
image::figs/web/user-account_user-sign-up-preference.png[scale=60]

To activate the User Sign Up feature, set the "User Sign Up" feature
to "On". This will expose a "Sign Up" link next to the "Log In" link
in the Nexus user interface. The Selected Roles in this configuration
section are the default roles assigned to users who successfully
signed up for an account.

[[user-account-sect-sign-up]]
==== Signing Up for an Account

Once User Sign Up has been activated via the Server settings as shown
in <<user-account-sect-configuring>>, users will see a Sign Up link
next to the Log In link in the Nexus interface. Clicking on this Sign
Up link will display the Nexus Sign Up dialog shown in
<<fig-user-account-sign-up-form>>. This form accepts a username,
password, the first and last name of the new user, and an email account. It also
asks the users to type in some text from a captcha form element. If a
user cannot read the text in the captcha, they can click on the
captcha to refresh it with new text.

[[fig-user-account-sign-up-form]]
.Nexus Sign Up Form
image::figs/web/user-account_sign-up-form.png[scale=60]

Once the new user clicks on the Sign Up button, they will receive a
confirmation dialog which instructs them to check for an activation
email.

[[fig-user-account-sign-up-confirm]]
.Nexus Sign Up Confirmation
image::figs/web/user-account_sign-up-succeed.png[scale=60]

The user will then receive an email containing an activation
link. When a user signs up for a Nexus account, the newly created
account is disabled until they click on the activation link contained
in this email. A sample of the activation email is shown in <<fig-user-account-activation-email>>.

[[fig-user-account-activation-email]]
.Nexus Activation Email
image::figs/web/user-account_activation-email.png[scale=60]

Upon successful login from the activation email link, the user will be
directed to the Summary panel of the users Profile.

NOTE: The example activation email in <<fig-user-account-activation-email>>, points to
localhost:8081. You can change this URL by changing the Base URL
setting in the Application Server Settings section of the Server
configuration.  To change this setting, click on the Server link under
Administration in the Nexus menu.

[[user-account-sect-manual-activate]]
==== Manual Activation of New Users

If a user does not receive the activation email after signing up for a
new account, an Administrator may need to manually activate a new
user. To do this, go to the list of Nexus users by clicking on the
Users link under Security in the Nexus menu. Locate and select the new
user in the list of Nexus users, and change the Status from Disabled
to Enabled as shown in <<fig-user-account-activation>>.

[[fig-user-account-activation]]
.Manually Activating a Signed Up User
image::figs/web/user-account_sign-up-admin-activate.png[scale=60]

[[user-account-sect-default-user]]
==== Modifying Default User Permissions

The default user permissions in the User Sign Up feature only includes
"UI: Base UI Privileges". If a user signs up with just this simple
permission, the only thing they will be able to do is login, change
their password, and logout. <<fig-user-account-base-ui>>, shows the
interface a user would see after logging in with only the base UI
privileges.

[[fig-user-account-base-ui]]
.User Interface with only the Base UI Privileges
image::figs/web/user-account_sign-up-default-permissions.png[scale=40]

To provide some sensible default permissions, click on the Server
under the Administration section of the Nexus menu and scroll down to
the User Sign Up section of the Server settings. Make sure that the
selected default roles for new users contain some ability to browse,
search, and view repositories.

[[fig-user-account-default-roles]]
.Selecting Default Roles for New Users
image::figs/web/user-account_sign-up-more-default-permissions.png[scale=60]

WARNING: <<fig-user-account-default-roles>> shows a
default User Sign Up role containing the Nexus Deployment Role. If
your server were available to the public this wouldn't be a wise
default role as it would allow anyone to sign up for an account,
activate an account, and start publishing artifacts to hosted
repositories with little or no oversight. Such a default role may only
make sense if you are running an internal, corporate instance of Nexus
Professional and you are comfortable granting any developer in the
organization deployment permissions.

[[crowd]]
=== Nexus Atlassian Crowd Plugin

Atlassian's Crowd is a single sign-on and identity management product
that many organizations use to consolidate user accounts and control
which users and groups have access to which applications. Nexus
Professional contains an optional security plugin that allows you to
configure Nexus to authenticate against an Atlassian Crowd
instance. For more information about Atlassian Crowd, go to
http://www.atlassian.com/software/crowd/

[[crowd-sect-installation]]
==== Installing the Crowd Plugin

The user account plugin is an otional plugin that comes as part of any
Nexus Professional download. The directory containing the plugin code
is called enterprise-crowd-plugin-X.Y.Z. Install the plugin following
the instructions in <<install-additional-plugins>>.
 
[[crowd-sect-config]]
==== Configuring the Crowd Plugin

Once the Atlassian Crowd plugin is installed, restart Nexus and login
as a user with Administrative privileges. To configure the Crowd
plugin, click on the Crowd Configuration in the Security section of
the Nexus menu as shown in <<fig-crowd-menu-link>>.

[[fig-crowd-menu-link]]
.Crowd Menu Link in the Security Section of the Nexus Menu
image::figs/web/crowd_menu-link.png[scale=60]

Clicking on the Crowd Configuration link will load the form shown in
<<fig-crowd-config>>. This configuration panel contains
all of the options that need to be configured to connect your Nexus
instance to Crowd for authorization and authentication.

[[fig-crowd-config]]
.Crowd Configuration Panel
image::figs/web/crowd_server-config.png[scale=60]

The following sections outline all of the settings in the Crowd
Configuration Pane.

[[crowd-sect-access]]
==== Crowd Access Settings

The Access Settings section of the Crowd configuration is shown in
<<fig-crowd-access-settings>>. This section contains
the following fields:

Application Name:: This field contains the application name of a Crowd
application. This value should match the value in the Name field of
the form shown in <<fig-crowd-app>>.

Application Password:: This field contains the application password of
a Crowd application. This value should match the value in the Password
field of the form shown in <<fig-crowd-app>>.

Crowd Server URL:: This is the URL of the Crowd Server, this URL
should be accessible to the Nexus process as it is the URL that Nexus
will use to connect to Crowd's SOAP services.

Authentication Interval:: This is the number of minutes that a Crowd
authentication is valid for. This value is in units of minutes, and a
value of 30 means that Nexus will only require re-authentication if
more than 30 minutes have elapsed since a previously authenticated
user has accessed Nexus.

Use Groups:: If clicked, Use Groups allows Nexus to use Crowd Groups
when calculating Nexus Roles. When selected, you can map a Nexus Role
to a Crowd Group.

[[fig-crowd-access-settings]]
.Crowd Access Settings
image::figs/web/crowd_server-config-access-settings.png[scale=60]

===== Crowd HTTP Settings

You can control the concurrency of connections to Crowd in the HTTP
Settings section shown in <<fig-crowd-http-settings>>. If you have a
high-traffic instance of Nexus, you will want to limit the number of
simultaneous connections to the Crowd server to a reasonable value
like 20. The HTTP Timeout specifies the number of milliseconds Nexus
will wait for a response from Crowd. A value of zero for either of
these properties indicates that there is no limit to either the number
of connections or the timeout.

[[fig-crowd-http-settings]]
.Crowd HTTP Settings
image::figs/web/crowd_server-config-http-settings.png[scale=60]

===== Crowd HTTP Proxy Settings

If your Nexus installation is connecting to Crowd via an HTTP Proxy
server, the HTTP Proxy Settings section of the Crowd Configuration
allows you to specify the host, port, and credentials for a HTTP Proxy
server. The HTTP Proxy Settings section is shown in <<fig-crowd-http-proxy>>.

[[fig-crowd-http-proxy]]
.Crowd HTTP Proxy Settings
image::figs/web/crowd_server-config-http-proxy.png[scale=60]

===== Miscellaneous Settings

The miscellaneous settings section shown in
<<fig-crowd-misc-settings>>, allows you to configure settings that
control the name of the Single Sign-on cookie and the various keys
that are used to retrieve values that relate to authentication and the
auth token. This dialog is only relevant if you have modified optional
Crowd settings in your $CROWD_HOME/etc/crowd.properties. For more
information about customizing these options see the
http://confluence.atlassian.com/display/CROWD/The+crowd.properties+File[Atlassian
Crowd documentation]

[[fig-crowd-misc-settings]]
.Crowd Miscellaneous Settings
image::figs/web/crowd_server-config-misc.png[scale=60]

[[crowd-sect-auth-realm]]
==== Adding the Crowd Authentication Realm

Once you have configured Nexus to connect to Crowd, you must select
the Crowd authorization realm from the list of available realms in
your Nexus Server settings. <<fig-crowd-activate-realm>>, shows the
Security settings section in the Nexus Server
configuration. To load the Nexus server configuration panel, click on
Server under Administration in the Nexus menu. Drag Crowd from the
list of available realms to the list of selected realms and then save
the Nexus server configuration.

[[fig-crowd-activate-realm]]
.Configuring the Crowd Authentication Realm
image::figs/web/crowd_activate-realm.png[scale=60]

[[crowd-sect-nx]]
==== Configuring a Nexus Application in Crowd

To connect Nexus to Atlassian's Crowd, you will need to configure
Nexus as an application in Crowd. To do this, login to Crowd as a user
with Administrative rights, and click on the Applications tab. Once
you click on this tab, you should see two options under the
Applications tab: Search Applications and Add Application. Click on
Add Application to display the form shown in <<fig-crowd-app>>, and
create a new application with the following values in the Details tab
of the Add Application form:

* Application Type: Generic Application

* Name: nexus

* Description: Sonatype Nexus Professional

Choose a password for this application. Nexus will use this password
to authenticate with the Crowd server. Click on the Next button.

[[fig-crowd-app]]
.Creating a Nexus Crowd Application
image::figs/web/crowd_new-app.png[scale=60]

Clicking on Next will advance the form to the Connection tab shown in
<<fig-crowd-app-connection>>. In this tab you need to supply the URL
Nexus and the remote IP address for
Nexus. <<fig-crowd-app-connection>>, shows the Connection form
configured for a local instance of Nexus. If you were configuring
Crowd and Nexus in a production environment, you would supply the URL
that users would use to load Nexus in a web browser and you would
supply the IP address that Nexus will be connecting from. Once you
have completed the Connection form, click on Next to advance to the
Directories form.

[[fig-crowd-app-connection]]
.Creating a Nexus Crowd Application Connection
image::figs/web/crowd_new-app-connection.png[scale=60]

Clicking on Next advances to the Directories form shown in
<<fig-crowd-app-directories>>.  In this example, the Nexus application
in Crowd is going to use the default "User Management"
directory. Click on the Next button to advance to the "Authorisation"
form.

[[fig-crowd-app-directories]]
.Creating a Nexus Crowd Application Directories
image::figs/web/crowd_new-app-directories.png[scale=60]

Clicking on the Next button advances to the "Authorisation" form shown
in <<fig-crowd-app-authorization>>. If any of the
directories selected in the previous form contain groups, each group
is displayed on this form next to a checkbox. You can select "Allow
all users" for a directory, or you can select specific groups which
are allowed to authenticate to Crowd through Nexus. This option would
be used if you wanted to limit Nexus access to specific subgroups
within a larger Crowd directory. If your entire organization is stored
in a single Crowd directory, you may want to limit Nexus access to a
group that contains only Developers and Administrators.

[[fig-crowd-app-authorization]]
.Creating a Nexus Crowd Application Authorization
image::figs/web/crowd_new-app-authorization.png[scale=60]

[[crowd-sect-mapping]]
==== Mapping Crowd Groups to Nexus Roles

To map a Crowd Group to a Nexus Role, open up the Roles panel by
clicking on the Roles link under the Security section of the Nexus
menu. Click on the Add... button and select External Role Mapping as
shown in <<fig-crowd-add-ext-role-map>>.

[[fig-crowd-add-ext-role-map]]
.Adding an External Role Mapping
image::figs/web/crowd_add-ext-role-map.png[scale=60]

Selecting External Role Mapping will show the Map External Role dialog
shown in <<fig-crowd-map-ext-role>>.

[[fig-crowd-map-ext-role]]
.Mapping an External Crowd Group to a Nexus Role
image::figs/web/crowd_map-ext-role.png[scale=60]

Once you have mapped a Crowd Group to a Nexus Role, these Roles will
appear in the list of Nexus Roles with a mapping value of "Crowd" as
shown in <<fig-crowd-mapped-rules" os=">>.

[[fig-crowd-mapped-rules]]
.Two Crowd Groups Mapped to Nexus Roles
image::figs/web/crowd_mapped-roles.png[scale=60]

[[crowd-sect-role]]
==== Adding a Crowd Role to a Nexus User

To illustrate this feature, consider the crowd-manager user with an id
of "brian". This user's groups are shown in
<<fig-crowd-view-user-groups-brian>>.

[[fig-crowd-view-user-groups-brian]]
.Crowd Groups for User "brian"
image::figs/web/crowd_view-user-groups-brian.png[scale=60]

To add an external user role mapping, open up the Users panel by
clicking on Users in the Security section of the Nexus panel. Click on
the Add... button and select External User Role Mapping from the
drop-down as shown in <<fig-crowd-add-ext-user-role-map>>.

[[fig-crowd-add-ext-user-role-map]]
.Adding an External User Role Mapping
image::figs/web/crowd_add-ext-user-role-map.png[scale=60]

Selecting External User Role Mapping will show the dialog shown in
<<fig-crowd-find-external-user" os=">>.

[[fig-crowd-find-external-user]]
.Locating a Crowd User in the User Role Mapping Dialog
image::figs/web/crowd_find-external-user.png[scale=60]

Once you locate the Crowd user that you want to add a Nexus Role
to... You can use the configuration panel shown in
<<fig-crowd-assign-user-role>>, to add a Role to the Crowd-managed
"brian" user.

[[fig-crowd-assign-user-role]]
.Adding a Nexus Role to a Crowd User
image::figs/web/crowd_assign-user-role.png[scale=60]


[[plugdev]]
== Developing Nexus Plugins

Among the many benefits of using an technology with an open source
core is the ability to customize behaviour and create extensions. To
this end, Sonatype has spent a great deal of time designing an
intuitive Plugin API that will allow you to take Nexus where you need
it to go. This chapter summarizes some of these extension points and
presents a walk through of how you would start to develop your own
Nexus plugins.

Our community has already created a number of compelling and useful
plugins, some of which have been integrated into the set of plugins
that are distributed with both Nexus Open Source and Nexus
Professional. Sonatype tried to make the Plugin API as lightweight and
extensible as possible with the following goals in mind:

* Providing a clear set of extension points for plugin developers

* Providing isolated plugin classpaths to avoid compatibility issues
between plugins and to prevent a plugin from disturbing another,
unrelated part of Nexus.

* Giving developers the ability to load and unload Nexus plugins at
runtime

[[plugdev-sect-intro]]
=== Nexus Plugins

The Nexus API is contained in a module named nexus-api. If you are
developing a Nexus plugin, you will need to familiarize yourself with
the extension points that are defined in this project.

==== Nexus Plugin API

Nexus provides an extra module for plugin developers - the
"nexus-plugin-api". This module provides some extra annotations for
plugins developers, and it allows a plugin developer to implement a
plugin without having to know anything about Plexus or Nexus
internals.

The Nexus Plugin API uses the @javax.inject.Inject annotation, an
emerging standard for dependency injection which allows Nexus plugins
to be developed in a way that is container-neutral.

The plugin API also introduces some additional annotations to make
things easier:

----
@org.sonatype.plugin.Managed
----

When a @Managed annotation is present on an interface, it marks
the interface as "component contract" (Plexus role). Any non-abstract
classes implementing it will be made managed by current
container.

----
@org.sonatype.nexus.plugins.RepositoryType
----

Used on interfaces, to mark it as new repository type, and to be
registered with other core repository types in Nexus Repository Type
Registry. It holds the basic information about the new type (the path
where to mount it).

----
@org.sonatype.nexus.plugins.RestResource
----

Used on classes, to mark them as REST Resources.

[[plugdev-sect-ext-points]]
=== Nexus Extension Points

The simplest Nexus plugin contain a single class,
SampleEventInspector, which contributes an EventInspector to the Nexus
Application. This simple event inspector will do nothing more than
print a message every time it accepts and inspects an event.

.A Simple Event Inspector
----
package org.sample.plugin;

import org.sonatype.nexus.proxy.events.EventInspector;
import org.sonatype.plexus.appevents.Event;

public class SampleEventInspector implements EventInspector {
  public boolean accepts( Event<?> evt ) {
    return true;
  }

  public void inspect( Event<?> evt ) {
    System.out.println( "Invoked with event: " +
                        evt.toString() + " with sender " +
                        evt.getEventSender().toString() );
  }
}
----

During the build of this nexus plugin, this class is compiled and then
scanned for concrete classes that implement extension point interfaces
defined in the following section. The EventInspector interface in the
nexus-api project has been marked with the @ExtensionPoint
annotation. The plugin build takes the @ExtensionPoint, @Named, and
@Inject annotations that may be present and generates a plugin
descriptor which is packaged in the plugin's JAR.

When the plugin is present in Nexus during start-up, the Nexus plugin
manager reads the plugin metadata and instantiates the appropriate
components. To implement a plugin, you simply implement some of these
interfaces.

[[plugdev-sect-extension-points]]
=== Nexus Plugin Extension Points

The following sections outline the available Nexus
extension points.

[[plugdev-sect-extension]]
=== Nexus Plugin Extension

Interface: org.sonatype.nexus.plugins.NexusPlugin

This extension component is meant to be used in Nexus plugins only. If
it is found in a plugin, it will be invoked during
install/uninstall/init phases of a plugin
installation/uninstallation/initialization. Typical usage would be a
need to perform some specific tasks on plugin install (i.e. it uses
native code to do some magic and those needs to be copied somewhere,
register them with OS, etc).

[[plugdev-sect-indexer]]
=== Nexus Index HTML Customizer

Interface: org.sonatype.nexus.plugins.rest.NexusIndexHtmlCustomizer

This extension is able to customize the "index.html" returned by
Nexus. Using this component, a plugin is able to add markup or
Javascript to the pages generated by the Nexus web application. Every
plugin that has a UI component uses this extension point to add
Javascript customizations to the interface.

[[plugdev-sect-static]]
=== Static Plugin Resources

Interface: org.sonatype.nexus.plugins.rest.NexusResourceBundle

This extension gathers and publishes static resources over HTTP.
These resources are usually JavaScript files, CSS files,
images, etc. Plugin developers do not need to use this extension
directly since some of the features it exposes are automatic for all
plugins. When the Nexus plugin manager discovers resources in plugin
JAR under the path "/static", the Plugin Manager will create a special
"plugin NexusResourceBundle" component on the fly.

If you do not want the plugin manager to automatically add a
resource bundle you can define your own resource bundle
implementation. The plugin manager will not add a resource bundle
if:

* no resources found on "/static" path within plugin classpath, or

* a user created component of NexusResourceBundle exists within plugin

The "default plugin" resource bundle component uses MimeUtil from core
to select MIME types of resources found within plugin, and will use
same path to publish them (i.e. in plugin JAR "/static/image.png" will
be published on "http://nexushost/nexus/static/image.png").

[[plugdev-sect-templates]]
=== Plugin Templates

Interface: org.sonatype.nexus.templates.TemplateProvider

Template provider is a component providing repository templates to
Nexus. Every plugin which provides a "new" repository type should add
a TemplateProvider as it is the only way to instantiate a repository
instance. The core of Nexus provides a "default" template provider
with templates for all core repository types, and all custom
repository plugins (P2, OBR) provide template providers for their
types.

[[plugdev-sect-event]]
=== Event Inspectors

Interface: org.sonatype.nexus.proxy.events.EventInspector

Event inspectors are used to inspect events in Nexus. One
example of where this extension point is used is the index generation.
To generate a Nexus index, there is an event inspector which listens
for RepositoryItemEvent subclasses and updates the index in response
to repository activity.

[[plugdev-sect-content]]
=== Content Generators

Interface: org.sonatype.nexus.proxy.item.ContentGenerator

A content generator is a component that is able to generate
content dynamically, on the fly, instead of just serving a static
resource. The content generator is registered to respond to a path
that corresponds to a file. When the resource is retrieved, Nexus
discards the file content and uses the registered content generator to
generate content. The Nexus Archetype plugin uses a content generator
to generate the archetype-catalog.xml. Every time a client requests
the archetype-catalog.xml, the archetype catalog is generated using
information from the index.

[[plugdev-sect-content-classes]]
=== Content Classes

Interface: org.sonatype.nexus.proxy.registry.ContentClass

Content class controls the compatibility between repository
types. It defines the type of content that can be stored in a
repository, and it also affects how repositories can be grouped into
repository groups. Every plugin contributing a new repository type
should provide an instance of this extension point. Nexus has a
ContentClass implementation for every core supported repository type,
and the P2 and OBR plugins define custom ContentClass
implementations.

[[plugdev-sect-storage]]
=== Storage Implementations

Interface: org.sonatype.nexus.proxy.storage.local.LocalRepositoryStorage

Interface: org.sonatype.nexus.proxy.storage.remote.RemoteRepositoryStorage

A plugin developer can override the default file-based local
repository storage and the default remote HTTP repository storage
interface. If your plugin needs to stores repository artifacts and
information in something other than a filesystem, or if your remote
repository isn't accessible via HTTP, your plugin would provide an
implementation of one of these interfaces. Nexus provides one of the
each: a file-system LocalRepositoryStorage and CommonsHttpClient 3.x
based RemoteRepositoryStorage.

[[plugdev-sect-repocust]]
=== Repository Customization

Interface: org.sonatype.nexus.plugins.RepositoryCustomizer

This extension component will be invoked during configuration of
every Repository instance, and may be used to add some "extra"
configuration to repositories. The procurement plugin uses this
mechanism to "inject" RequestProcessor that will evaluate rules before
allowing execution of request.

[[plugdev-sect-inspectors]]
=== Item and File Inspectors

Interface: org.sonatype.nexus.proxy.attributes.StorageItemInspector

Interface: org.sonatype.nexus.proxy.attributes.StorageFileItemInspector

Attribute storage ItemInspectors are able to "decorate" items in
repositories with custom attributes. Every file stored/cached/uploaded
in Nexus will be sent to these components for inspection and
potentially decoration. The StorageItemInspector will get all item
types for inspection (file, collections, links), while
StorageFileItemInspector will only get file items. Currently only one
ItemInspector is used in Nexus: the checksumming inspector, that
decorates all file items in Nexus with SHA1 checksum and stores it
into item attributes.

[[plugdev-sect-feeds]]
=== Nexus Feeds

Interface: org.sonatype.nexus.rest.feeds.sources.FeedSource

To add new RSS feeds, a plugin may provide implementation of this
extension point. Nexus provides implementation for all the "core" RSS
feeds.

[[plugdev-sect-tasks]]
=== Nexus Tasks and Task Configuration

Interface: org.sonatype.nexus.scheduling.NexusTask<T>

Interface: org.sonatype.nexus.tasks.descriptors.ScheduledTaskDescriptor

NexusTask is an extension point to implement new Nexus Scheduled
Tasks.

If a contributed task needs UI, then the plugin which provides the
NexusTask should provide a ScheduledTaskDescriptor which allows the UI
customization for the task creation and management interface.

[[plugdev-sect-appcust]]
=== Application Customization

Interface: org.sonatype.nexus.rest.NexusApplicationCustomizer

This extension component is able to intercept URLs routed in the
Nexus REST API layer.

[[plugdev-sect-reqproc]]
=== Request Processing

Interface: org.sonatype.nexus.proxy.repository.RequestProcessor

This extension point can affect how a repository reacts to an item
request.

[[plugdev-sect-archetype]]
=== Using the Nexus Plugin Archetype

To create a new Nexus Plugin, you can use the Nexus Plugin Archetype
by running archetype:generate with the following identifiers:

archetypeGroupId:: org.sonatype.nexus.archetypes
archetypeArtifactId:: nexus-plugin-archetype
archetypeVersion:: 1.2

Once you run archetype:generate, you will be prompted for the groupId,
artifactId, version, and package name for the generated project.

----
$ mvn archetype:generate -DarchetypeGroupId=org.sonatype.nexus.archetypes \
-DarchetypeArtifactId=nexus-plugin-archetype \
-DarchetypeVersion=1.2
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Maven Stub Project (No POM) 1
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] >>> maven-archetype-plugin:2.1:generate (default-cli) @ standalone-pom >>>
[INFO] 
[INFO] <<< maven-archetype-plugin:2.1:generate (default-cli) @ standalone-pom <<<
[INFO] 
[INFO] --- maven-archetype-plugin:2.1:generate (default-cli) @ standalone-pom ---
[INFO] Generating project in Interactive mode
[INFO] Archetype repository missing. Using the one from [org.sonatype.nexus.archetypes:nexus-plugin-archetype:1.2] found in catalog remote
Define value for property 'groupId': : org.sonatype.book.nexus
Define value for property 'artifactId': : sample-plugin
Define value for property 'version':  1.0-SNAPSHOT: : 
Define value for property 'package':  org.sonatype.book.nexus: : 
[INFO] Using property: nexusVersion = 1.4.1
Confirm properties configuration:
groupId: org.sonatype.book.nexus
artifactId: sample-plugin
version: 1.0-SNAPSHOT
package: org.sonatype.book.nexus
nexusVersion: 1.4.1
 Y: : 
[INFO] ----------------------------------------------------------------------------
[INFO] Using following parameters for creating project from Archetype: nexus-plugin-archetype:1.2
[INFO] ----------------------------------------------------------------------------
[INFO] Parameter: groupId, Value: org.sonatype.book.nexus
[INFO] Parameter: artifactId, Value: sample-plugin
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] Parameter: package, Value: org.sonatype.book.nexus
[INFO] Parameter: packageInPathFormat, Value: org/sonatype/book/nexus
[INFO] Parameter: package, Value: org.sonatype.book.nexus
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] Parameter: nexusVersion, Value: 1.4.1
[INFO] Parameter: groupId, Value: org.sonatype.book.nexus
[INFO] Parameter: artifactId, Value: sample-plugin
[INFO] project created from Archetype in dir: /Users/anders/dev/sample-plugin
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 54.206s
[INFO] Finished at: Thu Oct 27 11:12:13 CEST 2011
[INFO] Final Memory: 7M/265M
[INFO] ------------------------------------------------------------------------
----

Once the Archetype plugin has created the project, you will have a
project with the layout shown in <<fig-plugdev-project-layout>>.

[[fig-plugdev-project-layout]]
.Layout of a Nexus Plugin Project
image::figs/web/plugdev_filesystem.png[scale=60]

The generated project contains the following classes:

org.sonatype.book.nexus.XYVirusScanner:: An implementation of the
VirusScanner Interface

org.sonatype.book.nexus.VirusScannerRequestProcessor:: A class which
customizes the request handling process in Nexus

org.sonatype.book.nexus.VirusScannerRepositoryCustomizer:: A class
which customizes the repositories affected by the VirusScanner

org.sonatype.book.nexus.VirusScanner:: A VirusScanner interface
described in <<plugdev-sect-complex>>.

org.sonatype.book.nexus.events.InfectedItemFoundEvent:: A simple event
which is fired by the VirusScanner

[[plugdev-sect-target-version]]
=== Set the Target Nexus Version

When creating a new Nexus Plugin project with the Nexus Plugin
archetype, a default target Nexus version will be set. To change the
target Nexus version of the new Nexus Plugin project, you will need
to edit the project's POM.

Open up the POM of your Nexus Plugin and find the section that defines
properties. Here you can change the value of the nexus-version property
to target a specific Nexus version.

----
<project>
  ...
  <properties>
    <!-- Set the Nexus version here, against which you build the plugin -->
    <nexus-version>1.4.1</nexus-version>
  </properties>
  ...
</project>
----

It is also possible to override the archetype's default value of this property
during the creation of a new project. To do that, you would set the
"nexusVersion" system property value on the command-line:

----
$ mvn archetype:generate -DarchetypeGroupId=org.sonatype.nexus.archetypes \
-DarchetypeArtifactId=nexus-plugin-archetype \
-DarchetypeVersion=1.2 \
-DnexusVersion=1.9.2
----

[[plugdev-sect-building]]
=== Building a Nexus Plugin Project

To build your Nexus plugin project, just run mvn install in the newly
generated project directory. Once the build is completed, your
plugin's JAR will be available in the project's target/ folder.

The Nexus Plugin project, as created by the Nexus Plugin archetype,
depends on a number of artifacts which may not be available from the
Maven Central repository. If you experience missing artifacts during
your Nexus plugin project build, you should make sure that the
following repositories are added to your environment:

* The Sonatype Forge Repository:
  http://repository.sonatype.org/content/groups/forge

* The Codehaus Snapshot Repository:
  http://snapshots.repository.codehaus.org

If you experience any difficulty with the build, you may also want to
remove the section of the generated POM that is labelled with the
#ITSet label.

If you are using Nexus, and you have configured your build to work
against a public group, you will want to make sure that you have added
both of the repositories listed above to your public group. You will
also want to make sure that the Repository Policy setting for the
Sonatype Forge Repository is set to "Release".

[[plugdev-sect-complex]]
=== Creating a Complex Plugin

In this section, we will step through a skeletal, sample project that
implements a virus scanner plugin for Nexus. This plugin will consist
of:

* A managed "virus scanner" component

* A RequestProcessor that sends all "incoming" artifacts for scanning

* A repository customizer to inject a RequestProcessor to all proxy
  repositories

We start with creating a @Managed component contract for the
VirusScanner. While this class could just as easily be a non-managed
component, this example uses the @Managed and @Singleton annotations
to demonstrate dependency injection.

.VirusScanner Interface
----
package org.sonatype.book.nexus;

import javax.inject.Singleton;

import org.sonatype.nexus.proxy.item.StorageFileItem;
import org.sonatype.plugin.Managed;

@Managed
@Singleton
public interface VirusScanner
{
  boolean hasVirus( StorageFileItem file );
}
----

Once we have the interface for VirusScanner, we need to define a named
instance XYVirusScanner which implements the interface. The following
example shows how the @Named annotation is used to assign a name of
"XY" to this implementation.

.XYVirusScanner Implementation
----
package org.sonatype.book.nexus;

import javax.inject.Named;

import org.sonatype.nexus.proxy.item.StorageFileItem;

@Named( "XY" )
public class XYVirusScanner implements VirusScanner {

  public boolean hasVirus( StorageFileItem file ) {

    // DO THE JOB HERE
    System.out.println( "Kung Fu VirusScanner --- " +
          "scanning for viruses on item: " + file.getPath() );

    // simulating virus hit by having the filename 
    // contain the "infected" string
    return file.getName().contains( "infected" );
  }

}
----

The next class is a request processor which virus scans an artifact
before it is cached locally. If a virus is found in an artifact, this
plugin will refuse to cache the artifact and trigger an event which
will signal that a virus was found in a file item. Note the use of
@Named which assigns the name "virusScanner" to this component. Also
note the two uses of @Inject. The first use of @Inject will fetch the
default implementation of ApplicationEventMulticaster, and the second
use of @Inject will fetch the "XY" virus scanner.

.Virus Scanning Request Processor
----
package org.sonatype.book.nexus;

import javax.inject.Inject;
import javax.inject.Named;

import org.sonatype.book.nexus.events.InfectedItemFoundEvent;
import org.sonatype.nexus.proxy.ResourceStoreRequest;
import org.sonatype.nexus.proxy.access.Action;
import org.sonatype.nexus.proxy.item.AbstractStorageItem;
import org.sonatype.nexus.proxy.item.StorageFileItem;
import org.sonatype.nexus.proxy.repository.ProxyRepository;
import org.sonatype.nexus.proxy.repository.Repository;
import org.sonatype.nexus.proxy.repository.RequestProcessor;
import org.sonatype.plexus.appevents.ApplicationEventMulticaster;

@Named( "virusScanner" )
public class VirusScannerRequestProcessor
implements RequestProcessor {

  @Inject
  private ApplicationEventMulticaster applicationEventMulticaster;

  @Inject
  private @Named( "XY" )
  VirusScanner virusScanner;

  // @Inject
  // private @Named("A") CommonDependency commonDependency;

  public boolean process( Repository repository, 
                     ResourceStoreRequest request, Action action )
  {
    // Check dependency
    // System.out.println( "VirusScannerRequestProcessor " + 
               "--- CommonDependency data: " + 
               commonDependency.getData()
    // );

    // don't decide until have content
    return true;
  }

  public boolean shouldProxy( ProxyRepository repository, 
                  ResourceStoreRequest request )
  {
    // don't decide until have content
    return true;
  }

  public boolean shouldCache( ProxyRepository repository, 
                  AbstractStorageItem item )
  {
    if ( item instanceof StorageFileItem ) {
      StorageFileItem file = (StorageFileItem) item;

      // do a virus scan
      boolean hasVirus = virusScanner.hasVirus( file );

      if ( hasVirus ) {
        applicationEventMulticaster
            .notifyEventListeners( 
                new InfectedItemFoundEvent( item
                    .getRepositoryItemUid().getRepository(), 
                       file ) );
      }

      return !hasVirus;
    } else {
      return true;
    }
  }
}
----

The last extension is RepositoryCustomizer, that simply injects our
virus scanner RequestProcessor into proxy repositories only (the only
way to get an artifact into Nexus from uncontrolled Internet. Local
uploads are considered "safe" for this example). Note how the request
processor is injected into this repository customizer with @Inject and
@Named.

.The Virus Scanner Repository Customizer
----
package org.sonatype.book.nexus;

import javax.inject.Inject;
import javax.inject.Named;

import org.sonatype.configuration.ConfigurationException;
import org.sonatype.nexus.plugins.RepositoryCustomizer;
import org.sonatype.nexus.proxy.repository.ProxyRepository;
import org.sonatype.nexus.proxy.repository.Repository;
import org.sonatype.nexus.proxy.repository.RequestProcessor;

public class VirusScannerRepositoryCustomizer
     implements RepositoryCustomizer {

  @Inject
  private @Named( "virusScanner" )
  RequestProcessor virusScannerRequestProcessor;

  public boolean isHandledRepository( Repository repository ) {
    // handle proxy reposes only
    return repository.getRepositoryKind()
                  .isFacetAvailable( ProxyRepository.class );
  }

  public void configureRepository( Repository repository )
    throws ConfigurationException {
    repository.getRequestProcessors()
          .put( "virusScanner", 
                virusScannerRequestProcessor );
  }

}
----

[[plugdev-sect-descriptor]]
=== Nexus Plugin Descriptor Maven Plugin

Nexus plugins have a custom packaging "nexus-plugin" which is
introduced by the NexusPD Maven Plugin. A "nexus-plugin" packaged
plugin:

* is a plain JAR
* has a META-INF/nexus/plugin.xml embedded Nexus Plugin Metadata embedded
* has static resources embedded into the plugin JAR

The NexusPD Maven plugin introduces a new project path (i.e.
src/main/static-resources). Static resources such as JavaScript files,
images, and CSS which are referenced in

[[plugdev-sect-plugin-descriptor]]
=== The Nexus Plugin Descriptor

Every Nexus plugin has a plugin descriptor which is generated during
the build process for a plugin. This plugin descriptor is packaged
with the plugin JAR and can be found in
$basedir/target/classes/META-INF/nexus/plugin.xml

.A Nexus Plugin Descriptor
----
<plugin>
  <modelVersion>1.0.0</modelVersion>
  <groupId>org.sonatype.sample</groupId>
  <artifactId>sample-plugin</artifactId>
  <version>1.0-SNAPSHOT</version>
  <name>Nexus Plugin Archetype</name>
  <applicationId>nexus</applicationId>
  <applicationEdition>OSS</applicationEdition>
  <applicationMinVersion>1.4.0</applicationMinVersion>
</plugin>
----

If your Nexus plugin has any dependencies, they will be included in
this plugin descriptor automatically. For example, if the Nexus plugin
you were developing had a dependency on commons-beanutils version
1.8.2, your plugin descriptor will include the following
classpathDependency

----
<plugin>
  <modelVersion>1.0.0</modelVersion>
  <groupId>org.sonatype.book.nexus</groupId>
  <artifactId>sample-plugin</artifactId>
  <version>1.0-SNAPSHOT</version>
  <name>Nexus Plugin Archetype</name>
  <applicationId>nexus</applicationId>
  <applicationEdition>OSS</applicationEdition>
  <applicationMinVersion>1.4.0</applicationMinVersion>
  <classpathDependencies>
    <classpathDependency>
      <groupId>commons-beanutils</groupId>
      <artifactId>commons-beanutils</artifactId>
      <version>1.8.2</version>
      <type>jar</type>
    </classpathDependency>
  </classpathDependencies>
</plugin>
----

[[plugdev-sect-custorepo]]
=== Defining Custom Repository Types

When you need to introduce a custom repository type, you should
implement the Repository interface. The following example extends the
HostedRepository class and adds a repository type with the path prefix
"sample".

.Creating a Custom Repository Type Interface
----
package org.sample.plugin;

import org.sonatype.nexus.plugins.RepositoryType;
import org.sonatype.nexus.proxy.repository.HostedRepository;

@RepositoryType( pathPrefix="sample" )
public interface SampleRepository extends HostedRepository {
  String boo();
}
----

If you want to implement a custom repository type, you should
reference the nexus-proxy module as dependency which contains the
AbstractRepository class which is a useful super-class for repository
implementations. To implement the SampleRepository interface, you can
then extend the AbstractRepository as shown in the following example.

.Creating a Custom Repository Type Implementation
----
package org.sample.plugin;

public class DefaultSampleRepository extends AbstractRepository
    implements SampleRepository {

  .... implement it

}
----

Your newly introduced repository type will appear under
http://localhost:8081/nexus/content/sample/.



[[migrating]]
[appendix]
== Migrating to Nexus from Artifactory


[[artifactory]]
=== Migrating from Artifactory

[[artifactory-sect-introduction]]
==== Introduction

This appendix walks you through the process of using the Nexus
Migration Plugin to migrate an existing Artifactory installation to a
new Nexus installation. The Nexus Migration Plugin can read an
Artifactory System Export archive and recreate groups and repositories
based on your existing Artifactory installation. Once the migration is
completed, the Nexus Artifactory Bridge will then serve repository
artifacts to clients using a web application, exposing the same
artifacts to clients using the same URLs and repository identifier
that they referenced in your legacy Artifactory installation. This
Nexus Migration plugin offers an easy, drop-in replacement for
Artifactory.

[[artifactory-sect-create-backup]]
==== Creating an Artifactory Backup

The Nexus Migration Plugin relies on the Artifactory System Export
which is an ZIP archive containing all of the configuration and data
for an Artifactory installation. To generate this export, log in as an
administrative user in Artifactory, and click on the SystemImport
&amp; Export in the left navigation menu. Clicking on this link will
show the Entire System Export &amp; Import screen as shown in
<<fig-creating-artifactory-backup>>.

[[fig-creating-artifactory-backup]]
.Creating an Artifactory System Export
image::figs/web/artifactory_creating-backup.png[scale=60]

This appendix assumes that Artifactory has been installed in the
directory /usr/local/artifactory-2.2.5. To create a
backup ZIP archive in that same directory:

* Enter /usr/local/artifactory-2.2.5 into the Target
export dir field. If you are on a Windows platform, or if you have
installed Artifactory in a different path, enter the path at which
Artifactory is installed.

* Check the Create a zip archive (slow!)  checkbox as shown in <<fig-creating-artifactory-backup>>.

* Click the Export

When you click the Export button, Artifactory is going to create a
timestamped ZIP archive in the specified directory.  In this example,
Artifactory creates a file named
/usr/local/artifactory-2.2.5/20100222.154349.zip.
Once this step is completed, you will no longer need to run
Artifactory, and you can safely shut it down. In the next section you
will learn how to install the Nexus Migration Plugin.

[[artifactory-sect-installation]]
==== Installation of the Migration Plugin and Artifactory Bridge

The migration plugin is a free, open-source plugin that can be
downloaded by searching for the nexus-migration-plugin-packaging
artifact on https://repository.sonatype.org/
and downloading nexus-migration-plugin-packaging-x.y-webapp.zip with
the version corresponding to your Nexus version. If you are using
Nexus Professional the correct plugin can be found in the folder
/nexus/WEB-INF/optional-plugins/ of your Nexus install.

NOTE: This section assumes that you have just downloaded and installed
Nexus Open Source or Nexus Professional. If you haven't installed
Nexus, you should make a bookmark for this section and jump to <<install>>.
Once you have installed Nexus, return to this
section and install the Nexus Migration Plugin.

The following screen listing shows a series of commands which can be
used to install the Nexus Migration plugin into an existing Nexus
installation. This listing assumes that the environment variable
$NEXUS_HOME points to an existing Nexus
installation. Download the Nexus Migration plugin, copy the
distribution archive to the Nexus installation folder, and unpack
it. This archive will install the necessary applications and plugins
to enable a smooth migration from Artifactory to Nexus.

----
$ cd ${NEXUS_HOME}
$ cp nexus/WEB-INF/optional-plugins/nexus-migration-plugin-packaging-2.1-20120703.071738-259-bridge.zip nexus/WEB-INF/plugin-repository/
$ cd nexus/WEB-INF/plugin-repository/
* unzip
nexus-migration-plugin-packaging-2.1-20120703.071738-259-bridge.zip 
Archive:  nexus-migration-plugin-packaging-2.1-20120703.071738-259-bridge.zip
   creating: artifactory-bridge/
   creating: artifactory-bridge/WEB-INF/
   creating: artifactory-bridge/WEB-INF/lib/
...
* rm nexus-migration-plugin-packaging-2.1-20120703.071738-259-bridge.zip
----

Once the Nexus Migration plugin has been installed, start up Nexus and
go to the Nexus URL. If you are just setting up Nexus, and you've
skipped the installation chapter, the default Nexus URL is
http://localhost:8081/nexus and the default administrative
username/password combination is "admin" and "admin123". If the Nexus
Migration Plugin is installed properly, you should see the Artifactory
Import link under Administration in the Nexus application menu as
shown in <<fig-artifactory-import-panel>>.

[[fig-artifactory-import-panel]]
.Artifactory Import Panel from the Nexus Migration Plugin
image::figs/web/artifactory_after-installation.png[scale=60]

[[artifactory-sect-importing]]
==== Importing an Artifactory System Backup

To import the backup created in <<artifactory-sect-create-backup>>, enter the path to the
Artifactory system backup archive in the Artifactory Import panel as
shown in <<fig-artifactory-import-backup>>. This path
references a filesystem path on the same server that is running Nexus.

NOTE: Please note that the filesystem path in Step 1 of the
Artifactory Import process references a path on the same server that
is running Nexus. This field is not a file upload field, and you are
not uploading the Artifactory System Backup archive from your local
machine to the server. The Artifactory system export archive can be
rather large, and the assumption of the Nexus Migration plugin is that
you are installing Nexus on the same server that had previously run
Artifactory. If you are not installing Nexus on the same server, you
must upload the Artifactory System Backup ZIP file to the Nexus server
prior to typing in the filesystem path shown in <<fig-artifactory-import-backup>>.

[[fig-artifactory-import-backup]]
.Specifying the Artifactory System Backup Path
image::figs/web/artifactory_import-artifactory-backup.png[scale=60]

Click the Import button, and Nexus will then examine the Artifactory
System Backup archive and populate fields in Step 2 of the Artifactory
Import panel.

[[artifactory-sect-configuring]]
==== Configuring the Artifactory Import

Once the System Backup has been imported, the Nexus Migration plugin
will populate the Groups, Repositories, and Users tables in Step 2 of
the Artifactory Import panel as shown in <<fig-artifactory-configuring-import>>. These tables and form
elements allow you to customize which repositories and groups are
going to be imported into Nexus and how Nexus will configure
corresponding repositories. The following sections describe each of
these configuration tables in detail.

[[fig-artifactory-configuring-import]]
.Configuring the Artifactory Import
image::figs/web/artifactory_customer-import-step2.png[scale=60]

[[artifactory-sect-configuring-groups]]
==== Configuring Artifactory Group Imports

The groups table displays all of the groups contained in the
Artifactory system backup. By default, all groups are selected. If you
wish to omit an Artifactory group from the import process, deselect
the checkbox for that group in the Import column. Each group's content
type resolution is shown in the Content Type Resolution
column. Changing the content type resolution will control how Nexus
configures the Nexus Group that corresponds to each Artifactory Group.

[[fig-artifactory-configuring-groups]]
.Configuring Artifactory Group Imports
image::figs/web/artifactory_groups-content-type.png[scale=60]

[[fig-artifactory-config-repository-imports]]
==== Configuring Artifactory Repository Imports

The second table in Step 2 of the Artifactory Import panel is the
Repositories panel. In this panel you can select repositories to
import and also configure how Artifactory proxy repositories would be
mapped to Nexus proxy repository with matching canonical URLs. Each
row in the Repositories table contains the following columns:

Import:: This column contains a simple checkbox. If the checkbox is
checked, the repository will be imported into Nexus. If the checkbox
is not check, the Nexus Migration plugin will omit the repository from
the import process.

Repository ID:: This is the repository identifier from
Artifactory. This column cannot be edited.

Type:: This is the type of the repository being imported. Hosted
repositories in Artifactory will be imported as hosted repositories in
Nexus. Proxy repositories in Artifactory will be imported as proxy
repositories in Nexus unless they are merged with an existing proxy
repository.

Map URLs:: Since Nexus is a drop-in replacement for Artifactory, the
Nexus Migration Plugin gives you the option to Map the legacy
Artifactory URLs to the newer Nexus URLs. Checking this box will tell
the Nexus Migration plugin to create the appropriate URL mappings to
allow clients to interact with the newly created Nexus repositories
via the legacy Artifactory URLs.

Copy Cached Artifacts:: Checking this box will tell the Nexus
Migration plugin to copy the cache contents of a proxy repository to
the newly created Nexus repository. Leaving this box unchecked will
tell the Nexus Migration plugin to only copy the configuration for a
proxy repository.

Releases/Snapshots:: This allows you to customize the Repository
Policy in a newly created Nexus repository. If you want a hosted or
proxy repository to serve only release or snapshot versions, select
the corresponding value in the drop-down. If you want a host or proxy
repository to serve both release and snapshot versions, select both in
this drop-down list. If you want Nexus to use the type implied by the
Artifactory repository, don't select a value in this drop-down.

////
[[fig-artifactory-configuring-repo]]
.Configuring Repositories for Artifactory Import
image::figs/web/artifactory_repository-releases-snapshots.png[scale=60]
////

Merge With:: If an Artifactory proxy repository has a canonical URL
which matches the canonical URL of an existing Nexus repository, you
can merge this proxy repository into the existing Nexus proxy
repository. Most people running the Artifactory Import process will
likely have a repo1 proxy repository in Artifactory for the
Maven Central repository and a central proxy repository in
Nexus for the Maven Central repository. As both of these repositories
have the same URL, the Nexus Migration plugin will show a checkbox in
the Merge With column as shown in <<fig-artifactory-merge-with>>. Checking this box will
instruct the Nexus Migration plugin to merge the contents and
configuration of the repo1 repository with the existing
central repository. In other words, if this box is checked,
the Nexus Migration plugin will not create a new proxy repository for
repo1, and if the box isn't checked, the Nexus Migration
plugin will create new proxy repository for repo1

[[fig-artifactory-merge-with]]
.Merging a Proxy Repository During Artifactory Import
image::figs/web/artifactory_merging-proxy-repos.png[scale=60]

[[artifactory-sect-config-users-privs]]
==== Configuring Users and Privileges in the Artifactory Import

The Users table shown in <<fig-artifactory-configuring-users>> allows you to select
which users are imported into Nexus from the Artifactory system backup
archive. The columns in the User table are:

Import:: If the checkbox in this column is selected, the Artifactory
user will be imported into Nexus, if the box is not selected this user
will not be imported into Nexus.

User ID:: This is the User identifier from Artifactory, this field
cannot be edited.

Email:: This is the email of a User, this field cannot be edited.

Admin:: If this checkbox is selected, Nexus will associate the newly
imported user with the Nexus Administrator role.

[[fig-artifactory-configuring-users]]
.Configuring Users During Artifactory Import
image::figs/web/artifactory_user-import.png[scale=60]

Just below the Users table is the Import Permissions checkbox. If this
checkbox is selected, Nexus will attempt to import Artifactory
privileges into Nexus and map the corresponding roles and privileges
to the imported users.

[[artifactory-sect-perform-import]]
==== Performing the Artifactory Import

Once the Artifactory import has been configured, click on the Start
Import button at the bottom of the Artifactory Import panel. Clicking
on the Start Import button will show you the warning dialog shown in
<<fig-artifactory-loading-warning>>.

[[fig-artifactory-loading-warning]]
.Loading Artifactory Configuration Warning
image::figs/web/artifactory_warning-long-time.png[scale=60]

If you are migrating a large Artifactory installation, the loading
process could take a significant amount of time. If you are
comfortable with your import configuration, click on the Yes
button. Clicking on the Yes button will then cause Nexus to display
the dialog shown in <<fig-artifactory-import-scheduled>>.

[[fig-artifactory-import-scheduled]]
.Artifactory Import Scheduled Dialog
image::figs/web/artifactory_import-scheduled.png[scale=60]

This dialog informs you that the import is scheduled to start as soon
as possible using the Nexus scheduled Job execution infrastructure.
You can check on the progress of the import process by clicking on the
Show Log button at the bottom of the Artifactory Import panel or by
clicking on Logs and Config Files under the
Views/Repositories menu and selecting the migration.log file
from the "Select a document..."  drop-down. The migration log is shown
in <<fig-artifactory-migration-log>>.

[[fig-artifactory-migration-log]]
.Viewing the Migration Logs
image::figs/web/artifactory_migration-log.png[scale=60]

[[artifactory-sect-bridge]]
==== Configuring Artifactory Clients to Use Nexus

Nexus is a drop-in replacement for Artifactory, this means that you
don't need to reconfigure your project's settings.xml and repository
elements throughout your POMs to start using Nexus. When you installed
the Nexus Migration plugin, you also installed a web application
called the Artifactory Bridge which should be running under the
context path /artifactory next to the /nexus application. If you run
Nexus at the default http://localhost:8081/nexus/ URL, the artifactory
bridge will be running at http://localhost:8081/artifactory/

This Artifactory Bridge will serve repository metadata and artifacts
from Nexus under the same URLs that your existing Artifactory clients
expect. When you were configuring your repositories during the
Artifactory Import in <<fig-artifactory-config-repository-imports>>, you'll
remember that there was a column named Map URL check box for a
repository instructed the Nexus Migration plugin to configure a
mapping between the old Artifactory URL and repository identifier and
the new Nexus URL and repository identifier.

To see this mapping in action, take a look at the Central repository
through three different URLs. This example assumes that you mapped
your old repo1 Artifactory proxy repository to the Nexus central proxy
repository. Let's take a quick look at the URL for metadata.xml for
the nexus-index artifact which is under the group identifier
org.sonatype.nexus. To retrieve this directly from the Maven Central
repository, you would use the following URL:

----
http://repo1.maven.org/maven2/\
org/sonatype/nexus/nexus-indexer/maven-metadata.xml
----

To retrieve the same file from the Nexus central proxy of the Maven
Central repository, you would use the following URL which contains the
new Nexus repository identifier "central":

----
http://localhost:8081/nexus/content/repositories/central/\
org/sonatype/nexus/nexus-indexer/maven-metadata.xml
----

To retrieve the same file from the Artifactory Bridge, you would use
the following URL which contains the old Artifactory repository
identifier "repo1":

----
http://localhost:8081/artifactory/repo1/\
org/sonatype/nexus/nexus-indexer/maven-metadata.xml
----

The configuration for these mappings is stored in
sonatype-work/nexus/conf/mapping.xml. This is an XML file which was
configured during the import that maps the old Artifactory repository
identifiers to the new Nexus repository identifiers. The Artifactory
Bridge web application is configured in $NEXUS_HOME/conf/plexus.xml
contains a reference to the web application and also configures the
context-path /artifactory

[[archiva]]
=== Migrating from Archiva

[[archiva-sect-introduction]]
==== Introduction

This appendix walks you through the process of migrating an
existing Archiva installation to a new Nexus installation.

[[archiva-sect-migrepo]]
==== Migrating Archiva Repositories

Archive uses the filesystem to store hosted repositories and
proxied repositories, because of this migrating from Archiva to Nexus
couldn't be simpler. The following sections outline the process for
migrating existing Archiva repositories to a new Nexus instance.

[[archiva-sect-migrating-managed]]
==== Migrating an Archiva Managed Repository

Archiva Managed Repositories are the equivalent of Nexus
Hosted repositories. To migrate a Managed Repository from Archiva to
Nexus, all you need to do is:

* Create a New Hosted Repository in Nexus

* Copy the Contents of the Archiva Managed Repository to the Storage
Directory of the newly-created Nexus Hosted Repository

* Rebuild the Index for the New Nexus Hosted Repository

The following example will walk through the process of migrating the
Archiva repository named "internal" to a new Nexus Hosted repository
named "internal". To view your managed repositories in Archiva, login
to Archiva as an administrative user and click on the "Repositories"
link in the left-hand navigation menu. Clicking on "Repositories" will
list all of your Archiva Managed repositories as shown in <<fig-archiva-managed>>.

[[fig-archiva-managed]]
.Archiva Managed Repositories
image::figs/web/archiva-managed-repositories.png[scale=60]

To migrate this Managed repository to a Nexus Hosted repository, you
will need to find the directory in which Archiva stores all of the
repository artifacts. to do this, click on the Edit link listed next
to the name of the repository you want to migrate as shown in <<fig-archiva-managed>>.
Click on Edit should load the form shown in <<fig-archiva-managed-edit>>.

[[fig-archiva-managed-edit]]
.Editing an Archiva Managed Repository
image::figs/web/archiva-managed-repo-edit.png[scale=60]

Take note of the file path for Directory. The file path shown in <<fig-archiva-managed-edit>> is
./data/repositories/internal. If Archiva is installed in
/usr/local/archiva-1.2.1, this would correspond to the
directory
/usr/local/archiva-1.2.1/data/repositories/internal.  You
will use this path later in this section to copy the contents of your
old Archiva Managed Repository to your new Nexus Hosted Repository.

Next, create a new Nexus repository with the same identifier and Name
as the old Archiva Managed Repository. To do this, log into Nexus as
an administrative user, click on Repositories in the left-hand Nexus
navigation menu, and then click on the Add drop-down as shown in
<<fig-archiva-new-nexus-hosted>>. Select "Hosted Repository"
and then fill out the Repository ID and Repository Name to match the
name of the old Archiva repository. If you are migrating a Snapshot
repository, select a Repository Policy of Snapshot, and if you are
migrating a Release repository select a Snapshot Policy of Release.

[[fig-archiva-new-nexus-hosted]]
.Creating a Nexus Hosted Repository
image::figs/web/archiva-new-nexus-hosted.png[scale=60]

Now, you'll need to copy the Archiva repository to the Nexus
repository. You can do this, by copying the contents of the Archiva
repository directory to the Nexus repository storage directory. If we
assume that Archiva is install in /usr/local/archiva-1.2.1, Nexus is
install in /usr/local/nexus-1.3.6, and the Sonatype Work directory is
/usr/local/sonatype-work. You can copy the contents of the Archiva
managed repository to the new Nexus hosted repository by executing the
following command:

----
$ cp -r /usr/local/archiva-1.2.1/data/repositories/internal/* \
/usr/local/sonatype-work/nexus/storage/internal/
----

If you are migrating to a Nexus instance which is on a different
server, you can simply create an archive of the
/usr/local/archiva-1.2.1/data/repositories/internal directory, copy it
to the new server, and then decompress your repository archive in the
appropriate directory.

WARNING: Archiva stores artifacts from proxied remote repositories in
the same directory as artifacts in a managed repository. If you have
been proxying a remote repository, you might want to remove artifacts
that have been proxied from a remote repository. For example, if your
organization uses a groupId of org.company for internal project, you
can make sure to only copy the artifacts under the corresponding
org/company/

Once the contents of the repository have been copied to the Nexus
Hosted repository, you must rebuild the repository index as shown in
<<figu-archiva-nx-hosted-idx>>. Right-clicking on the
repository in the list of Nexus repositories will display the context
menu shown in the following figure.

[[figu-archiva-nx-hosted-idx]]
.Rebuilding the Index of a Nexus Hosted Repository
image::figs/web/archiva-nx-hosted-rebuild-idx.png[scale=60]

Once the migration is complete, you will be able to search and browse
the contents of your newly migrated Nexus Hosted repository.

[[archiva-sect-proxy]]
==== Migrating an Archiva Proxy Connector

Archiva allows you to define remote repositories and repository
connectors to proxy remote repositories and cache remote artifacts
from remote repositories in Archiva Managed Repositories.  While Nexus
also provides Proxy repositories, there is one major difference
between Nexus and Archiva. Where Nexus maintains a separate local
storage directory for each proxy repository, Archiva combines cached
remote artifacts into a single filesystem with the contents of a
managed repository. In other words, there is no good way to transfer
an existing local cache of artifacts between Archiva and Nexus without
manually manipulating the contents of Archiva's Managed Repository
directory.

To recreate an Archiva repository connector in Nexus as a Proxy
repository and to preserve the local cache of artifacts from this
repository. You'll need to create a Proxy repository in Nexus, copy
the contents of the existing proxy repository to the Nexus storage
location for you new Proxy repository, and then rebuild the metadata
of your new Nexus Proxy repository.

First step is to take a look at the Remote Repositories in your
Archiva installation: log in as an administrative user and then click
on "Repositories" under the Administration menu in the left-hand
Archiva navigation menu. Once you've clicked this link and loaded the
list of repositories, scroll to the bottom of the page to see the list
of remote repositories as shown in <<fig-archiva-browsing-remote>>.

[[fig-archiva-browsing-remote]]
.Browsing Archiva Remote Repositories
image::figs/web/archiva-remote-repositories.png[scale=60]

Defining a proxy repository in Archiva involves associating one of the
remote repositories defined in <<fig-archiva-browsing-remote>> with one
of the Managed Repositories defined in <<fig-archiva-managed>>. Once
you do this, requests for artifacts from the managed repository will
also query the remote repository. If an artifact is found in the
remote repository, it will be retrieved and stored in the managed
repository's storage directory. To see a list of proxy connectors and
the managed repositories they are associated with, click on "Proxy
Connectors" in the left-hand Archiva menu, you will see a list similar
to that shown in <<fig-archiva-proxy-connectors>>.

[[fig-archiva-proxy-connectors]]
.Archiva Proxy Connectors
image::figs/web/archiva-proxy-connectors.png[scale=60]

Click on the Edit Icon (or Pencil) next to second Proxy Connector
listed in <<fig-archiva-proxy-connectors>>, this will
then load the settings form for this proxy connector shown in
<<fig-archiva-proxy-connector-settings>>. You should use the
settings for this proxy connect to configure your new Nexus Proxy
repository.

[[fig-archiva-proxy-connector-settings]]
.Archiva Proxy Connector Settings
image::figs/web/archiva-proxy-connector-settings.png[scale=60]

To create a Proxy repository that will correspond to the Proxy
Connector in Archiva, log into Nexus as an administrative user, and
click on Repositories in the left-hand Nexus menu. Once you can see a
list of Nexus repositories, click on Add... and select Proxy
Repository from the drop-down of repository types. In the New Proxy
Repository form (shown in <<fig-archiva-nx-create-proxy>>) populate
the repository ID, repository Name, and use the remote
URL that was displayed in <<fig-archiva-browsing-remote>>. You will
need to create a remote repository for every proxy
connector that was defined in Archiva.

[[fig-archiva-nx-create-proxy]]
.Creating a Nexus Proxy Repository
image::figs/web/archiva-nx-proxy-create.png[scale=60]

To expose this new Proxy repository in a Repository Group, create a
new Nexus Repository group or select an existing group by clicking on
Repositories in the left-hand Nexus menu. Click on a repository group
and then select the Configuration tab to display the form shown in
<<fig-archiva-proxy-to-group>>. In the Configuration
tab you will see a list of Order Group Repositories and Available
Repositories.  Click and drag your new Nexus Proxy repository to the
list of Ordered Group Repositories, and click Save.

[[fig-archiva-proxy-to-group]]
.Adding a Proxy Repository to a Repository Group
image::figs/web/archiva-nx-repo-group-proxy.png[scale=60]

Next, you will need to define repository groups that will tell Nexus
to only locate certain artifacts in the newly created proxy
repository. In , Archiva defined three patterns that were used to
filter artifacts available from the proxy connector. These three
patterns were "javax/**", "com/sun/**", and "org/jvnet/**". To
recreate this behaviour in Nexus, define three Routes which will be
applied to the group you configured in <<fig-archiva-proxy-to-group>>.
To create a route, log in as an administrative user, and click on Routes
under the Administration menu in the left-hand Nexus menu. Click on
Add.. and add three inclusive routes that will apply to the repository
group you configured in <<fig-archiva-proxy-to-group>>.

.Defining Nexus Repository Groups
image::figs/web/archiva-nx-repo-routes.png[scale=60]

[[ssl]]
[appendix]
== Configuring Nexus for SSL

[[ssl-sect-introduction]]
=== Introduction

This chapter contains two sections: the first section details a
procedure for connecting Nexus to a remote repository which requires
client-side SSL certificates and the second section details the
configuration for serving SSL directly from Nexus. When you set up a
repository manager for a team of developers spread out over a variety
of locations both internal and external to a corporate network, you
will likely want to secure your repository using SSL. The instructions
in this chapter assume that you are running Nexus embedded in Jetty.

[[ssl-sect-client-cert]]
=== Importing a SSL Client Certificate

If you need to configure Nexus to proxy a remote repository which
requires a SSL Client Certificate, you'll need to import the
certificate included with your Nexus license into the JVM used to run
your Nexus instance. To make this process simpler, you can use our
import-ssl tool. We've created a simple command-line utility which
automates the process of loading the Server SSL Chain and the client
certificate into a JVM.

==== Downloading the SSL Import Tool

The import-ssl tool can be downloaded from:
http://central.sonatype.com/help/import-ssl.jar

==== Importing a Client Certificate

Importing a client certificate involves two steps: importing the
server's SSL chain and importing the client SSL key/certificate
pair. Some notes about the location of the key-store and default
key-store passwords:

* If you are using the default JSSE key-store locations on either a
Linux or OS X platform, you must run the commands below as the
root user. You can do this either by changing to the root user (su -),
or by using the sudo command: sudo [command].

* The default password used by Java for the built-in key-stores is
changeit. If your key-store uses a different password, you'll need to
specify that password as the last parameter on the command lines
above.

* If you want to specify your own key-store location, provide that in
place of <keystore_dir> in the examples below.

* If you're using a password other than 'changeit' for your keystore,
you should supply it immediately following the keystore path in the
commands below.

* If you specify a keystore location that doesn't exist, the
import-ssl utility will create it on-demand.

Before you begin the process of importing a Server SSL Chain and a
client certificate you will need three things:

* Network access to the SSL server you are connecting to,

* An SSL client certificate, 

* and a certificate password.

==== Import the Server SSL Chain

The first command imports the entire self-signed SSL certificate chain
for central.sonatype.com into your JSSE keystore:

----
$ java -jar import-ssl.jar server central.sonatype.com \
<keystore_dir>
----

You would substitute the server name used in the previous listing with
the server name you are attempting to connect to. This particular
command will connect to https://central.sonatype.com, retrieve, and
import the server's SSL certificate chain.

==== Import the Client SSL Key/Certificate Pair

The second command imports your client-side SSL certificate into the
JSSE keystore, so Nexus can send it along to the server for
authentication:

----
$ java -jar import-ssl.jar client <your-certificate.p12> \
<your-certificate-password> <keystore_dir>
----

When the client command completes, you should see a line containing
the keystore path, like the one that follows. This path is important;
you will use it in your Nexus configuration below, so make a note of
it!

----
...
Writing keystore: /System/Library/Frameworks/JavaVM.framework/\
Versions/1.6.0/Home/lib/security/jssecacerts
----

==== Configuring Nexus Start-up

Once both sets of SSL certificates are imported to your keystore, you
can modify the Nexus $NEXUS_HOME/bin/jsw/wrapper.conf file
to inject the JSSE system properties necessary to use these
certificates, as seen below.

NOTE: In the following example, line prefixes like
wrapper.java.additional.4 are meant to be appended to the existing
wrapper.java.additional.* lines in the wrapper.conf file. In
future versions of Nexus, new JVM command-line arguments may be
specified in this file. In such a case, where the specific numbers '4'
and '5' may be taken, simply increment and use the next two unused
numbers.

----
wrapper.java.additional.4=-Djavax.net.ssl.keyStore=<keystore_dir>
wrapper.java.additional.5=-Djavax.net.ssl.keyStorePassword=<keystore_password>
----

Once you have configured the Nexus start-up option shown above, restart
Nexus and attempt to proxy a remote repository which requires an SSL
client certificate. Nexus will use the keystore location and keystore
password to configure the SSL interaction to accept the server's SSL
certificate and send the appropriate client SSL certificate.

[[ssl-sect-ssl-direct]]
=== Configuring Nexus to Serve SSL

If you need to serve repository content using SSL, you can always
proxy Nexus with a server like Apache httpd. Apache httpd can easily
be configured to serve SSL content using mod_ssl, and there is a large
amount of reference material available for configuring httpd to serve
secure content. Jetty can also be configured to serve SSL content
directly, and if you would like to avoid the extra work of putting a
web server like Apache httpd in front of Nexus, this section shows you
how to do that. To configure Nexus to serve SSL directly to clients,
you'll need to perform the following steps.

NOTE: All examples given here can be found in the
https://github.com/sonatype/nexus/tree/master/nexus/nexus-oss-webapp/src/main/resources/content/conf/examples[Nexus
source], or in the Nexus distribution under
'+++$(NEXUS_HOME)/conf/examples+++'. Before you customize your Nexus
configuration to serve SSL, keep in mind the following:

* Customizations in this Appendix assume that your are
running Nexus 1.9.2.

* Any custom Jetty configuration must be contained in the
'+++$(NEXUS_HOME)/conf/jetty.xml+++' file, or else in the location referenced
by the jetty.xml property in '+++$(NEXUS_HOME)/conf/nexus.properties+++' (in
case you've customized this location).

* While the instructions below will work with Nexus Open Source, these
instructions assume the filesystem of Nexus Professional. If you are
missing Jetty JAR files, you should obtain them from the Jetty project
page: http://www.mortbay.org/jetty/

==== Configure the Java Keystore

Follow the instructions on the
http://docs.codehaus.org/display/JETTY/How+to+configure+SSL[How to
configure SSL] on the Jetty Wiki to setup the appropriate keys and
certificates in a form that Jetty can use. Pay particular attention to
steps 1-3, and the section at the bottom called Password Issues.

The jetty-util jar and the main Jetty jar can be found in
$NEXUS_HOME/runtime/apps/lib/nexus. The command line used to import
an OpenSSL key+cert in PKCS12 format is:

----
$ java -classpath jetty-util-6.1.12.jar:jetty-6.1.12.jar \
org.mortbay.jetty.security.PKCS12Import <pkcs12-file> <keystore>
----

The command line used to generate an obfuscated password hash is:

----
$ java -classpath jetty-util-6.1.12.jar:jetty-6.1.12.jar \
org.mortbay.jetty.security.Password <your-password>
<your-password>
OBF:1t2x1toq1to41t39
MD5:6f1ed002ab5595859014ebf0951522d9 
----

The OBF line in the previous output will be used in the jetty.xml
three times. You'll need to run the previous command three times to
generate the obfuscated hash-codes for three passwords:

* The Key Password

* The Trust Store Password

* The Key Store Password

In the next section, the key store and trust store are the same
file, with the same password.

==== Configure Nexus/Jetty to Use the New Keystore

NOTE: A jetty.xml with the modifications in this section can be found
in $NEXUS_HOME/conf/examples/jetty-ssl.xml, inside your Nexus
distribution.

Modify the https://docs.sonatype.com/display/NX/Jetty+Configuration#JettyConfiguration-Equivalentbasejetty.xml[nexus-equivalent jetty.xml]

----
<Call name="addConnector">
  <Arg>
    <New class="org.mortbay.jetty.nio.SelectChannelConnector">
      <Set name="host">${application-host}</Set>
      <Set name="port">${application-port}</Set>
    </New>
  </Arg>
</Call>
----

with this:

----
<Call name="addConnector">
  <Arg>
    <New class="org.mortbay.jetty.security.SslSelectChannelConnector">
      <Set name="host">${application-host}</Set>
      <Set name="port">${application-port}</Set>
      <Set name="maxIdleTime">30000</Set>
      <Set name="keystore">/etc/ssl/keystore</Set>
      <Set name="truststore">/etc/ssl/keystore</Set>
      <Set name="password">OBF:1v2j1uum1xtv1zej1zer1xtn1uvk1v1v</Set>
      <Set name="keyPassword">OBF:1v2j1uum1xtv1zej1zer1xtn1uvk1v1v</Set>
      <Set name="trustPassword">OBF:1v2j1uum1xtv1zej1zer1xtn1uvk1v1v</Set>
    </New>
  </Arg>
</Call>
----

==== Modify the application-port for SSL connections

The application-port property, referenced in the configuration above,
has a default configuration that many people would more naturally
associate with non-SSL connections. You may wish to modify this port
to something like 8443, or even 443 (if you have root access from
which to start Nexus). To change this property, modify the
'+++$(basedir)/conf/nexus.properties+++'

NOTE: You may wish to enable both types of connections, with
appropriate rewrite rules between them. Such a configuration is beyond
the scope of this section; if you're interested, please refer to the
http://docs.codehaus.org/display/JETTY/Jetty+Wiki[Jetty Wiki] for some
information to get you started. Additionally, you may need to add
extra port properties to the nexus.properties configuration file to
accommodate both SSL and non-SSL connections.

[[ssl-sect-redirecting]]
=== Redirecting Non-SSL Connections to SSL

If you want to make it very easy for people to use your Nexus
repository, you will want to configure the automatic redirect from the
non-SSL port (default 80) to the SSL port (default 443). When this
feature is configured, browsers and clients that attempt to interact
with the non-SSL port will be seamlessly redirected to the SSL
port. If you do not turn on the automatic redirect to SSL, users who
attempt to load the Nexus interface via the default port 80 will see a
network error.

If you are proxying your Nexus instance with a web server like Apache
httpd, you could configure mod_rewrite to automatically redirect
browsers to the SSL port, or you can configure Jetty to perform this
redirection. To do this in Jetty you use a custom rewrite rule for
Jetty that is bundled with Nexus, inside the plexus-jetty6 library
found in $NEXUS_HOME/runtime/apps/nexus/lib

To enable this feature, configure Jetty to serve SSL directly as
demonstrated in <<ssl-sect-ssl-direct>>. After you
having configured Jetty to serve SSL directly, open your jetty.xml and
replace the existing handler/context-collection declaration with a
stand-alone context-collection declaration, by replacing this section:

----
<Set name="handler">
  <New id="Contexts" class="org.mortbay.jetty.handler.ContextHandlerCollection">
  <!-- The following configuration is REQUIRED, and MUST BE FIRST.
       It makes the Plexus container available for use in the Nexus webapp. -->
    <Call name="addLifeCycleListener">
      <Arg>
        <New  
            class="org.sonatype.plexus.jetty.custom.InjectExistingPlexusListener" />
      </Arg>
    </Call>

    <!-- The following configuration disables JSP taglib support, 
         the validation of which slows down Jetty's start-up significantly. -->
    <Call name="addLifeCycleListener">
      <Arg>
        <New class="org.sonatype.plexus.jetty.custom.DisableTagLibsListener" />
      </Arg>
    </Call>
  </New>
</Set>
----

with this one:

----
<New id="Contexts" class="org.mortbay.jetty.handler.ContextHandlerCollection">
  <!-- The following configuration is REQUIRED, and MUST BE FIRST.
       It makes the Plexus container available for use in the Nexus webapp. -->
  <Call name="addLifeCycleListener">
    <Arg>
      <New 
         class="org.sonatype.plexus.jetty.custom.InjectExistingPlexusListener" />
    </Arg>
  </Call>

  <!-- The following configuration disables JSP taglib support, the 
      validation of which slows down Jetty's start-up significantly. -->
  <Call name="addLifeCycleListener">
    <Arg>
      <New class="org.sonatype.plexus.jetty.custom.DisableTagLibsListener" />
    </Arg>
  </Call>
</New>
----

Now, configure the rewrite handler for Jetty by adding the following
section just above the line with stopAtShutdown in it:

----
<Set name="handler">
  <New id="Handlers" class="org.mortbay.jetty.handler.rewrite.RewriteHandler">
    <Set name="rules">
      <Array type="org.mortbay.jetty.handler.rewrite.Rule">
        <Item>
          <New id="redirectedHttps"
             class="org.sonatype.plexus.jetty.custom.RedirectToHttpsRule">
            <Set name="httpsPort">${application-port-ssl}</Set>
          </New>
        </Item>
      </Array>
    </Set>
    <Set name="handler">
      <New id="Handlers" class="org.mortbay.jetty.handler.HandlerCollection">
        <Set name="handlers">
          <Array type="org.mortbay.jetty.Handler">
            <Item><Ref id="Contexts"/></Item>
            <Item>
              <New id="DefaultHandler" 
                class="org.mortbay.jetty.handler.DefaultHandler"/></Item>
            <Item>
              <New id="RequestLog" 
                class="org.mortbay.jetty.handler.RequestLogHandler"/></Item>
          </Array>
        </Set>
      </New>
    </Set>
  </New>
</Set>
----

Modify $NEXUS_HOME/conf/nexus.properties
and add a new property, application-port-ssl. This will
allow you to customize both the SSL and non-SSL ports
independently:

----
application-port-ssl=8443
----

[[contrib]]
[appendix]
== Contributing to the Nexus Book

This appendix covers the basics of contributing to the book you are
currently reading. This book is an open source project, you can
participate in the writing effort if you have an idea for
documentation. Sonatype's books are
different: they are open writing efforts and we see documentation
contributions as having equal value to code contributions.  If you are
interested in our technology, we'd welcome your contribution.

[[contrib-sect-cla]]
=== Contributor License Agreement (CLA)

In order to contribute to the Nexus book, you will first need to fill
out a contributor license agreement. This is a legal agreement between
you and Sonatype which ensures that your contributions are not covered
by any other legal requirements. Sonatype requires contributors to
sign this agreement for all major contributions which are larger than
a single section. If your contribution consists of finding and fixing
simple typos or suggesting minor changes to the wording or sequence of
a particular section, you can contribute these changes via the
Sonatype JIRA instance.  If you contribution involves direct
contribution of a number of sections or chapters you will first need
to sign our Contributor License Agreement (CLA).

To download the CLA from the following URL:
http://www.sonatype.org/SonatypeCLA.pdf

Once you have completed and signed this document, you can fax it to:
(650) 472-9197

[[contrib-sect-class]]
=== Contributors, Authors, and Editors

As with any open source effort, the contributors to the Nexus book are
grouped into a simple hierarchy. Sonatype's writing efforts are
loosely structured, but we have found it necessary to define some
formal categories for contributors.

Reviewers:: Many individuals have read the book and taken the time to
report typos and bugs. Reviewers are always credited in the Foreword
of the book and they make an important contribution to the quality of
the book.

Contributors:: Contributors are individuals who have contributed one
or more sections to the book. Many contributors make a one time
contribution to a particular section or collection of
sections. Contributors are always credited in the Foreword of the
book, and if a contributor sustains a constant level of contribution
which adds up to the equivalent of an entire chapter, a contributors
name will be added to the list of contributing authors.

Authors:: Authors have made a significant contribution to the book
equal to the equivalent of one or more chapters. A long-time
contributor can also be transitioned to the status of Author at the
discretion of an Editor. Authors are often given editorial control
over specific chapters or sections of a book, working with
Contributors to review, accept, and refine contributions to defined
sections of the book.

Editors:: An Author can also be an Editor. Each book has at least one
editor (and ideally no more than two Editors at any time). On Sonatype
Open book projects, Editors are the arbiters of content, they review
content submissions and make final decisions about content direction.

For each of these levels, the adjective "Active" can be used if a
contributor, author, or editor has been active during the previous 12
months. If you have any questions about contributor status, send any
enquiries to book@sonatype.com

[[contrib-sect-tools]]
=== Tools Used to Build and Write this Book

The following tools are used to write this book. If you are
interested in contributing to this book, you will need to download the
following software:

Asciidoc:: A very lightweight markup format with a strong community
and a collection of solid tools. For more information, see
http://www.methods.co.nz/asciidoc/

A Text Editor:: Emacs, vi, TextMate, Notepad - it doesn't matter.  All
you need to contribute to this book is a text editor.

Git:: Sonatype stores the source code for all books in GitHub so you
will need to download Git. In addition to downloading Git, if you need
read/write access to the repository you will also need to sign up for
an account on GitHub - http://www.github.com

Download the latest version of Git from http://git-scm.com/

This next set of tools are optional, and are only required if you are
involved in generating diagrams or formatting the final PDF for the
pre-print production process. In short, there is only one or two
people who will need to have access to the following set of tools,
and, in a normal publishing house, all of these functions would likely
be performed by a separate "Production" team.

Omnigraffle:: Many of the diagrams in this book have been generated
using a OSX-specific tool named Omnigraffle.

If you are interested in helping us create diagrams don't feel
compelled to purchase a copy of Omnigraffle. Send us a rough outline
of your diagram, and Sonatype will gladly transform your idea into a
diagram if your contributions are accepted into the book.

Adobe Photoshop

All of the screen shots are generated using simple screen capture
tools. The resulting raw images (PNGs) are then processed using a set
of very simple Photoshop macros. These macros add a border to each
screen shot and apply a standard drop shadow. Once the drop shadow has
been applied, these macros then save a 72 dpi PNG image for the HTML
version of the book in addition to a 150 dpi PDF image for the printed
version of the book,

While Adobe Photoshop is a capable (and somewhat formidable) graphics
manipulation tool, Sonatype is exploring alternatives to using this
commercial utility in the content generation process.  Alternatives
currently being investigated are open source packages such as GIMP or
systems which can rely on ImageMagick for scripted conversion of raw
screen shots to multiple web and print image formats.

If you are interested in contributing, but you do not want to bother
with the process of formatting images for both web and print, Sonatype
welcomes contributions which include raw screen captures. We can take
care of the formatting.

Adobe Illustrator:: The book cover, the promotional material insert,
and the print binder for Lulu are all generated with Adobe
Illustrator. Adobe Illustrator can open and edit PDFs natively, and
can be used to generate the static PDFs which are concatenated
together to produce the final book output.

[[contrib-sect-how]]
=== How to Build the Book

You know what, this book doesn't really have a "build" as much as it
has a collection of light-weight bash scripts which are used to invoke
Asciidoc and a2x.  If you are interested in building the book, we've
had good success on Mac OSX and Ubuntu.  Any other operation system
and you are on your own.

* Clone the book's Git repository. To clone this book's repository
execute the following command at a command-line:

----
$ git clone git@github.com:sonatype/nexus-book.git
...a bunch of Git output...
----

Running this command will create a sub-directory named nexus-book which
is a copy of this book's source.

* ./build.sh

This will create a single-page HTML version, a chunked HTML version,
and a PDF version of the book.

[[contrib-sect-subscribe]]
=== Subscribing to the Book Developers List

Sonatype maintains a Book Developers mailing list as a single mailing
list for contributors, authors, and editors working on any of our
Sonatype Open Books. This is a high volume list which contains both
discussion and automated emails from GitHub and our Sonatype Matrix
continuous integration server.

To subscribe to this mailing list, send and email to:
mailto:book-dev-subscribe@sonatype.org[book-dev-subscribe@sonatype.org]

[[copyright]]
[appendix]
== Copyright

Copyright © 2011 Sonatype, Inc. All rights reserved.

Online version published by Sonatype, Inc,

Nexus™, Nexus Professional™, and all Nexus-related logos are
trademarks or registered trademarks of Sonatype, Inc., in the United
States and other countries.

Java™ and all Java-based trademarks and logos are trademarks or
registered trademarks of Oracle, Inc., in the United States
and other countries.

IBM® and WebSphere® are trademarks or registered trademarks of
International Business Machines, Inc., in the United States and other
countries.

Eclipse™ is a trademark of the Eclipse Foundation, Inc., in the United
States and other countries.

Apache and the Apache feather logo are trademarks of The Apache
Software Foundation.

Linux® is the registered trademark of Linus Torvalds in the U.S. and
other countries.

Many of the designations used by manufacturers and sellers to
distinguish their products are claimed as trademarks. Where those
designations appear in this book, and Sonatype, Inc. was
aware of a trademark claim, the designations have been printed in caps
or initial caps.

While every precaution has been taken in the preparation of this book,
the publisher and authors assume no responsibility for errors or
omissions, or for damages resulting from the use of the information
contained herein.

[[license]]
[appendix]
== Creative Commons License

This work is licensed under a Creative Commons
Attribution-Noncommercial-No Derivative Works 3.0 United States
license.  For more information about this license, see
http://creativecommons.org/licenses/by-nc-nd/3.0/us/.  You are free to
share, copy, distribute, display, and perform the work under the
following conditions:

* You must attribute the work to Sonatype, Inc. with a link to
  http://www.sonatype.com

* You may not use this work for commercial purposes.

* You may not alter, transform, or build upon this work.

If you redistribute this work on a web page, you must include the
following link with the URL in the about attribute listed on a single
line (remove the backslashes and join all URL parameters):

----
<div xmlns:cc="http://creativecommons.org/ns#" 
about="http://creativecommons.org/license/results-one?q_1=2&q_1=1\
&field_commercial=n&field_derivatives=n&field_jurisdiction=us\
&field_format=StillImage&field_worktitle=Repository%3A+\Management\
&field_attribute_to_name=Sonatype%2C+Inc.\
&field_attribute_to_url=http%3A%2F%2Fwww.sonatype.com\
&field_sourceurl=http%3A%2F%2Fwww.sonatype.com%2Fbook\
&lang=en_US&language=en_US&n_questions=3">
<a rel="cc:attributionURL" property="cc:attributionName" 
href="http://www.sonatype.com">Sonatype, Inc.</a> / 
<a rel="license" 
href="http://creativecommons.org/licenses/by-nc-nd/3.0/us/">
CC BY-NC-ND 3.0</a>
</div>
----

When downloaded or distributed in a jurisdiction other than the United
States of America, this work shall be covered by the appropriate
ported version of Creative Commons Attribution-Noncommercial-No
Derivative Works 3.0 license for the specific jurisdiction. If the
Creative Commons Attribution-Noncommercial-No Derivative Works version
3.0 license is not available for a specific jurisdiction, this work
shall be covered under the Creative Commons
Attribution-Noncommercial-No Derivate Works version 2.5 license for
the jurisdiction in which the work was downloaded or distributed. A
comprehensive list of jurisdictions for which a Creative Commons
license is available can be found on the Creative Commons
International web site at http://creativecommons.org/international

If no ported version of the Creative Commons license exists for a
particular jurisdiction, this work shall be covered by the generic,
unported Creative Commons Attribution-Noncommercial-No Derivative
Works version 3.0 license available from
http://creativecommons.org/licenses/by-nc-nd/3.0/

[[copyright-sect-creative-commons]]
=== Creative Commons BY-NC-ND 3.0 US License

http://creativecommons.org/licenses/by-nc-nd/3.0/us/legalcode[Creative
Commons Attribution-NonCommercial-NoDerivs 3.0 United
States]

THE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF THIS
CREATIVE COMMONS PUBLIC LICENSE ("CCPL" OR "LICENSE"). THE WORK IS
PROTECTED BY COPYRIGHT AND/OR OTHER APPLICABLE LAW. ANY USE OF THE WORK
OTHER THAN AS AUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW IS
PROHIBITED.

BY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT AND
AGREE TO BE BOUND BY THE TERMS OF THIS LICENSE. TO THE EXTENT THIS
LICENSE MAY BE CONSIDERED TO BE A CONTRACT, THE LICENSOR GRANTS YOU THE
RIGHTS CONTAINED HERE IN CONSIDERATION OF YOUR ACCEPTANCE OF SUCH TERMS
AND CONDITIONS.

. Definitions

.. "Collective Work" means a work, such
as a periodical issue, anthology or encyclopedia, in which the
Work in its entirety in unmodified form, along with one or more
other contributions, constituting separate and independent works
in themselves, are assembled into a collective whole. A work
that constitutes a Collective Work will not be considered a
Derivative Work (as defined below) for the purposes of this
License.

.. "Derivative Work" means a work based
upon the Work or upon the Work and other pre-existing works,
such as a translation, musical arrangement, dramatization,
fictionalization, motion picture version, sound recording, art
reproduction, abridgment, condensation, or any other form in
which the Work may be recast, transformed, or adapted, except
that a work that constitutes a Collective Work will not be
considered a Derivative Work for the purpose of this License.
For the avoidance of doubt, where the Work is a musical
composition or sound recording, the synchronization of the Work
in timed-relation with a moving image ("synching") will be
considered a Derivative Work for the purpose of this
License.

.. "Licensor" means the individual,
individuals, entity or entities that offers the Work under the
terms of this License.

.. "Original Author" means the
individual, individuals, entity or entities who created the
Work.

.. "Work" means the copyrightable work
of authorship offered under the terms of this License.

.. "You" means an individual or entity
exercising rights under this License who has not previously
violated the terms of this License with respect to the Work, or
who has received express permission from the Licensor to
exercise rights under this License despite a previous
violation.

. Fair Use Rights. Nothing in this license
is intended to reduce, limit, or restrict any rights arising from
fair use, first sale or other limitations on the exclusive rights of
the copyright owner under copyright law or other applicable
laws.

. License Grant. Subject to the terms and
conditions of this License, Licensor hereby grants You a worldwide,
royalty-free, non-exclusive, perpetual (for the duration of the
applicable copyright) license to exercise the rights in the Work as
stated below:

.. to reproduce the Work, to incorporate the Work into one or
more Collective Works, and to reproduce the Work as incorporated
in the Collective Works; and,

.. to distribute copies or phonorecords of, display publicly,
perform publicly, and perform publicly by means of a digital
audio transmission the Work including as incorporated in
Collective Works.

The above rights may be exercised in all media and formats
whether now known or hereafter devised. The above rights include the
right to make such modifications as are technically necessary to
exercise the rights in other media and formats, but otherwise you
have no rights to make Derivative Works. All rights not expressly
granted by Licensor are hereby reserved, including but not limited
to the rights set forth in Sections 4(d) and 4(e).

. Restrictions.The license granted in
Section 3 above is expressly made subject to and limited by the
following restrictions:

.. You may distribute, publicly display, publicly perform, or
publicly digitally perform the Work only under the terms of this
License, and You must include a copy of, or the Uniform Resource
Identifier for, this License with every copy or phonorecord of
the Work You distribute, publicly display, publicly perform, or
publicly digitally perform. You may not offer or impose any
terms on the Work that restrict the terms of this License or the
ability of a recipient of the Work to exercise the rights
granted to that recipient under the terms of the License. You
may not sublicense the Work. You must keep intact all notices
that refer to this License and to the disclaimer of warranties.
When You distribute, publicly display, publicly perform, or
publicly digitally perform the Work, You may not impose any
technological measures on the Work that restrict the ability of
a recipient of the Work from You to exercise the rights granted
to that recipient under the terms of the License. This Section
4(a) applies to the Work as incorporated in a Collective Work,
but this does not require the Collective Work apart from the
Work itself to be made subject to the terms of this License. If
You create a Collective Work, upon notice from any Licensor You
must, to the extent practicable, remove from the Collective Work
any credit as required by Section 4(c), as requested.

.. You may not exercise any of the rights granted to You in
Section 3 above in any manner that is primarily intended for or
directed toward commercial advantage or private monetary
compensation. The exchange of the Work for other copyrighted
works by means of digital file-sharing or otherwise shall not be
considered to be intended for or directed toward commercial
advantage or private monetary compensation, provided there is no
payment of any monetary compensation in connection with the
exchange of copyrighted works.

.. If You distribute, publicly display, publicly perform, or publicly
digitally perform the Work (as defined in Section 1 above) or
Collective Works (as defined in Section 1 above), You must, unless a
request has been made pursuant to Section 4(a), keep intact all
copyright notices for the Work and provide, reasonable to the medium
or means You are utilizing: (i) the name of the Original Author (or
pseudonym, if applicable) if supplied, and/or (ii) if the Original
Author and/or Licensor designate another party or parties (e.g. a
sponsor institute, publishing entity, journal) for attribution
("Attribution Parties") in Licensor's copyright notice, terms of
service or by other reasonable means, the name of such party or
parties; the title of the Work if supplied; to the extent reasonably
practicable, the Uniform Resource Identifier, if any, that Licensor
specifies to be associated with the Work, unless such URI does not
refer to the copyright notice or licensing information for the
Work. The credit required by this Section 4(c) may be implemented in
any reasonable manner; provided, however, that in the case of a
Collective Work, at a minimum such credit will appear, if a credit for
all contributing authors of the Collective Work appears, then as part
of these credits and in a manner at least as prominent as the credits
for the other contributing authors. For the avoidance of doubt, You
may only use the credit required by this clause for the purpose of
attribution in the manner set out above and, by exercising Your rights
under this License, You may not implicitly or explicitly assert or
imply any connection with, sponsorship or endorsement by the Original
Author, Licensor and/or Attribution Parties, as appropriate, of You or
Your use of the Work, without the separate, express prior written
permission of the Original Author, Licensor and/or Attribution
Parties.

. Representations, Warranties and Disclaimer

UNLESS OTHERWISE MUTUALLY AGREED TO BY THE PARTIES IN WRITING,
LICENSOR OFFERS THE WORK AS-IS AND ONLY TO THE EXTENT OF ANY RIGHTS
HELD IN THE LICENSED WORK BY THE LICENSOR. THE LICENSOR MAKES NO
REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE WORK,
EXPRESS, IMPLIED, STATUTORY OR OTHERWISE, INCLUDING, WITHOUT
LIMITATION, WARRANTIES OF TITLE, MARKETABILITY, MERCHANTIBILITY,
FITNESS FOR A PARTICULAR PURPOSE, NONINFRINGEMENT, OR THE ABSENCE OF
LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OF ABSENCE OF
ERRORS, WHETHER OR NOT DISCOVERABLE. SOME JURISDICTIONS DO NOT ALLOW
THE EXCLUSION OF IMPLIED WARRANTIES, SO SUCH EXCLUSION MAY NOT APPLY
TO YOU.

. Limitation on Liability. EXCEPT TO THE EXTENT REQUIRED BY APPLICABLE
LAW, IN NO EVENT WILL LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY
FOR ANY SPECIAL, INCIDENTAL, CONSEQUENTIAL, PUNITIVE OR EXEMPLARY
DAMAGES ARISING OUT OF THIS LICENSE OR THE USE OF THE WORK, EVEN IF
LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

. Termination

.. This License and the rights granted hereunder will terminate
automatically upon any breach by You of the terms of this
License. Individuals or entities who have received Collective Works
(as defined in Section 1 above) from You under this License, however,
will not have their licenses terminated provided such individuals or
entities remain in full compliance with those licenses. Sections 1, 2,
5, 6, 7, and 8 will survive any termination of this License.

.. Subject to the above terms and conditions, the license
granted here is perpetual (for the duration of the applicable
copyright in the Work). Notwithstanding the above, Licensor
reserves the right to release the Work under different license
terms or to stop distributing the Work at any time; provided,
however that any such election will not serve to withdraw this
License (or any other license that has been, or is required to
be, granted under the terms of this License), and this License
will continue in full force and effect unless terminated as
stated above.

. Miscellaneous

.. Each time You distribute or publicly digitally perform the Work (as
defined in Section 1 above) or a Collective Work (as defined in
Section 1 above), the Licensor offers to the recipient a license to
the Work on the same terms and conditions as the license granted to
You under this License.

.. If any provision of this License is invalid or
unenforceable under applicable law, it shall not affect the
validity or enforceability of the remainder of the terms of this
License, and without further action by the parties to this
agreement, such provision shall be reformed to the minimum
extent necessary to make such provision valid and
enforceable.

.. No term or provision of this License shall be deemed
waived and no breach consented to unless such waiver or consent
shall be in writing and signed by the party to be charged with
such waiver or consent.

.. This License constitutes the entire agreement between the
parties with respect to the Work licensed here. There are no
understandings, agreements or representations with respect to
the Work not specified here. Licensor shall not be bound by any
additional provisions that may appear in any communication from
You. This License may not be modified without the mutual written
agreement of the Licensor and You.

[[license-sect-ccnotice]]
=== Creative Commons Notice

Creative Commons is not a party to this License, and makes no
warranty whatsoever in connection with the Work. Creative Commons will
not be liable to You or any party on any legal theory for any damages
whatsoever, including without limitation any general, special,
incidental or consequential damages arising in connection to this
license. Notwithstanding the foregoing two (2) sentences, if Creative
Commons has expressly identified itself as the Licensor hereunder, it
shall have all rights and obligations of Licensor.

Except for the limited purpose of indicating to the public that
the Work is licensed under the CCPL, Creative Commons does not authorize
the use by either party of the trademark "Creative Commons" or any
related trademark or logo of Creative Commons without the prior written
consent of Creative Commons. Any permitted use will be in compliance
with Creative Commons' then-current trademark usage guidelines, as may
be published on its website or otherwise made available upon request
from time to time. For the avoidance of doubt, this trademark
restriction does not form part of this License.

Creative Commons may be contacted at
http://creativecommons.org/.

/* Local Variables: */
/* ispell-personal-dictionary: "ispell.dict" */
/* End:             */
