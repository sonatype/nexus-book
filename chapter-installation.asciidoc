[[install]]
== Installing and Running Nexus

[[install-introduction]]
=== Introduction

Nexus only requires a Java Runtime Environment and installation is a
simple process. This chapter provides further details to get
started with Nexus and keep it running successfully in production
deployments.

WARNING: Currently Nexus 3 is a pre-release application and running it
for production usage is not recommended. The installation
process is only suitable for evaluation and testing usage.

=== Java Prerequisite

{nexus} only has one prerequisite, a Java 8 Runtime
Environment (JRE) from Oracle. Nexus is most often run with the JRE
that is bundled with a Java Development Kit (JDK) installation. We
recommend to use the latest version of Java available from the
http://www.oracle.com/technetwork/java/javase/downloads/index.html[Oracle
website].

You can confirm the installed Java version with the `java` command:

----
$ java -version
java version "1.8.0_51"
Java(TM) SE Runtime Environment (build 1.8.0_51-b16)
Java HotSpot(TM) 64-Bit Server VM (build 25.51-b03, mixed mode)
----

When multiple JDK or JRE versions are installed, you need to ensure
the correct version by running the above command as the
operating system user, that is used to run Nexus.

TIP: OpenJDK or other Java distributions or older Java versions are not supported.

////
[[install-sect-downloading]]
=== Downloading Nexus

There are two distributions of Nexus: http://nexus.sonatype.org/[Nexus
OSS] and http://links.sonatype.com/products/nexus/pro/home[Nexus
Pro].  {oss} is a fully-featured repository
manager which can be freely used, customized, and distributed under
the Eclipse Public License (EPL Version 1). {pro} is a
distribution of Nexus with features that are relevant to large
enterprises and organizations which require complex procurement and
staging workflows in addition to more advanced LDAP integration,
Atlassian Crowd support, and other development infrastructure. The
differences between {oss} and {pro} are
explored in the previous chapter.

==== Downloading {oss}

To download the latest {oss} distribution, go to
http://www.sonatype.org/nexus/go[http://www.sonatype.org/nexus/go]
and choose Nexus (TGZ) or Nexus (ZIP) shown in
<<fig-installing-open-source-dl>>. This will download a a Gzip TAR (TGZ)
or a ZIP with identical contents. Your download will be file named
+nexus-2.9.0-02-bundle.zip+ or +nexus-2.9.0-02-bundle.tar.gz+.

[[fig-installing-open-source-dl]]
.Downloading {oss}
image::figs/web/installing-open-source-dl.png[scale=50]

Older versions can be downloaded following the link at the bottom of
<<fig-installing-open-source-dl>> and selecting a version and archive
type in the page displayed in
<<fig-installing-open-source-dl-select>>.

[[fig-installing-open-source-dl-select]]
.Selecting a Specific Version of {oss} to Download
image::figs/web/installing-open-source-dl-select.png[scale=50]



==== Downloading {pro}

{pro} can be downloaded as +zip+ or +tar.gz+ archive from
http://links.sonatype.com/products/nexus/pro/download[the Nexus
Pro support download page]. Existing customers with access to the support
system can also download it directly from the
http://links.sonatype.com/products/nexus/pro/support[Nexus
Pro Support landing page].

TIP: Use the http://www.sonatype.com/nexus/free-trial[{pro} trial
version] for an evaluation.
////

===  Installing Nexus

The Nexus bundle combines the Nexus web application with an Eclipse
Jetty server and supplementary files like startup scripts.

Installing Nexus is straightforward. Simply unpack the Nexus bundle archive
in a directory, to which you have full access. If you are installing
Nexus on a local workstation to give it a test run, you can install it
in your home directory or wherever you like. Nexus doesn't have any
hard-coded directories and will run from any directory. If you
downloaded the {oss} ZIP archive, run:

----
$ unzip nexus-3.0.0-b2015091801-bundle.zip
----

Or, if you downloaded the GZip'd TAR archive, run:

----
$ tar xvzf nexus-3.0.0-b2015091801-bundle.tar.gz
----

////
For {pro} the equivalent commands would be

----
$ unzip nexus-professional-3.0.0-b2015091801-bundle.zip
$ tar xvzf nexus-professional-3.0.0-b2015091801-bundle.tar.gz
----
////


Alternatively you can use your favourite file archiver and extraction tool.

If you are installing Nexus on a server, you should use a directory
other than your users home directory. On a Unix machine, we assume
that Nexus is installed in +/opt+ with a symbolic link +/opt/nexus+ to
the versioned +/opt/nexus-3.0.0-b2015091801+ directory. The following
commands can create this setup:

----
$ sudo cp nexus-3.0.0-b2015091801-bundle.tar.gz /opt
$ cd /opt
$ sudo tar xvzf nexus-3.0.0-b2015091801-bundle.tar.gz
$ ln -s nexus-3.0.0-b2015091801 nexus
----
////
Using a generic symbolic link +nexus+
to a specific version is a common practice which makes it easier to
upgrade when a newer version of Nexus is made available.
////


NOTE: On Windows you should install Nexus outside +Program Files+ to
avoid problems with Windows file registry virtualization. If you plan
to run Nexus as a specific user you could install into the
+AppData\Local+ directory of that users home directory. Otherwise
simply use e.g., +C:\nexus+ or something similar.

The Nexus application directory +nexus-3.0.0-b2015091801+ requires
another directory named +sonatype-work+. This directory contains all
of the repository and configuration data for Nexus and is stored
outside of the Nexus installation directory to make it easier to
upgrade to a newer version of Nexus.

By default, this directory is a sibling to the Nexus
installation directory. If you installed Nexus in the +/opt+
directory it would also contain a +sonatype-work+ subdirectory with a
nested +nexus+ directory containing all of the content and
configuration.

////
The location of the +sonatype-work+ directory can be
customized by altering the nexus-work property in
+$NEXUS_HOME/conf/nexus.properties+.

[[install-sect-upgrading]]
=== Upgrading Nexus

Since Nexus separates its configuration and data storage from the
application, it is easy to upgrade an existing Nexus installation.

To upgrade Nexus, unpack the Nexus archive in the directory that
contains the existing Nexus installation. Once the archive is
unpacked, the new Nexus application directory should be a sibling to
your existing +sonatype-work/+ directory.

If you have defined a symbolic link for the version of Nexus to use,
stop the server and change that to point at the new Nexus application
directory. When you start the new instance of Nexus it will read the
existing repository configuration from the +sonatype-work+ directory.
Depending on the version you upgrade from and to, some maintenance
tasks like rebuilding the internal indices can be necessary. Please
refer to the
http://links.sonatype.com/products/nexus/oss/upgrading[upgrade
notes] of the new release for more information on this. In addition, a
review of the
http://links.sonatype.com/products/nexus/oss/release-notes[release
notes] can be very useful to get a better understanding of potential,
additional steps required.

If you are using any additional plugins supplied by Sonatype, the new
version of Nexus you downloaded will contain a newer version of the
plugin. Be sure to copy the new version from the +optional-plugins+
folder to the +plugin-repository+ folder, as documented in
<<install-additional-plugins>>, and restart Nexus.

Externally supplied plugins are updated by simply replacing the folder
with the plugin with the new version.

This automatic upgrade of Nexus works for nearly all update
ranges. All 2.x versions can directly upgrade to the latest
version. All 1.x version can upgrade to 2.7.x maximum. If you need to
upgrade from 1.x to a newer version, you need to perform an
intermediate upgrade step to a 2.x version.

NOTE: The same upgrade process can be used to change from the open
source to the professional version of Nexus.
////

[[install-sect-running]]
=== Running Nexus

When you start Nexus, you are starting a web server running the Nexus
application. Nexus runs within a servlet container called Eclipse
Jetty. Nexus ships with generic startup scripts for Unix-like
platforms called +nexus+ and for Windows platforms called +nexus.bat+
in the +bin+ folder. To start Nexus on a Unix-like platform like
Linux use

----
cd /opt/nexus
./bin/nexus console
----

Similarly, starting on Windows can be done with the +nexus.bat+
file. Starting Nexus with the `console` command will leave Nexus running
in the current shell and display the log output.

Nexus is fully started once you see a message like the following in the log:

[subs="attributes"]
----
-------------------------------------------------

Started Sonatype Nexus OSS {version-exact}

-------------------------------------------------
----

At this point, Nexus will be listening on all IP addresses that are
configured for the current host on port 8081. To access the Nexus web
application, fire up a web browser and type in the URL
http://localhost:8081/[http://localhost:8081/].

While we use +localhost+ throughout this documentation, you may need
to use the IP Loopback Address of +127.0.0.1+, the IP address or the
DNS hostname assigned to the machine running Nexus.

In order to shut down Nexus running via the `console` command, you
have to press `CTRL-D`.

Alternatively you can access the console of Apache Karaf, the OSGi
container in which Nexus components are managed, by simply pressing
the `Enter` key. This console provides access to numerous
features. Type `help` for more information. Apache Karaf including the
running Nexus can be stopped with `system:shutdown`.

////
When first starting {pro} you are presented with a
form that allows you to request a trial activation. This page
displayed in <<fig-installing-trial-form>> contains a link to
the license activation screen in
<<fig-installing-license-activation>>.

[[fig-installing-trial-form]]
.Nexus Trial Activation Form
image::figs/web/installing-trial-form.png[scale=50]

After submitting the form for your trial activation, you will receive a
license key via email that you can use in the license activation screen to
activate {pro}. If you already have a license key or
license file, you can use the same screen to upload the file and
register your license.

[[fig-installing-license-activation]]
.Nexus License Activation
image::figs/web/installing-license-activation.png[scale=50]

Once you have agreed to the End User License Agreement you will be
directed to the Sonatype {pro} Welcome screen displayed in
<<fig-installing-pro-eval-welcome>>.

[[fig-installing-pro-eval-welcome]]
.Sonatype {pro} Welcome Screen
image::figs/web/installing-pro-eval-welcome.png[scale=50]

Click on the 'Log In' link in the upper
right-hand corner of the web page, and you should see the login dialog
displayed in <<fig-installing-nexus-login-dialog>>.

TIP: The default administrator username and password combination is
+admin+ and +admin123+.

[[fig-installing-nexus-login-dialog]]
.Nexus Log In Dialog (default login/password is admin/admin123)
image::figs/web/installing-nexus-login-dialog.png[scale=50]

When you are logged into your evaluation version of {pro},
you will see some helpful links to the {pro} Evaluation Guide,
Sample Projects and the Knowledgebase below the search input on the
Welcome screen.

With a full license for Nexus these links will be removed and you will
get the Nexus Application Window displayed in <<fig-installing-nexus-default-screen>>.

{oss} will not need to be activated with a license key and
will display a number of links to resources and support on the Welcome
screen to logged in users.

[[fig-installing-nexus-default-screen]]
.Nexus Application Window
image::figs/web/installing-nexus-default-screen.png[scale=60]


tbd

[[install-sect-repoman-post-install]]
=== Post-Install Checklist

Nexus ships with some default passwords and settings for repository
indexing that need to be changed for your installation to be useful
(and secure). After installing and running Nexus, you need to make
sure that you complete the following tasks:

==== Step 1: Change the Administrative Password and Email Address

The administrative password defaults to 'admin123'. The first thing you
should do to your new Nexus installation is change this password. To
change the administrative password, login as 'admin' with the password
'admin123', and click on 'Change Password' under the 'Security' menu in
the left-hand side of the browser window. For more detailed
instructions, see <<using-sect-user-profile>>.

==== Step 2: Configure the SMTP Settings

Nexus can send username and password recovery emails. To enable this
feature, you will need to configure Nexus with a SMTP Host and Port as
well as any necessary authentication parameters that Nexus needs to
connect to the mail server. To configure the SMTP settings, follow
the instructions in <<config-sect-smtp>>.

==== Step 3: Configure Default HTTP and HTTPS Proxy Settings

In many deployments the internet, and therefore any remote
repositories that Nexus needs to proxy, can only be reached via a HTTP
and HTTPS proxy server internal to the deployment company. In these
cases the connection details to that proxy server need to be
configured in Nexus, as documented in <<config-default-http-proxy>> in
order for Nexus to be able to proxy remote repositories at all.

==== Step 4: Enable Remote Index Downloads

Nexus ships with three important proxy repositories for the Maven
Central repository, Apache Snapshot repository, and the Codehaus
Snapshot repository. Each of these repositories contains thousands (or
tens of thousands) of components and it would be impractical to
download the entire contents of each. To that end, most repositories
maintain an index which catalogues the entire contents and provides
for fast and efficient searching. Nexus uses these remote indexes to
search for components, but we've disabled the index download as a
default setting. To download remote indexes:

. Click on 'Repositories' under the 'Views/Repositories' menu in the
  left-hand side of the browser window.

. Select each of the three proxy repositories and change 'Download
  Remote Indexes' to 'true' in the 'Configuration' tab. You'll need to load
  the dialog shown in <<fig-repo-config>> for each of
  the three repositories.

This will trigger Nexus to re-index these repositories, during which
the remote index files will be downloaded. It might take Nexus a few
minutes to download the entire index, but once you have it, you'll be
able to search the entire contents of the Maven repository.

Once you've enabled remote index downloads, you still will not be able
to browse the complete contents of a remote repository. Downloading
the remote index allows you to search for components in a repository,
but until you download those components from the remote repository they
will not show in the repository tree when you are browsing a
repository. When browsing a repository, you will only be shown
components which have been downloaded from the remote repository.


==== Step 7: Configure Routes

A route defines patterns used to define and identify the repositories in which the components
are searched for. Typically, internal components are not available in
the Central Repository or any other external, public repository. A route, as documented in
<<confignx-sect-managing-routes>>, should be configured so that any
requests for internal components do not leak to external repositories.
////

[[configure-runtime]]
=== Configuring the Runtime Environment for Nexus

Nexus is an application providing a web application user interface and running as a server application with the help of
the Eclipse Jetty servlet container and the Apache Karaf OSGi container running on a Java Virtual Machine.

Configuring the specifics of this runtime involves configuration for these components in various configuration files and
startup scripts. This section details these and provides recipes for specific tasks.

The startup of the JVM running Nexus is managed via files in the `bin` directory within the Nexus installation. Nexus
startup is performed with the JVM configured via the `JAVA_HOME` environment variable and the configuration in the file
`bin\setenv` .

The main location for further configuration files is the `etc` directory within the Nexus installation. It numerous files
including specifically:

config.properties:: The main configuration for the Apache Karaf runtime. This file should 'not' be modified.

custom.properties:: Customizable configuration used by Apache Karaf. This file can be used to pass additional parameters
to the Apache Karaf container and includes configuration for modifiying the startup of Eclipse Jetty e.g. to add HTTPS
configuration.

jetty-*.xml:: A number of configuration files for Eclipse Jetty

org.apache.* and org.ops4j.*:: Various Karaf and OSGi related configuration files.

org.sonatype.nexus.cfg:: Main configuration file for the Nexus application allowing you to configure aspects such as ports
used for HTTP and HTTPS access as well as the context path and host.

system.properties:: Configuration parameters used for the JVM and application start up.

////

tbd once implemented
[[install-sect-service]]
=== Configuring Nexus as a Service

When installing Nexus for production usage you should configure Nexus
as a service, so it starts back up after server reboots. It is good
practice to run that service or daemon as a specific user that has
only the required access righs. The following sections provide
instructions for configuring Nexus as a service or daemon on various
operating systems.

==== Running as a Service on Linux

You can configure Nexus to start automatically by copying the +nexus+
script to the +/etc/init.d+ directory. On a Linux system
perform the following operations as the root user:

. Create a +nexus+ user with sufficient access rights to run the
service

. Copy either +$NEXUS_HOME/bin/nexus+  to +/etc/init.d/nexus+ or
create a symlink

. Make the +/etc/init.d/nexus+ script executable -
+
----
chmod 755 /etc/init.d/nexus
----

. Edit this script changing the following variables:

.. Change +NEXUS_HOME+ to the absolute folder location (e.g.,
+NEXUS_HOME="/usr/local/nexus"+)

.. Set the +RUN_AS_USER+ to +nexus+ or any other user with restricted
  rights that you want to use to run the service. You should not be
  running Nexus as root.

.. Change +PIDDIR+ to a directory where this user has read/write
permissions. In most Linux distributions, +/var/run+ is only writable by
root. The property you need to add to customize the PID
file location is +wrapper.pid+. For more information about this
property and how it would be configured in wrapper.conf, see:
http://wrapper.tanukisoftware.com/doc/english/properties.html[http://wrapper.tanukisoftware.com/doc/english/properties.html].


. Change the owner and group of your Nexus-related directories,
including +nexus-work+ configured in +nexus.properties+
defaulting to +sonatype-work/nexus+, to the +nexus+ user that will run
the application.

. If Java is not on the default path for the user running Nexus, add
a +JAVA_HOME+ variable which points to your local Java installation and
add a +$JAVA_HOME/bin+ to the +PATH+.

ifdef::promo[]
++++
<?dbhtml-include href="promo_nexusService.html"?>
++++
endif::[]

WARNING: While not recommended, it is possible to run Nexus as root
user by setting +RUN_AS_USER=root+.

===== Add Nexus as a Service on Red Hat, Fedora, and CentOS

This script has the appropriate chkconfig directives, so all you need
to do to add Nexus as a service is run the following commands:

----
$ cd /etc/init.d
$ chkconfig --add nexus
$ chkconfig --levels 345 nexus on
$ service nexus start
Starting Sonatype Nexus...
$ tail -f /usr/local/nexus/logs/wrapper.log
----

The second command adds +nexus+ as a service to be started and stopped
with the +service+ command. +chkconfig+ manages the
symbolic links in +/etc/rc[0-6].d+ which control the services to be
started and stopped when the operating system restarts or transitions
between run-levels. The third command adds nexus to run-levels 3, 4,
and 5. The service command starts Nexus, and the last command tails
the wrapper.log to verify that Nexus has been started successfully. If
Nexus has started successfully, you should see a message notifying you
that Nexus is listening for HTTP.

===== Add Nexus as a Service on Ubuntu and Debian

The process for setting up Nexus as a service on Ubuntu differs
slightly from the process used on a Red Hat variant. Instead of running
+chkconfig+, you should run the following sequence of commands once
you've configured the startup script in +/etc/init.d+.

----
$ cd /etc/init.d
$ update-rc.d nexus defaults
$ service nexus start
Starting Sonatype Nexus...
$ tail -f /usr/local/nexus/logs/wrapper.log
----

====  Running as a Service on Mac OS X

The standard way to run a service on Mac OS X is by using +launchd+,
which uses plist files for configuration. An example plist file for
Nexus installed in +/opt+ is shown <<ex-nexus-plist>>.

[[ex-nexus-plist]]
.A sample com.sonatype.nexus.plist file
----
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
    "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>com.sonatype.nexus</string>
    <key>ProgramArguments</key>
    <array>
        <string>/opt/nexus/bin/nexus</string>
        <string>start</string>
    </array>
    <key>RunAtLoad</key>
    <true/>
</dict>
</plist>
----

After saving the file as +com.sonatype.nexus.plist+ in
+/Library/LaunchDaemons/+ you have to change the ownership and access
rights.

----
sudo chown root:wheel /Library/LaunchDaemons/com.sonatype.nexus.plist
sudo chmod 644 /Library/LaunchDaemons/com.sonatype.nexus.plist
----


TIP: Consider setting up a different user to run Nexus and adapt
permissions and the RUN_AS_USER setting in the nexus startup script.

With this setup Nexus will start as a service at boot time. To
manually start it after the configuration you can use

----
sudo launchctl load /Library/LaunchDaemons/com.sonatype.nexus.plist
----

==== Running as a Service on Windows

The startup script for Nexus on Windows platforms is
+bin/nexus.bat+. Besides the standard commands for starting and
stopping the service, it has the additional commands +install+ and
+uninstall+. Running these commands with elevated privileges will set
up the service for you or remove it as desired. Once installed as a
service with the +install+ command, the batch file can be used to start
and stop the service. In addition, the service will be available in the
usual Windows service management console as a service named 'nexus'.


[[install-sect-proxy]]
=== Running Nexus Behind a Reverse Proxy

The Nexus installation bundle is based on the high-performance servlet
container Eclipse Jetty running the Nexus web application. This
achieves a very high performance of Nexus and make installation of a
separate proxy for performance improvements unnecessary.

However, in many cases organizations run applications behind a proxy
for security concerns, familiarity with securing a particular proxy
server or to consolidate multiple disparate applications using tools
like mod_rewrite.

Some brief instructions for establishing such a setup with Apache
httpd follow as an example. We assume that you've already installed
Apache 2, and that you are using a virtual host for
www.somecompany.com.

Let's assume that you wanted to host Nexus behind Apache httpd at the
URL http://www.somecompany.com. To do this, you'll need to change the
context path that Nexus is served from.

. Edit nexus.properties in +$NEXUS_HOME/conf+. You'll see an
  element named nexus-webapp-context-path. Change this value from
  +/nexus+ to +/+

. Restart Nexus and Verify that it is available on
  +http://localhost:8081/+

. Clear the Base URL in Nexus as shown in
  <<fig-config-administration-application-server>> under 'Application
  Server Settings'.

At this point, edit the httpd configuration file for the
www.somecompany.com virtual host. Include the following to expose
Nexus via mod_proxy at http://www.somecompany.com/.

----
ProxyRequests Off
ProxyPreserveHost On

<VirtualHost *:80>
  ServerName www.somecompany.com
  ServerAdmin admin@somecompany.com
  ProxyPass / http://localhost:8081/
  ProxyPassReverse / http://localhost:8081/
  ErrorLog logs/somecompany/nexus/error.log
  CustomLog logs/somecompany/nexus/access.log common
</VirtualHost>
----

If you just wanted to continue to serve Nexus at the +/nexus+ context
path, you would not change the +nexus-webapp-context-path+ and you
would include the context path in your ProxyPass and ProxyPassReverse

----
  ProxyPass /nexus/ http://localhost:8081/nexus/
  ProxyPassReverse /nexus/ http://localhost:8081/nexus/
----

If you want to serve Nexus on a context path that is different than the one it
has been configured for you will also need to add a ProxyPassReverseCookiePath.

----
  ProxyPass /nexus http://localhost:8081/
  ProxyPassReverse /nexus http://localhost:8081/
  ProxyPassReverseCookiePath / /nexus
----

When your reverse proxy is configured to serve https, but it proxies with plain
http to your Nexus instance, an additional header is required. This will ensure
Nexus renders absolute URLs using the correct protocol. When setting this header,
make sure that in <<fig-config-administration-application-server>> 'Force Base URL'
is not checked.

----
  RequestHeader set X-Forwarded-Proto "https"
----

Apache configuration is going to vary, based on your own application's
requirements and the way you intend to expose Nexus to the outside
world. If you need more details about Apache httpd and mod_proxy,
please see http://httpd.apache.org


tbd when needed

[[install-sect-licensing]]
=== Installing a {pro} License

When starting a {pro} trial installation you can upload your
license file as described in <<install-sect-running>> on the license
screen visible in <<fig-installing-license-activation>>.

If you are currently using an evaluation license or need to replace your
current license with a new one, click on Licensing in the
Administration menu. This will bring up the panel shown
in <<fig-installations-licensing>>. To upload your
{pro} license, click on Browse..., select the file, and
click on Upload.

[[fig-installations-licensing]]
.{pro} Licensing Panel
image::figs/web/repository-manager_license.png[scale=50]

Once you have selected a license and uploaded it to Nexus, {pro}
 will display a dialog box with the {pro}
End User License Agreement as shown in <<fig-installation-eula>>. If
you agree with the terms and conditions, click on "I Agree".

[[fig-installation-eula]]
.{pro} End User License Agreement
image::figs/web/installing_license_eula.png[scale=50]

Once you have agreed to the terms and conditions contained in the End
User License Agreement, {pro} will then display a dialog
box confirming the installation of a {pro} license, as
shown in <<fig-installation-license-upload-config>>.

[[fig-installation-license-upload-config]]
.License Upload Finished Dialog
image::figs/web/installing_license_uploaded.png[scale=50]

If you need to remove your {pro} license, you can click on
the "Uninstall License" button at the bottom of the Licensing
Panel. Clicking on this button will show the dialog in
<<fig-installation-config-uninstall>>, confirming that you want to
uninstall a license.

[[fig-installation-config-uninstall]]
.Uninstall License Confirmation Dialog
image::figs/web/installing_uninstall_license.png[scale=50]

Clicking Yes in this dialog box will uninstall the license from Nexus
Pro and display another dialog which confirms that the
license has been successfully uninstalled.

.License Uninstall Completed Dialog
image::figs/web/installing_uninstall_completed.png[scale=50]

==== License Expiration

When a {pro} license expires, the Nexus user interface
will have all functionality disabled except for the ability to install
a new license file.


tbd prior to GA maybe..

[[install-sect-dirs]]
=== Nexus Directories

The following sections describe the various directories that are a
part of any Nexus installation. When you install {oss} or
{pro}, you are creating two directories: a directory
containing the Nexus runtime and application often symlinked as
+nexus+ and a directory containing your own configuration and data -
+sonatype-work/nexus+. When you upgrade to a newer version of Nexus, you
replace the Nexus application directory and retain all of your own
custom configuration and repository data in +sonatype-work/+.

[[sect-installing-work-dir]]
==== Sonatype Work Directory

The Sonatype Work directory +sonatype-work+ is created as a sibling to
the +nexus+ application directory, and the location of this directory
can be configured via the +nexus.properties+ file which is described in
<<sect-installing-conf-dir>>.


The Sonatype Work Nexus directory +sonatype-work/nexus/+ contains a
number of subdirectories. Depending on the plugins installed and used,
some directories may or may be not present in your installation:

access/:: This directory contains a log of all IP addresses accessing
Nexus. The data can be viewed by clicking on Active Users Report in
the Administration - Licensing tab in the Nexus user interface.

aether-local-repository/ or maven2-local-repository:: This holds
temporary files created when running Maven dependency queries in the
user interface.

backup/:: If you have configured a scheduled job to back up Nexus
configuration, this directory is going to contain a number of ZIP
archives that contain snapshots of Nexus configuration.  Each ZIP file
contains the contents of the conf/ directory. (Automated backups are a
feature of {pro}.)

broker/:: The broker directory and its subdirectories contains the
storage backend for the Smart Proxy messaging component.

conf/:: This directory contains the Nexus configuration.  Settings
that define the list of Nexus repositories, the logging configuration,
the staging and procurement configuration, and the security settings
are all captured in this directory.

conf/keystore/:: Contains the automatically generated key used to
identify this Nexus instance for Smart Proxy usage

db/:: Contains the database storing the User Token information, if
that feature is enabled.

error-report-bundles/:: Used to contain the bundled archives of data
assembled for problem reporting. Since this feature has been removed
this folder can be safely deleted.

felix-cache/:: This directory holds the cache for the OSGi framework
Apache Felix, which is used for the Nexus plugin architecture.

health-check/:: Holds cached reports from the Repository Health Check
plugin.

indexer/ and indexer-pro/:: Contains a Nexus index for all repositories and repository
groups managed by Nexus. A Nexus index is a Lucene index which is the
standard for indexing and searching a Maven repository. Nexus
maintains a local index for all repositories, and can also download a
Nexus index from remote repositories.

logs/:: The nexus.log file that contains information about a running
instance of Nexus. This directory also contains archived copies of
Nexus log files. Nexus log files are rotated every day. To reclaim
disk space, you can delete old log files from the logs directory.

nuget/:: Contains the database supporting queries against NuGet
repositories used for .NET package support in Nexus.

p2/:: If you are using the P2 repository management features of Nexus
Pro, this directory contains a local cache of P2 repository
components.

plugin-repository/:: This directory contains any additionally
installed plugins from third parties as documented in
<<install-additional-plugins>>.

proxy/:: Stores data about the files contained in a remote
repository. Each proxy repository has a subdirectory in the
+proxy/attributes/+ directory and every file that Nexus has interacted
with in the remote repository has an XML file that captures the last
requested time stamp, the remote URL for a particular file, the length
of the file, the digests for a particular file, and others. If you need
to backup the local cached contents of
a proxy repository, you should also back up the contents of the proxy
repository's directory under +proxy/attributes/+

storage/:: Stores components and metadata for Nexus repositories. Each
repository is a subdirectory that contains the components in a
repository. If the repository is a proxy repository, the storage
directory will contain locally cached components from the remote
repository. If the repository is a hosted repository, the storage
directory will contain all components in the repository. If you need to
back-up the contents of a repository, you should back up the contents of
the storage directory.

support/:: The support zip archive documented in
<<support-tools>> is created and stored in this folder.

template-store/:: Contains the Maven settings template files
documented in detail in <<settings>>.

timeline/:: Contains an index which Nexus uses to store events and
other information to support internal operations. Nexus uses this
index to store feeds and history.

tmp/:: Folder used for temporary storage.

trash/:: If you have configured scheduled jobs to remove snapshot
components or to delete other information from repositories, the
deleted data will be stored in this directory.  To empty this trash
folder, view a list of Nexus repositories, and then click on the Trash
icon in the Nexus user interface.

The +conf/+ directory contains a number of files which allow for
configuration and customization of Nexus. All of the files contained
in this directory are altered by the Nexus administrative user
interface. While you can change the configuration settings contained
in these files with a text editor, Sonatype recommends that you modify
the contents of these files using the Nexus administrative user
interface. Depending on your Nexus version and the installed plugins,
the complete list of files may differ slightly.

broker.groovy:: A groovy script for configuring low-level properties
for Smart Proxy.

capabilities.xml:: Further Smart Proxy backend configuration.

healthcheck.properties:: Configuration for the Repository Health Check.

logback.properties, logback.xml and logback-*.xml:: Contains logging
configuration. If you need to customize the detail of log messages,
the frequency of log file rotation, or if you want to connect your
own custom logging appenders, you should edit the logback-nexus.xml
configuration file as desired. If you find log4j.properties files as
well, you can safely remove them since they are remnants from an old
version and are not used anymore.

lvo-plugin.xml:: Contains configuration for the latest version
plugin. This XML file contains the location of the properties file
that Nexus queries to check for a newer version of Nexus.

nexus.xml:: The bulk of the configuration of Nexus is contained in
this file. This file maintains a list of repositories and all
server-wide configuration like the SMTP settings, security realms,
repository groups, targets, path mappings and others.

pgp.xml:: Contains PGP key server configuration.

nexus-obr-plugin.properties:: Contains configuration for the Nexus
OSGi Bundle repository plugin in {pro}.

procurement.xml:: Contains configuration for the {pro}curement
plugin in {pro}.

security-configuration.xml:: Contains global security configuration.

security.xml:: Contains security configuration about users and roles.

staging.xml:: Contains configuration for the Nexus Staging Plugin in
{pro}.

[[sect-installing-conf-dir]]
==== Nexus Configuration Directory

After installing Nexus and creating the +nexus+ symlink as described
earlier, your fnexus folder contains another conf directory. This
directory contains configuration for the Jetty servlet container. You
will only need to modify the files in this directory if you are
customizing the configuration of Jetty servlet container or the
behavior of the scripts that start Nexus.

The files and folders contained in this directory are:
+
nexus.properties:: This file contains configuration variables which
control the behavior of Nexus and the Jetty servlet container. If you
are customizing the port and host that Nexus will listen to, you would
change the +application-port+ and +application-host+ properties defined in
this file. If you wanted to customize the location of the +sonatype-work+
directory, you would modify the value of the +nexus-work+ property
in this configuration file. Changing +nexus-webapp-context-path+ allows
you to configure the server context path Nexus will be available at.

[[jetty-xml]]
jetty.xml and jetty-*.xml:: Configuration files for the Eclipse Jetty
servlet container running Nexus. Jetty users are used to providing a
list of jetty XML config files which are merged to form the final
configuration. As an advanced configuration option, Nexus supports
this merging concept in its launcher code as of Nexus 2.8.
+
You can specify additional jetty XML
configuration files to load to form the final configuration.  For the
standard distribution bundle, these files can be specified using
special properties located in +NEXUS_HOME/bin/jsw/conf/wrapper.conf+.
+
----
wrapper.app.parameter.1=./conf/jetty.xml
wrapper.app.parameter.2=./conf/jetty-requestlog.xml
# add more indexed app parameters...
----
+
Any of the files located at +NEXUS_HOME/conf/jetty-*.xml+ can be
specified as part of the +wrapper.app.parameter.n+ property, where n
is the next highest number not already used. The
http://wrapper.tanukisoftware.com/doc/english/prop-app-parameter-n.html[Java
Service Wrapper]
documentation contains more information about this
property. This setup allows for a simple method to add configuration for
https, JMX and others by adjusting a few properties.


WARNING: Nexus version prior to 2.8 loaded all of the Jetty
configuration from one jetty.xml file, typically found at
+NEXUS_HOME/conf/jetty.xml+ and required modifications to this file
for configuration changes. Examples were available in
+NEXUS_HOME/conf/examples+. These files cannot be used in Nexus 2.8 or higher,
as they were intended to be standalone files that could not be merged
into other files.


tbd .. maybe move to other chapter

[[monitoring]]
=== Monitoring Nexus

Now that your Nexus instance is up and running, you need to ensure
that it stays that way. Typically this is done on a number of levels
and each organization and system administration team has its own
preferences and tools.

In general you can monitor:
+
* hardware values like CPU, memory or diskspace utilization and many more
* operating system level values like processes running
* Java Virtual Machine specific values
* application specific value

For the hardware and operating system values, a large number of
dedicated tools exist. Many of these tools can be configured to work
with application-specific logs and other events. The following section
discusses some of the available information in Nexus. It can
potentially be integrated into the usage of the more generic tools for
monitoring, log capturing and analysis.

A host of information from the operating system, the Java Virtual
Machine and Nexus itself is available via the
<<support-tools, Support Tools>>, which allow you to inspect the value directly in
the Nexus user interface.

[[general-logging]]
==== General Logging

Nexus logs events in the +sonatype-work/nexus/logs/nexus.log+ file. In
addition a dedicated user interface to configure and inspect the log
is available. Further information about this interface can be found in
<<logging>>.


[[request-access-logging]]
==== Request Access Logging

Logging all access requests to Nexus allows you to gain a good
understanding of the Nexus usage in your organization and the sources
of these requests.

For example, you will be able to tell if the main load is due to a CI
server  cluster or from your developers, based on the IP numbers of
the requests. You can also see the spread or requests and load across
different time zones. Also available for review are the URLs , API
calls, and features that are used in Nexus

Requests access logging is enabled by default in Nexus 2.8 or higher
and uses a performant and flexible LogBack implementation with
built-in log rotation already configured for 90 days of log file
retention. The log is written to the file
+sonatype-work/nexus/logs/request.log+.

The configuration is located in +NEXUS_HOME/conf/logback-access.xml+
and can be changed to suit your requirements. If you change the file, a
restart of Nexus is required for these changes to take effect.

If you do not want to run access logging, you can disable it by
commenting out the line

----
wrapper.app.parameter.2=conf/jetty-requestlog.xml
----

in +bin/jsw/conf/wrapper.conf+.

WARNING: Older versions of Nexus require different customization of the Jetty
configuration files. Instructions for these customizations can be
found on the https://support.sonatype.com/entries/21902551[support
site].

[[jmx]]
==== Using Java Management Extension JMX

JMX is a common tool for managing and monitoring Java applications
with client software like the free http://visualvm.java.net/[VisualVM]
and many others available. It can be performed locally on the server
as well as remotely.

Nexus can be configured to support JMX by adding

----
wrapper.app.parameter.3=./conf/jetty-jmx.xml
----

to the list of +wrapper.app+ parameters in
+NEXUS_HOME/bin/jsw/conf/wrapper.conf+ and set the parameters
+jmx-host+ and +jmx-port+ in +NEXUS_HOME/conf/nexus.properties+.

----
jmx-host=192.168.10.12
jmx-port=1099
----

+jmx-host+ is the host name, or commonly the IP address, to remotely
access Nexus using JMX from another host and +jmx-port+ is the network
port used for the connection. It is important to ensure that the port
is not blocked by any network setup, when connecting remotely. The
value of 1099 is the default port used for JMX, but any other
available port can be used as well.

WARNING: Nexus versions older than 2.8 require different procedures,
depending on the specific version.

Once Nexus is restarted with JMX enabled you can inspect the running
JVM in detail. <<monitoring-jmx-visualvm-overview>> and
<<monitoring-jmx-visualvm-charts>> show some example screenshots of
VisualVM connected to a Nexus instance running on localhost.

[[monitoring-jmx-visualvm-overview]]
.Overview of Nexus Monitored via JMX in VisualVM
image::figs/web/monitoring-jmx-visualvm-overview.png[scale=50]

[[monitoring-jmx-visualvm-charts]]
.CPU, Memory and Other Visualizations of Nexus Monitored via JMX in VisualVM
image::figs/web/monitoring-jmx-visualvm-charts.png[scale=50]

Depending on the tool used to connect, a number of monitoring, analysis
and troubleshooting actions can be performed. Please refer to the
documentation about your specific tool for more information.

////


////
/* Local Variables: */
/* ispell-personal-dictionary: "ispell.dict" */
/* End:             */
////
