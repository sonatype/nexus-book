[[install]]
== Installing and Running {pro}

[[prerequisites]]
=== {pro} Prerequisites

{pro} only has one prerequisite, a Java Runtime Environment (JRE)
compatible with Java 7 or Java 8. Nexus is most often run with the JRE
that is bundled with a Java Development Kit (JDK) installation. The
main supported Java distribution is the Oracle version.

To download the Oracle JDK, go to http://www.oracle.com/technetwork/java/javase/downloads/index.html . At a minimum Java
7u2 is required, but we recommend to use the latest available version.

[[downloading]]
=== Downloading Nexus

There are two distributions of Nexus: http://nexus.sonatype.org/[Nexus
OSS] and http://links.sonatype.com/products/nexus/pro/home[Nexus
Pro/Pro+].  Nexus OSS is a fully-featured repository
manager which can be freely used, customized, and distributed under
the Eclipse Public License (EPL Version 1). Nexus Pro/Pro+ is a
distribution of Nexus with features that are relevant to large
enterprises and organizations which require complex procurement and
staging workflows in addition to more advanced LDAP integration,
Atlassian Crowd support, and other development infrastructure. The
differences are explored in <<intro>>.

==== Downloading Nexus OSS

To download the latest Nexus OSS distribution, go to http://www.sonatype.org/nexus/go[http://www.sonatype.org/nexus/go]
and choose Nexus (TGZ) or Nexus (ZIP) shown in <<fig-installing-open-source-dl>>. This will download a a Gzip TAR (TGZ)
or a ZIP with identical contents. Your download will be file named +nexus-{version-exact}-bundle.zip+ or
+nexus-{version-exact}-bundle.tar.gz+.

[[fig-installing-open-source-dl]]
.Downloading Nexus OSS
image::figs/web/installing-open-source-dl.png[scale=40]

Older versions can be downloaded following the link at the bottom of
<<fig-installing-open-source-dl>> and selecting a version and archive
type in the page displayed in
<<fig-installing-open-source-dl-select>>.

[[fig-installing-open-source-dl-select]]
.Selecting a Specific Version of Nexus OSS to Download
image::figs/web/installing-open-source-dl-select.png[scale=30]

==== Downloading Nexus Pro

Nexus Pro can be downloaded as +zip+ or +tar.gz+ archive from
http://links.sonatype.com/products/nexus/pro/download[the Nexus
Pro support download page]. Existing customers with access to the support
system can also download it directly from the
http://links.sonatype.com/products/nexus/pro/support[Nexus
Pro Support landing page].

TIP: Use the http://www.sonatype.com/nexus/free-trial[Nexus Pro trial
version] for an evaluation.

[[installing]]
===  Installing Nexus

The following instructions are for installing Nexus OSS or
Nexus Pro as a stand-alone server. Nexus comes bundled with a
Jetty instance that listens to all configured IP addresses on a host
(0.0.0.0) and runs on port 8081 by default.

Installing Nexus is straightforward. Unpack the Nexus web
application archive in a directory. If you are installing Nexus on a
local workstation to give it a test run, you can install it in your
home directory or wherever you like. Nexus doesn't have any hard coded
directories. It will run from any directory. If you downloaded the ZIP

[subs="attributes"]
----
$ unzip nexus-{version-exact}-bundle.zip
----

And, if you download the GZip'd TAR archive, run:

[subs="attributes"]
----
$ tar xvzf nexus-{version-exact}-bundle.tar.gz
----

For Nexus Pro the equivalent commands would be 

[subs="attributes"]
----
$ unzip nexus-professional-{version-exact}-bundle.zip
$ tar xvzf nexus-professional-{version-exact}-bundle.tar.gz
----

CAUTION: There are some known incompatibilities with the version of the tar
command provided by Solaris and the GZip TAR format. If you are installing
Nexus on Solaris, you must use the GNU tar application, or you will
end up with corrupted files.

NOTE: If you are installing Nexus on a server, you might want to use a directory other than your home directory. On a
Unix machine, this book assumes that Nexus is installed in +/usr/local/nexus-{version-exact}+ with a symbolic link
+/usr/local/nexus+ to the +nexus+ directory. Using a generic symbolic link +nexus+ to a specific version is a common
practice which makes it easier to upgrade when a newer version of Nexus is made available.

[subs="attributes"]
----
$ sudo cp nexus-{version-exact}-bundle.tar.gz /usr/local
$ cd /usr/local
$ sudo tar xvzf nexus-{version-exact}-bundle.tar.gz
$ sudo ln -s nexus-{version-exact} nexus
----

Although it isn't required for Nexus to run, you may want to set an
environment variable NEXUS_HOME in your environment that
points to the installation directory of Nexus. This chapter will refer
to this location as +$NEXUS_HOME+.

NOTE: On Windows you should install Nexus outside +Program Files+ to
avoid problems with Windows file registry virtualization. If you plan
to run Nexus as a specific user you could install into the
+AppData\Local+ directory of that users home directory. Otherwise
simply go with e.g., +C:\nexus+ or something similar.

The Nexus installation directory +nexus-{version-exact}+ or +nexus-professional-{version-exact}+ has a sibling directory
named +sonatype-work+. This directory contains all of the repository and configuration data for Nexus and is stored
outside of the Nexus installation directory to make it easier to upgrade to a newer version of Nexus.

By default, this directory is always a sibling to the Nexus
installation directory. If you installed Nexus in the +/usr/local+
directory it would also contain a +sonatype-work+ subdirectory with a
nested +nexus+ directory containing all of the content and
configuration. The location of the +sonatype-work+ directory can be
customized by altering the nexus-work property in
+$NEXUS_HOME/conf/nexus.properties+.

[[upgrading]]
=== Upgrading Nexus

Since Nexus separates its configuration and data storage from the
application, it is easy to upgrade an existing Nexus installation. 

To upgrade Nexus, unpack the Nexus archive in the directory that
contains the existing Nexus installation. Once the archive is
unpacked, the new Nexus application directory should be a sibling to
your existing +sonatype-work/+ directory. 

If you have defined a symbolic link for the version of Nexus to use,
stop the server and change that to point at the new Nexus application
directory. When you start the new instance of Nexus it will read the
existing repository configuration from the +sonatype-work+ directory.
Depending on the version you upgrade from and to, some maintenance
tasks like rebuilding the internal indices can be necessary. Please
refer to the
http://links.sonatype.com/products/nexus/oss/upgrading[upgrade
notes] of the new release for more information on this. In addition, a
review of the
http://links.sonatype.com/products/nexus/oss/release-notes[release
notes] can be very useful to get a better understanding of potential,
additional steps required.

If you are using any additional plugins supplied by Sonatype, the new
version of Nexus you downloaded will contain a newer version of the
plugin. Be sure to copy the new version from the +optional-plugins+
folder to the +plugin-repository+ folder, as documented in
<<install-additional-plugins>>, and restart Nexus.

Externally supplied plugins are updated by simply replacing the folder
with the plugin with the new version.

This automatic upgrade of Nexus works for nearly all update
ranges. All 2.x versions can directly upgrade to the latest
version. All 1.x version can upgrade to 2.7.x maximum. If you need to
upgrade from 1.x to a newer version, you need to perform an
intermediate upgrade step to a 2.x version.

NOTE: The same upgrade process can be used to change from the open
source to the professional version of Nexus.

[[running]]
=== Running Nexus

When you start Nexus, you are starting a web server on the default
port +0.0.0.0:8081+. Nexus runs within a servlet container called
Eclipse Jetty, and it is started with a native service wrapper called the
http://wrapper.tanukisoftware.org/doc/english/introduction.html[Tanuki
Java Service Wrapper]. This service wrapper can be configured to run
Nexus as a Windows service or a Unix daemon. Nexus ships with generic
startup scripts for Unix-like platforms called +nexus+ and for
Windows platforms called +nexus.bat+ in the +$NEXUS_HOME/bin+
folder. To start Nexus on a Unix-like platform like Linux, MacOSX or
Solaris use

----
cd /usr/local/nexus
./bin/nexus console
----

Similarly, starting on Windows can be done with the +nexus.bat+
file. Starting Nexus with the console command will leave Nexus running
in the current shell and display the log output.

On Unix systems, you can start Nexus detached from the starting shell
with the start command even when not yet installed as a service.

----
./bin/nexus start
----

When executed you should see a feedback message and then you can follow
the startup process viewing the log file +logs/wrapper.log+
changes.  
----
Starting {pro}...
Started {pro}.
$ tail -f logs/wrapper.log 
----

At this point, Nexus will be running and listening on all IP addresses
(0.0.0.0) that are configured for the current host on port 8081. To
use Nexus, fire up a web browser and type in the URL
http://localhost:8081/nexus[http://localhost:8081/nexus]. You should see 
the Nexus user interface as displayed in <<fig-installing-nexus-default-screen>>.

While we use +localhost+ throughout this book, you may need to use the
IP Loopback Address of +127.0.0.1+, the IP address or the DNS hostname 
assigned to the machine running Nexus. 

ifdef::promo[]
++++
<?dbhtml-include href="promo_group.html"?>
++++
endif::[]

When first starting Nexus Pro you are presented with a
form that allows you to request a trial activation. This page
displayed in <<fig-installing-trial-form>> contains a link to
the license activation screen in 
<<fig-installing-license-activation>>. 

[[fig-installing-trial-form]]
.Nexus Trial Activation Form
image::figs/web/installing-trial-form.png[scale=50]

After submitting the form for your trial activation, you will receive a
license key via email that you can use in the license activation screen to
activate Nexus Pro. If you already have a license key or
license file, you can use the same screen to upload the file and
register your license.

[[fig-installing-license-activation]]
.Nexus License Activation 
image::figs/web/installing-license-activation.png[scale=50]

Once you have agreed to the End User License Agreement you will be
directed to the {pro} Welcome screen displayed in
<<fig-installing-pro-eval-welcome>>.

[[fig-installing-pro-eval-welcome]]
.{pro} Welcome Screen 
image::figs/web/installing-pro-eval-welcome.png[scale=50]

Click on the 'Log In' link in the upper
right-hand corner of the web page, and you should see the login dialog
displayed in <<fig-installing-nexus-login-dialog>>. 

TIP: The default administrator username and password combination is
+admin+ and +admin123+.

[[fig-installing-nexus-login-dialog]]
.Nexus Log In Dialog (default login/password is admin/admin123)
image::figs/web/installing-nexus-login-dialog.png[scale=50]

When you are logged into your evaluation version of Nexus Pro,
you will see some helpful links to the Nexus Pro Evaluation Guide,
Sample Projects and the Knowledgebase below the search input on the
Welcome screen.

With a full license for Nexus these links will be removed and you will
get the Nexus Application Window displayed in <<fig-installing-nexus-default-screen>>.

Nexus OSS will not need to be activated with a license key and
will display a number of links to resources and support on the Welcome
screen to logged in users.

[[fig-installing-nexus-default-screen]]
.Nexus Application Window
image::figs/web/installing-nexus-default-screen.png[scale=60]


The files from Java Service Wrapper used for the start up process can
be found in +$NEXUS_HOME/bin/jsw+ and are separated into generic
files like the +wrapper.conf+ configuration file in conf and a
number of libraries in +lib+. An optional +wrapper.conf+ include
allows you to place further configuration optionally in
+$NEXUS_HOME/conf/wrapper-override.conf+.


The platform-specific directories are available for backwards
compatibility with older versions only and should not be used. A full
list of directories follows:

----
$ cd /usr/local/nexus/bin/jsw
$ ls -1                                                                             
conf
lib
license
linux-ppc-64
linux-x86-32
linux-x86-64
macosx-universal-32
macosx-universal-64
solaris-sparc-32
solaris-sparc-64
solaris-x86-32
windows-x86-32
windows-x86-64
----

The +wrapper.conf+ file is the central configuration file for the
startup of the Jetty servlet container running Nexus on a Java virtual
machine and therefore includes configuration for things such as the
java command to use, Java memory configuration, logging configuration
and other settings documented in the configuration file.

Typical modifications include adapting the maximum memory size to your
server hardware and usage requirements e.g. 2000 MB up from the
default 768 and other JVM related configurations.

----
wrapper.java.maxmemory=2000
----

You can configure JSW to use a specific Java installation and not just
the Java command found on the `PATH` by setting `JAVA_HOME` in the
`wrapper.conf` file and using it for the startup command.

----
set.JAVA_HOME=/opt/jdk1.8.0_40/
wrapper.java.command=%JAVA_HOME%/bin/java
----

A typical use case is using a custom installation of the Oracle JDK 
instead of OpenJDK that is preinstalled as part of the Linux 
distribution. 

Additional configuration in the +wrapper.conf+ file includes
activation of further Jetty configuration file for monitoring Nexus
via <<jmx, JMX>> or using <<ssl-sect-ssl-direct,HTTPS>>.


TIP: The startup script +nexus+ supports the common service
commands +start+, +stop+, +restart+, +status+,
+console+ and +dump+.

[[install-sect-repoman-post-install]]
=== Post-Install Checklist

Nexus ships with some default passwords and settings for repository
indexing that need to be changed for your installation to be useful
(and secure). After installing and running Nexus, you need to make
sure that you complete the following tasks:

==== Step 1: Change the Administrative Password and Email Address

The administrative password defaults to 'admin123'. The first thing you
should do to your new Nexus installation is change this password. To
change the administrative password, login as 'admin' with the password
'admin123', and click on 'Change Password' under the 'Security' menu in
the left-hand side of the browser window. For more detailed
instructions, see <<using-sect-user-profile>>.

==== Step 2: Configure the SMTP Settings

Nexus can send username and password recovery emails. To enable this
feature, you will need to configure Nexus with a SMTP Host and Port as
well as any necessary authentication parameters that Nexus needs to
connect to the mail server. To configure the SMTP settings, follow
the instructions in <<config-sect-smtp>>.

==== Step 3: Configure Default HTTP and HTTPS Proxy Settings

In many deployments the internet, and therefore any remote
repositories that Nexus needs to proxy, can only be reached via a HTTP
and HTTPS proxy server internal to the deployment company. In these
cases the connection details to that proxy server need to be
configured in Nexus, as documented in <<config-default-http-proxy>> in
order for Nexus to be able to proxy remote repositories at all.

==== Step 4: Enable Remote Index Downloads

Nexus ships with three important proxy repositories for the Maven
Central repository, Apache Snapshot repository, and the Codehaus
Snapshot repository. Each of these repositories contains thousands (or
tens of thousands) of components and it would be impractical to
download the entire contents of each. To that end, most repositories
maintain an index which catalogues the entire contents and provides
for fast and efficient searching. Nexus uses these remote indexes to
search for components, but we've disabled the index download as a
default setting. To download remote indexes:

. Click on 'Repositories' under the 'Views/Repositories' menu in the
  left-hand side of the browser window.

. Select each of the three proxy repositories and change 'Download
  Remote Indexes' to 'true' in the 'Configuration' tab. You'll need to load
  the dialog shown in <<fig-repo-config>> for each of
  the three repositories.

This will trigger Nexus to re-index these repositories, during which
the remote index files will be downloaded. It might take Nexus a few
minutes to download the entire index, but once you have it, you'll be
able to search the entire contents of the Maven repository.

Once you've enabled remote index downloads, you still will not be able
to browse the complete contents of a remote repository. Downloading
the remote index allows you to search for components in a repository,
but until you download those components from the remote repository they
will not show in the repository tree when you are browsing a
repository. When browsing a repository, you will only be shown
components which have been downloaded from the remote repository.

==== Step 5: Change the Deployment Password

The deployment user's password defaults to 'deployment123'. Change this
password to make sure that only authorized developers can deploy
components to your Nexus installation. To change the deployment password, 
log in as an administrator. Click on 'Security' to expand the security menu. 
When the menu appears, click on 'Users'.  A list of users will appear. 
At that point, right-click on the user named 'Deployment' and select 'Set Password'.


==== Step 6: If Necessary, Set the LANG Environment Variable

If your Nexus instance needs to store configuration and data using an
international character set, you should set the +LANG+ environment
variable. The Java Runtime will adapt to the value of the +LANG+
environment variable and ensure that configuration data is saved using
the appropriate character type. If you are starting Nexus as a
service, place this environment variable in the startup script found
in +/etc/init.d/nexus+. 

==== Step 7: Configure Routes

A route defines patterns used to define and identify the repositories in which the components
are searched for. Typically, internal components are not available in
the Central Repository or any other external, public repository. A route, as documented in
<<confignx-sect-managing-routes>>, should be configured so that any
requests for internal components do not leak to external repositories.


[[install-sect-service]]
=== Configuring Nexus as a Service

When installing Nexus for production usage you should configure Nexus
as a service, so it starts back up after server reboots. It is good
practice to run that service or daemon as a specific user that has
only the required access righs. The following sections provide
instructions for configuring Nexus as a service or daemon on various
operating systems.

==== Running as a Service on Linux

You can configure Nexus to start automatically by copying the +nexus+
script to the +/etc/init.d+ directory. On a Linux system 
perform the following operations as the root user:

. Create a +nexus+ user with sufficient access rights to run the
service 

. Copy +$NEXUS_HOME/bin/nexus+ to +/etc/init.d/nexus+

. Make the +/etc/init.d/nexus+ script executable and owned by the root 
user - 
+
----
chmod 755 /etc/init.d/nexus
chown root /etc/init.d/nexus
----



. Edit this script changing the following variables:

.. Change +NEXUS_HOME+ to the absolute folder location (e.g., 
+NEXUS_HOME="/usr/local/nexus"+)

.. Set the +RUN_AS_USER+ to +nexus+ or any other user with restricted
  rights that you want to use to run the service. You should not be
  running Nexus as root.

.. Change +PIDDIR+ to a directory where this user has read/write
permissions. In most Linux distributions, +/var/run+ is only writable by
root. The property you need to add to customize the PID
file location is +wrapper.pidfile+. For more information about this
property and how it would be configured in wrapper.conf, see:
http://wrapper.tanukisoftware.com/doc/english/properties.html[http://wrapper.tanukisoftware.com/doc/english/properties.html].


. Change the owner and group of your Nexus-related directories,
including +nexus-work+ configured in +nexus.properties+
defaulting to +sonatype-work/nexus+, to the +nexus+ user that will run
the application.

. If Java is not on the default path for the user running Nexus, add
a +JAVA_HOME+ variable which points to your local Java installation and 
add a +$JAVA_HOME/bin+ to the +PATH+.

ifdef::promo[]
++++
<?dbhtml-include href="promo_nexusService.html"?>
++++
endif::[]

[[nonrootuser]]
WARNING: We recommend to avoid running Nexus as the root user or a
similar privileged user, as this practice poses serious security risks
to the host operating system unnecessarily. Instead we suggest to
follow system administration best practice and use a service specific
user with the minimum required access rights only.

===== Add Nexus as a Service on Red Hat, Fedora, and CentOS

This script has the appropriate chkconfig directives, so all you need
to do to add Nexus as a service is run the following commands:

----
$ cd /etc/init.d
$ chkconfig --add nexus
$ chkconfig --levels 345 nexus on
$ service nexus start
Starting {pro}...
$ tail -f /usr/local/nexus/logs/wrapper.log
----

The second command adds +nexus+ as a service to be started and stopped
with the +service+ command. +chkconfig+ manages the
symbolic links in +/etc/rc[0-6].d+ which control the services to be
started and stopped when the operating system restarts or transitions
between run-levels. The third command adds nexus to run-levels 3, 4,
and 5. The service command starts Nexus, and the last command tails
the wrapper.log to verify that Nexus has been started successfully. If
Nexus has started successfully, you should see a message notifying you
that Nexus is listening for HTTP.

===== Add Nexus as a Service on Ubuntu and Debian

The process for setting up Nexus as a service on Ubuntu differs
slightly from the process used on a Red Hat variant. Instead of running
+chkconfig+, you should run the following sequence of commands once
you've configured the startup script in +/etc/init.d+.

----
$ cd /etc/init.d
$ update-rc.d nexus defaults
$ service nexus start
Starting {pro}...
$ tail -f /usr/local/nexus/logs/wrapper.log
----

====  Running as a Service on Mac OS X

The standard way to run a service on Mac OS X is by using +launchd+,
which uses plist files for configuration. An example plist file for
Nexus installed in +/opt+ is shown <<ex-nexus-plist>>.

[[ex-nexus-plist]]
.A sample com.sonatype.nexus.plist file
----
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" 
    "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>com.sonatype.nexus</string>
    <key>ProgramArguments</key>
    <array>
        <string>/opt/nexus/bin/nexus</string>
        <string>start</string>
    </array>
    <key>RunAtLoad</key>
    <true/>
</dict>
</plist>
----

After saving the file as +com.sonatype.nexus.plist+ in
+/Library/LaunchDaemons/+ you have to change the ownership and access
rights.

----
sudo chown root:wheel /Library/LaunchDaemons/com.sonatype.nexus.plist
sudo chmod 644 /Library/LaunchDaemons/com.sonatype.nexus.plist
----


TIP: Consider setting up a different user to run Nexus and adapt
permissions and the RUN_AS_USER setting in the nexus startup script.
 
With this setup Nexus will start as a service at boot time. To
manually start it after the configuration you can use

----
sudo launchctl load /Library/LaunchDaemons/com.sonatype.nexus.plist
----

==== Running as a Service on Windows

The startup script for Nexus on Windows platforms is
+bin/nexus.bat+. Besides the standard commands for starting and
stopping the service, it has the additional commands +install+ and
+uninstall+. Running these commands with elevated privileges will set
up the service for you or remove it as desired. Once installed as a
service with the +install+ command, the batch file can be used to start
and stop the service. In addition, the service will be available in the
usual Windows service management console as a service named 'nexus'.

[[install-sect-proxy]]
=== Running Nexus Behind a Reverse Proxy

Nexus is a sophisticated web application, answering HTTP requests
using the high-performance servlet container http://eclipse.org/jetty[Eclipse
Jetty].

Organizations are sometimes required to run applications like Nexus behind a
https://en.wikipedia.org/wiki/Reverse_proxy[reverse proxy]. Reasoning can
include:

* security and auditing concerns
* network administrator familiarity
* organizational policy
* disparate application consolidation
* virtual hosting
* exposing applications on restricted ports
* SSL termination

We provide some general guidance on how to configure common reverse proxy
servers to work with Nexus. Always consult your reverse proxy administrator
to ensure you configuration is secure.

There are two main settings of Nexus which can affect how reverse proxies
interact.

[[nexus_webapp_context_path]]
==== Nexus Webapp Context Path

Nexus webapp context path is +/nexus+ by default. This means every URL path used
to access Nexus must begin with +/nexus+.

In cases where Nexus needs to be accessed at a different base path, through your
reverse proxy or directly, you must change the default path by editing a
property value.

For example, to expose Nexus at path slash ( +/+ ) instead of +/nexus/+:

. Edit +$NEXUS_HOME/conf/nexus.properties+. Change
  +nexus-webapp-context-path=/nexus+ to +nexus-webapp-context-path=/+

. Restart Nexus and verify that it is available on +http://localhost:8081/+ and
  no longer available at +http://localhost:8081/nexus/+.

. Emails triggered by your Nexus instance may include absolute links back to the
  originating Nexus server. As a matter of courtesy, set the Base URL in
  Nexus as shown in <<fig-config-administration-application-server>> under
  'Application Server Settings' to the URL that will be externally available
  to your users e.g. +http://repo.example.com/+.

==== Do Not Force Base URL

At _Administration_ -> _Server_ -> _Application Server Settings_ Nexus has a
deprecated _Force Base URL_ feature. The original use case for forcing base URL
is no longer valid.

When enabled, the incoming request host and base path is ignored and Nexus acts
like it is being accessed at the value of base URL.

WARNING: Do not enable the <<fig-config-administration-application-server>>
'Force Base URL' unless explicitly advised by Sonatype - enabling this will most
likely cause Nexus to not work properly through a reverse proxy.

==== Example: Reverse Proxy On Restricted Ports

.Scenario:

You need to expose Nexus on restricted port 80. <<nonrootuser,Nexus should not
be run with the root user>>. Instead run your reverse proxy on the restricted
port +80+ and Nexus on the default port +8081+. End users will access Nexus
using the virtual host URL +http://www.example.com/nexus+ instead of
+http://localhost:8081/nexus+.

Ensure your external host name ( +www.example.com+ ) routes to your reverse
proxy server.

.Apache httpd

----
ProxyRequests Off
ProxyPreserveHost On

<VirtualHost *:80>
  ServerName www.example.com
  ServerAdmin admin@example.com
  ProxyPass /nexus http://localhost:8081/nexus
  ProxyPassReverse /nexus http://localhost:8081/nexus
  ErrorLog logs/www.example.com/nexus/error.log
  CustomLog logs/www.example.com/nexus/access.log common
</VirtualHost>
----

.nginx

----
http {

    proxy_send_timeout 120;
    proxy_read_timeout 300;
    proxy_buffering    off;
    keepalive_timeout  5 5;
    tcp_nodelay        on;

    server {
        listen   *:80;
        server_name  www.example.com;

        # allow large uploads of files - refer to nginx documentation
        client_max_body_size 1G

        # optimize downloading files larger than 1G - refer to nginx doc before adjusting
        #proxy_max_temp_file_size 2G

        location /nexus {
            proxy_pass http://localhost:8081/nexus;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}
----

==== Example: Reverse Proxy Virtual Host at Base Path

.Scenario:

You need to expose Nexus using a custom host name of +repo.example.com+ on a
restricted port at a base path of slash ( +/+ ).

Ensure your external host name ( +repo.example.com+ ) routes to your reverse
proxy server and <<nexus_webapp_context_path,edit the Nexus webapp
path to be slash ( +/+ )>>.

.Apache httpd

----
ProxyRequests Off
ProxyPreserveHost On

<VirtualHost *:80>
  ServerName repo.example.com
  ServerAdmin admin@example.com
  ProxyPass / http://localhost:8081/
  ProxyPassReverse / http://localhost:8081/
  ErrorLog logs/repo.example.com/nexus/error.log
  CustomLog logs/repo.example.com/nexus/access.log common
</VirtualHost>
----

.nginx

----
http {

    proxy_send_timeout 120;
    proxy_read_timeout 300;
    proxy_buffering    off;
    keepalive_timeout  5 5;
    tcp_nodelay        on;

    server {
        listen   *:80;
        server_name  repo.example.com;

        # allow large uploads of files - refer to nginx documentation
        client_max_body_size 1G

        # optimize downloading files larger than 1G - refer to nginx doc before adjusting
        #proxy_max_temp_file_size 2G

        location / {
            proxy_pass http://localhost:8081/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}
----

==== Example: Reverse Proxy SSL Termination at Base Path

.Scenario:

Your organization has standardized on a reverse proxy to handle SSL certificates
and termination. The reverse proxy virtual host will accept HTTPS requests on
the standard port +443+ and serve content from Nexus running on the default
non-restricted HTTP port +8081+ transparently to end users.

Ensure your external host name ( +repo.example.com+ ) routes to your reverse
proxy server and <<nexus_webapp_context_path,edit the Nexus webapp
path to be slash ( +/+ )>>.

To test your configuration, we offer a
https://support.sonatype.com/entries/95353268-SSL-Self-Signed-Certificate-Guide[quick reference on how to generate self-signed SSL certificates]
for reverse proxy servers.

.Apache httpd

Ensure Apache httpd is loading mod_ssl.

----
Listen 443

ProxyRequests Off
ProxyPreserveHost On

<VirtualHost *:443>
  SSLEngine on

  SSLCertificateFile "example.pem"
  SSLCertificateKeyFile "example.key"

  ServerName repo.example.com
  ServerAdmin admin@example.com
  ProxyPass / http://localhost:8081/
  ProxyPassReverse / http://localhost:8081/
  RequestHeader set X-Forwarded-Proto "https"

  ErrorLog logs/repo.example.com/nexus/error.log
  CustomLog logs/repo.example.com/nexus/access.log common
</VirtualHost>
----

.nginx

Make sure nginx is compiled using the +--with-http_ssl_module+ option.

----
http {

    proxy_send_timeout 120;
    proxy_read_timeout 300;
    proxy_buffering    off;
    keepalive_timeout  5 5;
    tcp_nodelay        on;

    server {
        listen   *:443;
        server_name  repo.example.com;

        # allow large uploads of files - refer to nginx documentation
        client_max_body_size 1G

        # optimize downloading files larger than 1G - refer to nginx doc before adjusting
        #proxy_max_temp_file_size 2G

        ssl on
        ssl_certificate      example.pem;
        ssl_certificate_key  example.key;

        location / {
            proxy_pass http://localhost:8081/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto "https";
        }
    }
}
----

NOTE: Reverse proxy configuration is going to vary and can get complex.
Always consult the specific reverse proxy product documentation.
http://httpd.apache.org[Apache httpd] ( http://httpd.apache.org/docs/current/mod/mod_proxy.html[mod_proxy], http://httpd.apache.org/docs/current/mod/mod_ssl.html[mod_ssl] ),
http://nginx.org/en/docs/[nginx] ( http://nginx.org/en/docs/http/ngx_http_proxy_module.html[ngx_http_proxy_module], http://nginx.org/en/docs/http/configuring_https_servers.html#compatibility[ssl compatibility] )

[[install-sect-licensing]]
=== Installing a Nexus Pro License

When starting a Nexus Pro trial installation you can upload your
license file as described in <<running>> on the license
screen visible in <<fig-installing-license-activation>>.

If you are currently using an evaluation license or need to replace your
current license with a new one, click on Licensing in the
Administration menu. This will bring up the panel shown
in <<fig-installations-licensing>>. To upload your
Nexus Pro license, click on Browse..., select the file, and
click on Upload.

[[fig-installations-licensing]]
.Nexus Pro Licensing Panel
image::figs/web/repository-manager_license.png[scale=50] 

Once you have selected a license and uploaded it to Nexus, Nexus Pro
will display a dialog box with the Nexus Pro
End User License Agreement as shown in <<fig-installation-eula>>. If
you agree with the terms and conditions, click on "I Agree".

[[fig-installation-eula]]
.Nexus Pro End User License Agreement
image::figs/web/installing_license_eula.png[scale=50] 

Once you have agreed to the terms and conditions contained in the End
User License Agreement, Nexus Pro will then display a dialog
box confirming the installation of a Nexus Pro license, as
shown in <<fig-installation-license-upload-config>>.

[[fig-installation-license-upload-config]]
.License Upload Finished Dialog
image::figs/web/installing_license_uploaded.png[scale=50]

If you need to remove your Nexus Pro license, you can click on
the "Uninstall License" button at the bottom of the Licensing
Panel. Clicking on this button will show the dialog in
<<fig-installation-config-uninstall>>, confirming that you want to
uninstall a license.

[[fig-installation-config-uninstall]]
.Uninstall License Confirmation Dialog
image::figs/web/installing_uninstall_license.png[scale=50]

Clicking Yes in this dialog box will uninstall the license from Nexus Pro
and display another dialog which confirms that the
license has been successfully uninstalled.

.License Uninstall Completed Dialog
image::figs/web/installing_uninstall_completed.png[scale=50]

Clicking on the 'Active Users Report' button shows a list of 
IP numbers that connected to Nexus in the last 7 days.

==== License Expiration

When a Nexus Pro license expires, the Nexus user interface
will have all functionality disabled except for the ability to install
a new license file.
 
[[install-sect-dirs]]
=== Nexus Directories

The following sections describe the various directories that are a
part of any Nexus installation. When you install Nexus OSS or
Nexus Pro, you are creating two directories: a directory
containing the Nexus runtime and application often symlinked as
+nexus+ and a directory containing your own configuration and data -
+sonatype-work/nexus+. When you upgrade to a newer version of Nexus, you
replace the Nexus application directory and retain all of your own
custom configuration and repository data in +sonatype-work/+.

[[sect-installing-work-dir]]
==== Sonatype Work Directory

The Sonatype Work directory +sonatype-work+ is created as a sibling to
the +nexus+ application directory, and the location of this directory
can be configured via the +nexus.properties+ file which is described in
<<nexus-home-conf>>. 


The Sonatype Work Nexus directory +sonatype-work/nexus/+ contains a
number of subdirectories. Depending on the plugins installed and used,
some directories may or may be not present in your installation:

access/:: This directory contains a log of all IP addresses accessing
Nexus. The data can be viewed by clicking on Active Users Report in
the Administration - Licensing tab in the Nexus user interface.

aether-local-repository/ or maven2-local-repository:: This holds
temporary files created when running Maven dependency queries in the
user interface.

backup/:: If you have configured a scheduled job to back up Nexus
configuration, this directory is going to contain a number of ZIP
archives that contain snapshots of Nexus configuration.  Each ZIP file
contains the contents of the conf/ directory. (Automated backups are a
feature of Nexus Pro.)

broker/:: The broker directory and its subdirectories contains the
storage backend for the Smart Proxy messaging component.

conf/:: This directory contains the Nexus configuration.  Settings
that define the list of Nexus repositories, the logging configuration,
the staging and procurement configuration, and the security settings
are all captured in this directory.

conf/keystore/:: Contains the automatically generated key used to
identify this Nexus instance for Smart Proxy usage

db/:: Contains the database storing the User Token information, if
that feature is enabled.

error-report-bundles/:: Used to contain the bundled archives of data
assembled for problem reporting. Since this feature has been removed
this folder can be safely deleted.

felix-cache/:: This directory holds the cache for the OSGi framework
Apache Felix, which is used for the Nexus plugin architecture.  

health-check/:: Holds cached reports from the Repository Health Check
plugin.

indexer/ and indexer-pro/:: Contains a Nexus index for all repositories and repository
groups managed by Nexus. A Nexus index is a Lucene index which is the
standard for indexing and searching a Maven repository. Nexus
maintains a local index for all repositories, and can also download a
Nexus index from remote repositories.

logs/:: The nexus.log file that contains information about a running
instance of Nexus. This directory also contains archived copies of
Nexus log files. Nexus log files are rotated every day. To reclaim
disk space, you can delete old log files from the logs directory.

nuget/:: Contains the database supporting queries against NuGet
repositories used for .NET package support in Nexus.

p2/:: If you are using the P2 repository management features of Nexus Pro, 
this directory contains a local cache of P2 repository components.

plugin-repository/:: This directory contains any additionally
installed plugins from third parties as documented in
<<install-additional-plugins>>.

proxy/:: Stores data about the files contained in a remote
repository. Each proxy repository has a subdirectory in the
+proxy/attributes/+ directory and every file that Nexus has interacted
with in the remote repository has an XML file that captures the last 
requested time stamp, the remote URL for a particular file, the length 
of the file, the digests for a particular file, and others. If you need 
to backup the local cached contents of
a proxy repository, you should also back up the contents of the proxy
repository's directory under +proxy/attributes/+

storage/:: Stores components and metadata for Nexus repositories. Each
repository is a subdirectory that contains the components in a
repository. If the repository is a proxy repository, the storage
directory will contain locally cached components from the remote
repository. If the repository is a hosted repository, the storage
directory will contain all components in the repository. If you need to
back-up the contents of a repository, you should back up the contents of
the storage directory.

support/:: The support zip archive documented in
<<support-tools>> is created and stored in this folder.  

template-store/:: Contains the Maven settings template files
documented in detail in <<maven-settings>>.

timeline/:: Contains an index which Nexus uses to store events and
other information to support internal operations. Nexus uses this
index to store feeds and history.

tmp/:: Folder used for temporary storage.

trash/:: If you have configured scheduled jobs to remove snapshot
components or to delete other information from repositories, the
deleted data will be stored in this directory.  To empty this trash
folder, view a list of Nexus repositories, and then click on the Trash
icon in the Nexus user interface.

The +conf/+ directory contains a number of files which allow for
configuration and customization of Nexus. All of the files contained
in this directory are altered by the Nexus administrative user
interface. While you can change the configuration settings contained
in these files with a text editor, Sonatype recommends that you modify
the contents of these files using the Nexus administrative user
interface. Depending on your Nexus version and the installed plugins,
the complete list of files may differ slightly.

broker.groovy:: A groovy script for configuring low-level properties
for Smart Proxy.

capabilities.xml:: Further Smart Proxy backend configuration.

healthcheck.properties:: Configuration for the Repository Health Check.

logback.properties, logback.xml and logback-*.xml:: Contains logging
configuration. If you need to customize the detail of log messages,
the frequency of log file rotation, or if you want to connect your
own custom logging appenders, you should edit the logback-nexus.xml
configuration file as desired. If you find log4j.properties files as
well, you can safely remove them since they are remnants from an old
version and are not used anymore.

lvo-plugin.xml:: Contains configuration for the latest version
plugin. This XML file contains the location of the properties file
that Nexus queries to check for a newer version of Nexus.

nexus.xml:: The bulk of the configuration of Nexus is contained in
this file. This file maintains a list of repositories and all
server-wide configuration like the SMTP settings, security realms,
repository groups, targets, path mappings and others.

pgp.xml:: Contains PGP key server configuration.

nexus-obr-plugin.properties:: Contains configuration for the Nexus
OSGi Bundle repository plugin in Nexus Pro.

procurement.xml:: Contains configuration for the Nexus Procurement
plugin in Nexus Pro.

security-configuration.xml:: Contains global security configuration. 

security.xml:: Contains security configuration about users and roles.

staging.xml:: Contains configuration for the Nexus Staging Plugin in
Nexus Pro.

[[nexus-home-conf]]
==== Nexus Configuration Directory

After installing Nexus and creating the +nexus+ symlink as described
earlier, your fnexus folder contains another conf directory. This
directory contains configuration for the Jetty servlet container. You
will only need to modify the files in this directory if you are
customizing the configuration of Jetty servlet container or the
behavior of the scripts that start Nexus.

The files and folders contained in this directory are:

nexus.properties:: This file contains configuration variables which
control the behavior of Nexus and the Jetty servlet container. If you
are customizing the port and host that Nexus will listen to, you would
change the +application-port+ and +application-host+ properties defined in
this file. If you wanted to customize the location of the +sonatype-work+ 
directory, you would modify the value of the +nexus-work+ property
in this configuration file. Changing +nexus-webapp-context-path+ allows
you to configure the server context path Nexus will be available at.

[[jetty-xml]]
jetty.xml and jetty-*.xml:: Configuration files for the Eclipse Jetty
servlet container running Nexus. Jetty users are used to providing a
list of jetty XML config files which are merged to form the final
configuration. As an advanced configuration option, Nexus supports
this merging concept in its launcher code as of Nexus 2.8.
+
You can specify additional jetty XML
configuration files to load to form the final configuration.  For the
standard distribution bundle, these files can be specified using
special properties located in +NEXUS_HOME/bin/jsw/conf/wrapper.conf+.
+
----
wrapper.app.parameter.1=./conf/jetty.xml
wrapper.app.parameter.2=./conf/jetty-requestlog.xml 
# add more indexed app parameters...  
----
+
Any of the files located at +NEXUS_HOME/conf/jetty-*.xml+ can be
specified as part of the +wrapper.app.parameter.n+ property, where n
is the next highest number not already used. The
http://wrapper.tanukisoftware.com/doc/english/prop-app-parameter-n.html[Java
Service Wrapper] 
documentation contains more information about this
property. This setup allows for a simple method to add configuration for
https, JMX and others by adjusting a few properties.


WARNING: Nexus version prior to 2.8 loaded all of the Jetty
configuration from one jetty.xml file, typically found at
+NEXUS_HOME/conf/jetty.xml+ and required modifications to this file
for configuration changes. Examples were available in
+NEXUS_HOME/conf/examples+. These files cannot be used in Nexus 2.8 or higher,
as they were intended to be standalone files that could not be merged
into other files.

[[monitoring]]
=== Monitoring Nexus 

Now that your Nexus instance is up and running, you need to ensure
that it stays that way. Typically this is done on a number of levels
and each organization and system administration team has its own
preferences and tools.

In general you can monitor:

* hardware values like CPU, memory or diskspace utilization and many more
* operating system level values like processes running
* Java Virtual Machine specific values
* application specific value

For the hardware and operating system values, a large number of
dedicated tools exist. Many of these tools can be configured to work
with application-specific logs and other events. The following section
discusses some of the available information in Nexus. It can
potentially be integrated into the usage of the more generic tools for
monitoring, log capturing and analysis.

A host of information from the operating system, the Java Virtual
Machine and Nexus itself is available via the 
<<support-tools, Support Tools>>, which allow you to inspect the value directly in
the Nexus user interface.

[[general-logging]]
==== General Logging 

Nexus logs events in the +sonatype-work/nexus/logs/nexus.log+ file. In
addition a dedicated user interface to configure and inspect the log
is available. Further information about this interface can be found in
<<logging>>.


[[request-access-logging]]
==== Request Access Logging

Logging all access requests to Nexus allows you to gain a good
understanding of the Nexus usage in your organization and the sources
of these requests. 

For example, you will be able to tell if the main load is due to a CI 
server  cluster or from your developers, based on the IP numbers of 
the requests. You can also see the spread or requests and load across 
different time zones. Also available for review are the URLs , API 
calls, and features that are used in Nexus

Requests access logging is enabled by default in Nexus 2.8 or higher
and uses a performant and flexible LogBack implementation with
built-in log rotation already configured for 90 days of log file
retention. The log is written to the file
+sonatype-work/nexus/logs/request.log+ and contains all requests and 
the username for authenticated requests.

The configuration is located in +NEXUS_HOME/conf/logback-access.xml+
and can be changed to suit your requirements. If you change the file, a
restart of Nexus is required for these changes to take effect.

If you do not want to run access logging, you can disable it by
commenting out the line 

----
wrapper.app.parameter.2=conf/jetty-requestlog.xml 
----

in +bin/jsw/conf/wrapper.conf+.

WARNING: Older versions of Nexus require different customization of the Jetty
configuration files. Instructions for these customizations can be
found on the https://support.sonatype.com/entries/21902551[support
site].

[[jmx]]
==== Using Java Management Extension JMX

JMX is a common tool for managing and monitoring Java applications
with client software like the free http://visualvm.java.net/[VisualVM]
and many others available. It can be performed locally on the server
as well as remotely.

Nexus can be configured to support JMX by adding

----
wrapper.app.parameter.3=./conf/jetty-jmx.xml
----

to the list of +wrapper.app+ parameters in
+NEXUS_HOME/bin/jsw/conf/wrapper.conf+ and set the parameters
+jmx-host+ and +jmx-port+ in +NEXUS_HOME/conf/nexus.properties+.

----
jmx-host=192.168.10.12
jmx-port=1099
----

+jmx-host+ is the host name, or commonly the IP address, to remotely
access Nexus using JMX from another host and +jmx-port+ is the network
port used for the connection. It is important to ensure that the port
is not blocked by any network setup, when connecting remotely. The
value of 1099 is the default port used for JMX, but any other
available port can be used as well.

WARNING: Nexus versions older than 2.8 require different procedures,
depending on the specific version.

Once Nexus is restarted with JMX enabled you can inspect the running
JVM in detail. <<monitoring-jmx-visualvm-overview>> and
<<monitoring-jmx-visualvm-charts>> show some example screenshots of
VisualVM connected to a Nexus instance running on localhost.

[[monitoring-jmx-visualvm-overview]]
.Overview of Nexus Monitored via JMX in VisualVM
image::figs/web/monitoring-jmx-visualvm-overview.png[scale=50]

[[monitoring-jmx-visualvm-charts]]
.CPU, Memory and Other Visualizations of Nexus Monitored via JMX in VisualVM
image::figs/web/monitoring-jmx-visualvm-charts.png[scale=50]

Depending on the tool used to connect, a number of monitoring, analysis
and troubleshooting actions can be performed. Please refer to the
documentation about your specific tool for more information.

[[analytics]]
==== Analytics

The analytics integration of Nexus allows you to gather a good
understanding of your Nexus usage, since it enables the collection of
event data in Nexus. It collects non-sensitive information about how
you are using Nexus. It is useful to you from a compatibility
perspective, since it gathers answers to questions such as what
features are most important, where are users having difficulties, and
what integrations/APIs are actively in use. 

The collected information is limited to the use of the Nexus user
interface and the Nexus REST API, the primary interaction
points between your environment and Nexus. Only the user interface
navigation flows and REST endpoints being called are recorded. None of
the request specific data (e.g., credentials or otherwise sensitive
information) is ever captured.

You can enable the event logging in the 'Settings' section of the
'Analytics' tab available via 'Analytics' menu item in the
'Administration' menu in the left side 'Nexus' navigation. Select the
checkbox beside 'Enable analytics event collection' and press the
'Save' button.

You can choose to provide this data automatically to Sonatype by
selecting the checkbox beside 'Enable automatic analytics event
submission'. It enables Sonatype to tailor the ongoing development of
the product. Alternatively, you can submit the data manually or just
use the gathered data for your own analysis only.

Once enabled all events logged can be inspected in the 'Events' tab in
the 'Analytics' section displayed in <<fig-analytics-events>>.

[[fig-analytics-events]]
.List of Events in the Analytics Tab
image::figs/web/analytics-events.png[scale=50]

The list of events shows the 'Type' and the 'Timestamp' of the event
as well as the 'User' that triggered it and any 'Attributes'. Each row
has a '+' symbol in the first column that allows you to expand the row
vertically. Each attribute will be expanded into a separate line
allowing you to inspect all the information that is potentially
submitted to Sonatype. The 'User' value is replaced by a salted hash
so that no username information is transmitted. The 'Anonymization
Salt' is automatically randomly generated by Nexus and can optionally be
configured in the 'Analytics: Collection' capability manually. This
administration area can additionally be used to change the random
identifier for the Nexus instance.

TIP: More information about capabilities can be found in <<capabilities>>.

If you desire to further inspect the data that is potentially
submitted, you can select to download the file containing the JSON
files in a zip archive by clicking the 'Export' button above the events list
and downloading the file. The 'Submit' button can be used to manually
submit the events to Sonatype.

When you select to automatically submit the analytics data, a
scheduled task, named 'Automatically submit analytics events', is
automatically created. This task is preconfigured to run at 1:00 AM
every day. If desired the recurrence can be changed in the scheduled
tasks administration area documented in <<scheduled-tasks>>.

IMPORTANT: Sonatype values your input greatly and hopes you will
activate the analytics feature and the automatic submission to allow
us to ensure ongoing development is well aligned with your needs. In
addition, we appreciate any further direct contact and feedback in
person and look forward to hearing from you.



////
/* Local Variables: */
/* ispell-personal-dictionary: "ispell.dict" */
/* End:             */
////
