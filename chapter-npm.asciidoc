[[npm]]
== Node Packaged Modules and npm Registries
{in} {oss}, {pro}, {proplus}

=== Introduction

The command line tool +npm+ is a package management solution for Javascript-based development. It is used to create and
use 'node packaged modules' and is built into the popular Javascript platform http://www.nodejs.org/[Node.js], which is
mostly used for server-side application development.

The npm registry at https://www.npmjs.org/[https://www.npmjs.org/] is the default package registry, from which
components can be retrieved.  It contains a large number of open source packages for Node.js based server-side
application development, build tools like 'bower' or 'grunt' and many other packages for a variety of use cases.

Nexus supports the npm registry format for proxy repositories. This allows you to take advantage of the packages in the
npm registry and other public registries without incurring repeated downloads of packages, since they will be proxied in
Nexus.

In addition, Nexus supports running your own private registry - also known as a hosted repository using the 'npm'
format. You can share internally developed, proprietary packages within your organization via these private registries
allowing you to collaborate efficiently across development teams with a central package exchange and storage location.

To simplify configuration Nexus supports aggregation of npm registries. This allows you to expose all the external
packages from the npm registry and other public registries as well as the private registries as one registry, which
greatly simplifies client configuration.

To share a package or tool with npm, you create a npm package and store it in the Nexus-based npm registry. Similarly,
you can use packages others have created and made available in their NPM repositories by proxying them or downloading
the packages and installing them in your own private registry for third party packages.


[[npm-proxying-registries]]
=== Proxying npm Registries

To reduce duplicate downloads and improve download speeds for your developers and CI servers, you should proxy the
registry hosted at -https://registry.npmjs.org[https://registry.npmjs.org]. By default npm accesses this registry
directly. You can also proxy any other registries you require.

To proxy an external npm registry, you simply create a new 'npm (proxy)' as documented in <<admin-repositories>>. The
'Remote Storage' has to be set to the URL of the remote repository you want to proxy. The official URL for the main npm
registry is `https://registry.npmjs.org`.

Minimal configuration steps are:

- Define 'Name'
- Define URL for 'Remote storage'
- Select 'Blobstore' for 'Storage'

[[npm-private-registries]]
=== Private npm Registries

A private npm registry can be used to upload your own packages as well as third-party packages. You can create a private
npm registry by setting up a hosted repository with the npm format in Nexus.It is good practice to create two separate
hosted repositories for these purposes.

To create a hosted repository with npm format, simply create a new 'npm (hosted)' as documented in
<<admin-repositories>>.

Minimal configuration steps are:

- Define 'Name'
- Select 'Blobstore' for 'Storage'

The npm registry information is immediately updated as packages are deployed or deleted from the repository.

//// 
TBD
The scheduled tasks to recreate the npm metadata database based on the
components in a hosted repository and to back up the database are
documented in <<scheduled-tasks>>.
////

[[npm-grouping-registries]]
=== Grouping npm Registries

A repository group is the recommended way to expose all your npm registries repositories from Nexus to your users,
without needing any further client side configuration. A repository group allows you to expose the aggregated content of
multiple proxy and hosted repositories with one URL to npm and other tools. This is possible for npm repositories by
creating a new 'npm (group)' as documented in <<admin-repositories>>.

Minimal configuration steps are:

- Define 'Name'
- Select 'Blobstore' for 'Storage'
- Add npm repositories to the 'Members' list in the desired order

A typical, useful example would be to group the proxy repository that: proxies the npm registry, a npm, hosted
repository with internal software packages and another npm, hosted repository with third-party packages.

Using the 'URL' of the repository group as your npm repository URL in your client tool will give you access to the
packages in all three repositories with one URL. Any new packages added as well as any new repositories added to the
group will automatically be available.


=== Browsing npm Registries and Searching Modules

////
TBD link to browse chapter once we got it
////

You can browse npm repositories in the Nexus user interface inspecting the components and assets and their details.

Searching for npm modules can be performed in the Nexus user interface as described in <<search-components>>. This
search will find all npm modules images that are currently stored in Nexus repositories, either because they have been pushed
to a hosted repository or they have been proxied from an upstream repository and cached in Nexus.

[[npm-configuring]]
=== Configuring npm 

Once you have set up your hosted and proxy repositories for npm packages, and created a repository group to merge them,
you can access them with the +npm+ tool on the command line as one registry.

You can configure the registry used by +npm+ in your +.npmrc+ file located in your user's home directory. If the file
does not exist simply create it and add the registry configuration with the URL of your npm repository group. You can
see the public URL of your group repository in the repository list in the 'Repository Path' column.

.Registry configuration in +.npmrc+
----
registry = http://localhost:8081/repository/npm-all/
----

With this configuration any npm commands will use the new registry from Nexus. The command line output will reference
the URLs:

----
$ npm install bower
npm install bower
npm http GET http://localhost:8081/repository/npm-all/bower
npm http 200 http://localhost:8081/repository/npm-all/bower
npm http GET http://localhost:8081/repository/npm-all/bower-config
...
----

By default any anonymous user has read access to the repositories and repository groups. If desired, Nexus can be
configured to require authentication by adding +always-auth=true+ to the +.npmrc+ file and adding the encoded
authentication details as documented in <<npm-deploying-packages>>.

[[npm-deploying-packages]]
=== Publishing npm Packages

Publishing your own packages to a npm hosted repository allows you to share packages across your organization or with
external partners.

Publishing requires authentication. It can be configured for your Nexus user account using +npm login+ on the
command line.  Provide your Nexus username and password when prompted.  Upon successful completion, a line for
authentication of this combination is automatically added to your +.npmrc+ configuration file.  Nexus supports
specifically targeted registries and scoped packages using +npm login+ as well, otherwise the authentication will
be used for all registries and packages unless further authentication definitions are configured.  Details on +npm
login+ can be seen on the https://docs.npmjs.com/cli/adduser[npm website].

Using authentication to publish further requires the +npm Bearer Token Realm+. Add the realm to the active realms
in the +Realms+ feature of the +Security+ menu from the +Administration+ menu to activate it.

With authentication configured you can publish your packages with the +npm publish+ command. 

The +npm publish+ command uses a +registry+ configuration value to know where to publish your package. There are
several ways to change the registry value to point at your Nexus hosted npm repository.

Since the +.npmrc+ file usually contains a registry value intended only for getting new packages, a simple way to
override this value is to provide a registry to the +publish+ command:

----
npm publish --registry http://localhost:8081/repository/npm-internal/ 
----

Alternately, you can edit your package.json file and add a +publishConfig+ section:

----
  "publishConfig" : {
    "registry" : "http://localhost:8081/repository/npm-internal/"
  },
----

Detailed information about package creation can be found on the https://docs.npmjs.com/cli/publish[npm website].

If your package requires the use of +npm scope+, Nexus supports this functionality. Packages published to Nexus
with a defined scope are reflected with the scope value populating the Nexus group field in Browse and Search.
Details on scoping are available on the https://docs.npmjs.com/misc/scope[npm website] also.

Once a package is published to the private registry in Nexus, any other developers or build servers that access Nexus
via the repository group have instant access to it.

[[npm-deprecating-packages]]
=== Deprecating npm Packages

Once your packages have been pushed to an npm hosted repository, you can mark them as deprecated. This is useful when a
newer version of the package is available, and you want to warn people that the old package has reached end of life or
you want to avoid usage and warn your users for some other reason.

The +npm deprecate+ command uses a +registry+ configuration value to inform where the package lives. To deprecate an
existing package, use a command like the following:

----
npm deprecate --registry http://localhost:8081/repository/npm-internal/ testproject1@0.0.1 "This package is deprecated"
----

If you change your mind, you can reverse this action using the same command. To undeprecate a package, pass an empty
string to the deprecate command:

----
npm deprecate --registry http://localhost:8081/repository/npm-internal/ testproject1@0.0.1 ""
----

The message text is persisted in the `deprecated` attribute of the 'packageJson' section for the asset and can be viewed
in the Nexus user interface.

////
/* Local Variables: */
/* ispell-personal-dictionary: "ispell.dict" */
/* End:             */
////
