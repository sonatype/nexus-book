[[pypi]]
== PyPI Repositories
{inall}

[[pypi-introduction]]
=== Introduction

The Python Package Index, or PyPI, is a vast repository of open-source Python packages supplied by the worldwide 
community of Python developers. The official PyPI is available for searches at
https://pypi.python.org/pypi[https://pypi.python.org/pypi], and the site itself is maintained by the
https://www.python.org/psf/[Python Software Foundation].

{pro} and {oss} support the Python Package Index (PyPI) repository format for proxy and hosted repositories. This 
allows the repository manager to take advantage of the packages in the Python Package Index and 
https://pypi.io/[Warehouse], a second generation Python package repository, without incurring repeated downloads 
of packages.

You can download and run libraries to retrieve, facilitate, and manage Python projects. Also, you can publish 
your own packages to a private index as a hosted repository on the repository manager. This allows you to reduce 
time and bandwidth usage for accessing Python packages as well as share your packages within 
your organization in a hosted repository.

////
Also, somewhere in the paragraph include how the repository manager supports PyPI packages as a repository group 
(as in... the repository group merges and exposes the contents of multiple repositories in one convenient URL)
Another note - can repoman upload and publish your own PyPIpackages and tools? Not sure
////  

[[pypi-proxy]]
=== Proxying PyPI Repositories

You can set up a PyPI proxy repository to access a remote repository location, such as the PyPI repository at 
https://pypi.python.org/pypi[https://pypi.python.org/pypi]. The index is maintained as the default location for  
Python packages.

To proxy a PyPI package, you simply create a new 'pypi(proxy)' recipe as documented in <<proxy-repository>>, in 
detail. Minimal configuration steps are:

* Define 'Name'
* Define URL for 'Remote storage' e.g. https://pypi.python.org/pypi[https://pypi.python.org/pypi]
* Select a 'Blob store' for 'Storage'

The repository manager can access Python packages and tools from the index. The proxy repository for PyPI 
packages provides a cache of files available on the index. This allows the local network client to access 
components from the Python Package Index more reliably.

The proxy configuration for a PyPI proxy repository includes a configuration URL to access the index. Users will 
be able to browse and search assets against a remote repository, as mentioned in <<pypi-browse-search>>.


[[pypi-hosted]]
=== Hosting PyPI Repositories

Creating a PyPI hosted repository allows you to upload packages in the repository manager. The hosted 
repository acts as an authoritative location for packages fetched from the Python index.

To host a PyPI package, create a new 'pypi(hosted)' recipe as documented in <<hosted-repository>>, in detail. 
Minimal configuration steps are:

* Define 'Name' - e.g. +pypi-internal+
* Select 'Blob store' for 'Storage'

////
Note: a ticket filed - NXBOOK-947 : Consistent naming of repos was created from a community member that might 
impact naming conventions for later examples
////

////
[[pypi-group]]
=== PyPI Repository Groups

TBD
////

[[pypi-installation]]
=== Installing PyPI Client Tools

The latest versions of such Linux distributions as CentOS and Ubuntu come packaged with Python 2.7 and 
https://pip.pypa.io/en/stable/[pip], a tool for installing and managing Python packages from the index. For Mac 
OS X and Microsoft Windows, download and install a Python version compatible with the repository manager from
https://www.python.org/downloads/[https://www.python.org/downloads/]. Download the pip installer from 
https://pip.pypa.io/en/stable/installing/[https://pip.pypa.io/en/stable/installing/].

NOTE: {pro} and {oss} support specific versions of Python, pip, and setuptools. For Python the repository 
manager supports 2.6, 2.7, 3.4, 3.5. For pip versions 7 and 8 are supported. Versions 19 and 20 of setuptools, 
used to build and distribute Python dependencies, are compatible with the repository manager.

////
Repository manager users might a re: since both twine and subsequently pip to install twine, would be hosted
Next install Twine. Twine is a utility that provides secure authentication to PyPI over HTTPS. Twine's only 
function is to upload distributions. If the user uses pip then here's a sample command:
////


[[pypi-configuration]]
=== Configuring PyPI Client Tools

NOTE: Depending on your preference for either https://pypi.python.org/pypi/setuptools[setuptools], 
https://pypi.python.org/pypi/twine[twine], https://docs.python.org/2.7/library/distutils.html[distutils], and pip 
your proxy and hosted configuration may vary.

Once you have installed all necessary client tools from the Python Package Index, you can create and configure 
a +.pypirc+ file to reference stored and proxied packages. Depending on your Python configuration you can use 
+pip.conf+ or +setup.cfg+ to have all commands run against your project.

////
This paragraph will be updated to mention pypirc behavior, interaction with PyPI repository group. 
////

If you are authoring your own packages and want to distribute them to other users in your organization, you have 
to upload them to a hosted repository on the repository manager, as explained in <<pypi-upload>>. The +.pypirc+ 
holds your credentials for authentication when hosting a PyPI repository.

Alternately you can create a +setup.cfg+. Like the +pip.conf+ option, the +index-url+ is the tag created to 
specify the base URL for the PyPI proxy index.

----
[easy_install]
index-url = http://localhost:8081/repository/pypi-proxy/simple
----

////
In paragraph above, add section that consumers can download the registered package via the repository group
Also, this sentence refers to registering "This establishes a metadata file in the repository that links to the 
source code repository". Leaving it here to confirm if the pypirc does such.
////

In the +.pypirc+, specify the URL for the target hosted repository in the +repository+ value, along with the 
+username+ and +password+ to access the repository manager. The +.pypirc+ file contains distutils, a default 
server used by PyPI that provides upload commands that stores assets and authentication information.

----
[distutils]
index-servers =
   nexus
 
[nexus]
repository = http://localhost:8081/repository/pypi-internal/
username = admin
password = admin123
----

If you use twine, a package used to verify HTTPS connections for hosted repositories, your +pip.conf+ file 
will contain metadata describing distribution properties present on the target system. +index+ is the 
authoritative location for hosted components in the repository manager. +index-url+ is the base URL designated 
for the cached index pages within the proxy repository. Here is an example of a +pip.conf+ file with a base URL 
pointing to a hosted repository:

----
[global]
index = http://localhost:8081/repository/pypi-internal/pypi
index-url = http://localhost:8081/repository/pypi-internal/simple
----

////
Config will eventually be group, i.e. pypi-all

----
[global]
index = http://localhost:8081/repository/pypi-all/pypi
index-url = http://localhost:8081/repository/pypi-all/simple
----
////

Alternately you can create a +setup.cfg+, if using easy_install. Like the +pip.conf+ option, the +index-url+ is 
the tag created to specify the base URL for hosted components from the index.

----
[easy_install]
index-url = http://localhost:8081/repository/pypi-internal/simple
----

////
Config will eventually be group, i.e. pypi-all

----
[global]
index = http://localhost:8081/repository/pypi-all/pypi
index-url = http://localhost:8081/repository/pypi-all/simple
----
////

////
add section on uploading distributions - see twine above
Uploading Distributions

add section on 
SSL Usage for PyPI Client Tools

You can secure inbound and outbound communication between the repository manager and the PyPI repository using 
SSL. This assumes the repository manager has already been set up to use SSL. If not review SSL configuration at 
<<ssl>>.

Update your +pip.conf+ as follows:
----
[global]
index = https://localhost:8443/repository/pypi-proxy/pypi
index-url = https://localhost:8443/repository/pypi-proxy/simple
cert = nexus.pem
----
////


[[pypi-browse-search]]
=== Browsing PyPI Repositories and Searching Packages

You can browse PyPI repositories in the user interface inspecting the components and assets and their details, as 
described in <<browse-browse>>.

Searching for PyPI packages can be performed in the user interface, as described in <<search-components>>. It 
finds all packages that are currently stored in the repository manager, either because they have been pushed
to a hosted repository or they have been proxied from an upstream repository and cached in the repository manager.

From the command line you can search available PyPI packages defined in your configuration. This method is 
limited to pip (+pip.conf+). To search, run:

----
pip search example-package
----

[[pypi-upload]]
=== Uploading PyPI Packages

NOTE: The steps to upload a PyPI package will vary if your system is configured with setuptools or twine.

After you configure your +.pypirc+ you can upload packages from the index to the repository manager.

In the example below, twine is invoked to tell your repository what server to use when uploading a package. The 
+-r+ flag is used to find the +nexus+ server in your +.pypirc+.

----
twine upload -r nexus <filename>
----