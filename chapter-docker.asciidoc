[[docker]]
== Private Registry for Docker
{inoss}

[[docker-introduction]]
=== Introduction

https://www.docker.com/[Docker] containers and their usage have revolutionized the way applications and the
underlying operating system are packaged and deployed to development, testing and production systems.

The creation of the http://opencontainers.org/[Open Container Initiative], and the involvement of a large number
of stakeholders, guarantees that the ecosystem of tools around the lightweight containers and their usage will
continue to flourish.

https://hub.docker.com/[Docker Hub] is the original registry for Docker container images and it is being joined by
more and more other publicly available registries such as the https://cloud.google.com/container-registry/[Google
Container Registry] and others.

Nexus supports Docker registries as the Docker repository format for hosted and proxy repositories. You can then
expose these repositories to the client-side tools directly or as a repository group, which is a repository that
merges and exposes the contents of multiple repositories in one convenient URL.

This allows you to reduce time and bandwidth usage for accessing Docker images in a registry as well as share
your images within your organization in a hosted repository. Users can then launch containers based on those
images, resulting in a completely private Docker registry with all the features available in the Nexus Repository
Manager.

[[docker-ssl-connector]]
=== SSL and Connector Configuration for Docker

Docker relies on secure connections using SSL to connect to the repositories. You are therefore required to
expose Nexus to your client tools via HTTPS. This can be configured via an external proxy server or directly with
Nexus. Further details can be found in <<ssl-inbound>>.

Interaction of the Docker client with Docker repositories requires specific ports to be used. These can be
configured in the repository configuration for Docker repositories in the 'Docker Connectors' section. In order
for this to work on your network, you need to ensure that the chosen ports are available in your organization and
not used by some other application, and that no firewall or other network configuration prevents connectivity.

NOTE: The Docker client does not allow a context as part of the path to a registry, as the namespace and image
name are embedded in the URLs it uses. This is why requests for Docker repositories on Nexus are served on a
specific and separate port from the rest of the application instead of how most other Nexus repositories serve
content via a path i.e. `<nexus-hostname>/<repositoryName>/<path to content>`.

The recommended minimal configuration requires one port for a Docker repository group used for read access to all
repositories and one port for each hosted Docker repository that will receive push events from your users. The
'Docker Connector' configuration displayed in <<fig-docker-connectors>> is available in the configuration for
proxy and hosted Docker repositories as well as Docker repository groups.

[[fig-docker-connectors]]
.Connector Configuration for Docker
image::figs/web/docker-connectors.png[scale=50]

If you have configured Nexus to use HTTPS directly, you have to configure a HTTPS docker connector. If an
external proxy server translates incoming HTTPS requests to HTTP and forwards the request to Nexus via HTTP you
have to configure the respective HTTP port.

TIP: A configured context-path for the Nexus user interface does not affect the Docker connector URLs. E.g. if
your Nexus instance is configured to be available at http://localhost:8081/nexus instead of the default root
context http://localhost:8081/, the URLs for your Docker repositories will still only use the configured port for
the repository and omit the context path in the URL. This is a side-effect of the the fact that Docker does not
support context paths in the registry API.

[[docker-registry-api]]
=== Support for ÃŸDocker Registry API

The Docker client tools interact with a repository via the registry API. It is available in version 1 (V1) and
version 2 (V2). The newer V2 will completely replace the old V1 in the future. Currently DockerHub and other
registries as well as other tools use V2, but in many cases fall back to V1. E.g., search is currently only
implemented in V1.

The Nexus repository managers support V1 as well as V2 of the API. All Docker repository
configurations contain a section to configure 'Docker Registry API Support'. If you activate 'Enable Docker V1
API' for a repository it is enabled to use V1 as a fallback from V2. Without this option any V1 requests result in
errors from the client tool.

TIP: We suggest to *only* activate V1 support for repository groups that will be used for command line-based
searches, when any client side tools in use require V1 or when a upstream proxy repository requires V1.

[[docker-proxy]]
=== Proxy Repository for Docker

Docker Hub is the common registry used by all image creators and consumers.  To reduce duplicate downloads and
improve download speeds for your developers and CI servers, you should proxy Docker Hub and any other registry
you use for Docker images.

To proxy a Docker registry, you simply create a new 'docker (proxy)' as documented in <<admin-repositories>> in
details.

Minimal configuration steps are:

- Define 'Name'
- Define URL for 'Remote storage'
- 'Enable Docker V1 API' support, if required by the remote repository
- Select correct 'Docker index' and configure it
- Select 'Blobstore' for 'Storage'

Optionally you can configure 'Docker Connectors' as explained in <<docker-ssl-connector>>, although typically
read access is done via a repository group and not a proxy repository directly, and write access is done against
a hosted repository.

The 'Remote Storage' has to be set to the URL of the remote registry you want to proxy. The configuration for
proxying Docker Hub uses the URL `https://registry-1.docker.io` for the 'Remote storage' URL.

The 'Proxy' configuration for a Docker proxy repository includes a configuration URL to access the 'Docker
Index'. The index is used for requests related to searches, users, docker tokens and other aspects. The registry
and the index are typically co-hosted by the same provider, but can use different URLs. E.g. the index for Docker
Hub is exposed at `https://index.docker.io/`.

The default option 'Use proxy registry (specified above)' will attempt to retrieve any index data from the same
URL configured as the 'Remote storage' URL.

The option to 'Use Docker Hub' fulfills any index related requests by querying the Docker Hub index at
`https://index.docker.io/`. This configuration is desired when the proxy repository is Docker Hub itself or any
of its mirrors.

The option to use a 'Custom index' allows you to specify the URL of the index for the remote repository.

It is important to configure a correct pair of 'Remote Storage' URL and 'Docker Index' URL. In case of a mismatch,
search results potentially do not reflect the content of the remote repository and other problems can occur.

TIP: Just to recap, in order to configure a proxy for Docker Hub you configure the 'Remote Storage' URL to
https://registry-1.docker.io, enable Docker V1 API support and for the choice of 'Docker Index' select the 'User
Docker Hub' option.

[[docker-hosted]]
=== Hosted Repository for Docker (Private Registry for Docker)

A hosted repository using the Docker repository format is typically called a private Docker registry. It can be
used to upload your own container images as well as third-party images. It is common practice to create two
separate hosted repositories for these purposes.

To create a Docker hosted repository, simply create a new 'docker (hosted)' repository as documented in
<<admin-repositories>>.

Minimal configuration steps are:

- Define 'Name'
- Select 'Blobstore' for 'Storage'

If you add a 'Docker Connectors' configuration as documented in <<docker-ssl-connector>> you can `push` images to this
repository, and subsequently access them directly from the hosted repository or ideally from the Docker repository group
as documented in <<docker-group>>.

By default this step will allow repeated deployment of images. If you want to enforce new deployments using different
versions, set the 'Deployment Policy' to 'Disable Redeploy'.

[[docker-group]]
=== Repository Groups for Docker

A repository group is the recommended way to expose all your Docker repositories for read access from Nexus to
your users. It allows you to pull images from all repositories in the group without needing any further client
side configuration after the initial setup. A repository group allows you to expose the aggregated content of
multiple proxy and hosted repositories with one URL to your tools.

To create a Docker repository group, simply create a new 'docker (group)' repository as documented in
<<admin-repositories>>.

Minimal configuration steps are:

- Define 'Name'
- Select 'Blobstore' for 'Storage'
- Add Docker repositories to the 'Members' list in the desired order

Typically the member list includes a mixture of proxy and hosted repositories to allow access to public as well
as private images.

Using the 'Docker Connectors' port of the repository group and the Nexus URL in your client tool gives you access
to the container images in all repositories from the group. Any new images added as well as any new repositories
added to the group will automatically be available.

TIP: Check out this repository configuration demonstrated in link:https://www.youtube.com/watch?v=oxCztw5MfAw[a
video].

=== Authentication for Docker

The first invocation of any command against a Nexus Docker connector and therefore a Docker repository or
repository group triggers a login request. Provide the Nexus username and password as well as an email address to
Docker. This authentication is persisted in `~/.docker/config.json` and reused for any subsequent interaction.

=== Accessing Repositories for Docker

You can browse Docker repositories in the Nexus user interface and inspect the components and assets and their
details as documented in <<browse-browse>>.

When using the 'docker' command line client or any other tools using Nexus indirectly the common structure for
commands can be:

----
docker <command> <nexus-hostname>:<repository-port>/<namespace>/<image>:<tag>
docker search <nexus-hostname>:<repository-port>/<search-term>

----

with

command:: a docker command such a 'push' or 'pull'
nexus-hostname:: the IP number or hostname of your Nexus server
repository-port:: the port configured as the Docker connector for the specific repository or repository group
namespace:: the namespace of the specific image reflecting the owner
image:: the name of the Docker image
tag:: the optional tag of the image, defaulting to 'latest' when omitted
search-term:: the search term or name of the image to search for

The most important aspects are to know and use the correct hostname for the Nexus server and the port for the
desired repository or repository group.

[[docker-search]]
=== Searching for Docker Images

Searching for Docker images can be performed in the Nexus user interface as described in <<search-components>>.
This search will find all Docker images that are currently stored in Nexus repositories, either because they have
been pushed to a hosted repository or they have been proxied from an upstream repository and cached in Nexus.

The more common use case for a Docker user is to search for images on the command line:

----
$ docker search postgres
NAME      DESCRIPTION                                  STARS  OFFICIAL  AUTOMATED
postgres  The PostgreSQL object-relational database... 1025   [OK]
...
----

By default this search uses Docker Hub as preconfigured in Docker and will only find images available there. A
more powerful search is provided by Nexus when searching against a Docker repository group with the syntax

----
docker search <nexus-hostname>:<repository-port>/<search-term>
----

with

nexus-hostname:: the IP number or hostname of your Nexus server
repository-port:: the port configured as the Docker connector for the specific repository or repository group
search-term:: the search term or name of the image to search for

An example looking for a `postgres` image on a Nexus server running on the host `nexus.example.com` and exposing a
Docker repository group with a Docker connector port of 18443 looks like this:

----
docker search nexus.example.com:18443/postgres
----

The results include all Docker images found in the repositories that are part of the repository group. This
includes any private images you have pushed to your hosted repositories. In addition it includes all results
returned from the remote repositories configured as proxy repositories in the group.

[[docker-pull]]
=== Pulling Docker Images

Downloading Docker images, also known as pulling, from Nexus can be performed with the Docker `pull`. The only
necessary additions are the hostname or IP address of the Nexus server as well as the Docker connector port for
the repository or repository group to download from:

----
docker pull <nexus-hostname>:<repository-port>/<image>
----

The preferred setup is to proxy all relevant sources of public/private images you want to use with Docker Hub
being the most common choice. Then configure one or more hosted repositories to contain your own images, and
expose these repositories through one Docker group repository.

Examples for various images from a Nexus server running on the host `nexus.example.com` and exposing a Docker
repository group with a Docker connector port of 18443 are:

----
docker pull nexus.example.com:18443/ubuntu
docker pull nexus.example.com:18443/bitnami/node
docker pull nexus.example.com:18443/postgres:9.4
----

These snippets download the official `ubuntu` image, the `node` image from the user `bitnami` and the version 9.4 of the
`postgres` image. Official images such as `ubuntu` or `postgres` belong to the `library` user on Docker Hub and will
therefore show up as `library/ubuntu` and `library/postgres` in Nexus.

After a successful `pull` you can start the container with `run`.

[[docker-push]]
=== Pushing Docker Images

Sharing a Docker image can be achieved, by publishing it to a hosted repository in Nexus. This is completely 
private and requires you to `tag` and `push` the image. To tag an image, the image identifier (imageId) is 
required.  It is listed when showing the list of all images with `docker images`. Syntax and an example are for 
creating a tag are

----
docker tag <imageId> <nexus-hostname>:<repository-port>/<image>:<tag>
docker tag af340544ed62 nexus.example.com:18444/hello-world:mytag
----

Once the tag, which can be equivalent to a version, is created successfully, you can confirm its creation with 
`docker images` and issue the push with the syntax:

----
docker push <nexus-hostname>:<repository-port>/<image>:<tag>
----

IMPORTANT: Note that the repository port needs to be the Docker connector port configured for the *hosted*
repository to which you want to push to. You can not push to a repository group or a proxy repository.


A sample output could look like this:

----
$ docker push nexus.example.com:18444/hello-world:labeltest
The push refers to a repository [nexus.example.com:18444/hello-world] (len: 1)
Sending image list
Pushing repository nexus.example.com:18444/hello-world (1 tags)
535020c3e8ad: Image successfully pushed
af340544ed62: Image successfully pushed
Pushing tag for rev [af340544ed62] on
{https://nexus.example.com:18444/repository/docker-internal/v1/repositories/hello-world/tags/labeltest}
----

Now, this updated image is available in Nexus and can be pulled by anyone with access to the repository, or the
repository group, containing the image. Pulling the image from the repository group exposed at port 18443 can be 
done with:

----
docker pull nexus.example.com:18443/hello-world:labeltest
----

Prior to push, and depending on your Nexus configuration, Nexus login credentials may be required before a push
or pull can occur.

TIP: Searching, Browsing, Pushing and Pulling are all showcased in
link:https://www.youtube.com/watch?v=Z2jH9LgeeI8[this video].

Pushing large Docker images can result in failures due to network interruptions and other issues. These partial
uploads result in temporary storage for these transfers in the repository manager filling up. The task 'Purge
Incomplete Docker Uploads' can be configured to delete these files. Further documentation can be found in
<<admin-system-tasks>>.


////
/* Local Variables: */
/* ispell-personal-dictionary: "ispell.dict" */
/* End:             */
////
