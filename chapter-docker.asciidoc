[[docker]]
== Docker Container Registry Support
{in} {oss}, {pro}, {proplus}

https://www.docker.com/[Docker] containers and their usage have revolutionized the way applications and the underlying
operating system are packaged and deployed to development, testing and production systems.

The creation of the http://opencontainers.org/[Open Container Initiative], and the involvement of a large number of
stakeholders, guarantees that the ecosystem of tools around the lightweight containers and their usage will continue to
flourish.

https://hub.docker.com/[Docker Hub] is the original registry for Docker container images and it is being joined by more
and more other publicly available registries such as the https://cloud.google.com/container-registry/[Google Container
Registry] and others.

Nexus supports Docker registries as the Docker repository format for hosted and proxy repositories. You can then expose
these repositories to the client-side tools directly or as a repository group, which is a repository that merges and
exposes the contents of multiple repositories in one convenient URL.

This allows you to reduce time and bandwidth usage for accessing Docker containers in a registry as well as share your
containers within your organization in a hosted repository as a completely private Docker registry.

[[docker-ssl-connector]]
=== SSL and Docker Connector Configuration

Docker relies on secure connections using SSL to connect to the repositories. You are therefore required to expose Nexus
to your client tools via HTTPS. This can be configured via an external proxy server or directly with Nexus. Further
details can be found in <<ssl-inbound>>.

Interaction of the Docker client with Docker repositories requires specific ports to be used. These can be configured in
the repository configuration for Docker repositories in the 'Docker Connectors' section. In order for this to work on
your network you need to ensure that the chosen ports are available in your organization and not used by some other
application, and that no firewall or other network configuration prevents connectivity.

NOTE: The Docker client does not allow a context as part of the path to a registry, as the namespace and image name are
 embedded in the URLs it uses. This is why requests for Docker repositories on Nexus are served on a specific and separate
 port from the rest of the application instead of how most other Nexus repositories serve content,
 i.e. <nexus-hostname>/<repositoryName>/<path to content>

The recommended minimal configuration requires one port for a Docker repository group used for read access to all
repositories and one port for each hosted Docker repository that will receive push events from your users. The 'Docker
Connector' configuration displayed in <<fig-docker-connectors>> is available in the configuration for proxy and hosted
Docker repositories as well as Docker repository groups.

[[fig-docker-connectors]]
.Docker Connector Configuration
image::figs/web/docker-connectors.png[scale=50]

If you have configured Nexus to use HTTPS directly, you have to configure a HTTPS docker connector. If an external proxy
server translates incoming HTTPS requests to HTTP and forwards the request to Nexus you have to configure the respective
HTTP port.

[[docker-proxy]]
=== Docker Proxy Repositories

Docker Hub is the common registry used by all container creators and consumers.  To reduce duplicate downloads and
improve download speeds for your developers and CI servers, you should proxy Docker Hub and any other container registry
you use.

To proxy a Docker registry, you simply create a new 'docker (proxy)' as documented in <<admin-repositories>> in
details.

Minimal configuration steps are:

- Define 'Name'
- Define URL for 'Remote storage'
- Select correct 'Docker index' and configure it
- Select 'Blobstore' for 'Storage'

Optionally you can configure 'Docker Connectors' as explained in <<docker-ssl-connector>>, although typically read
access is done via a repository group and not a proxy repository directly, and write access is done against a hosted
repository.

The 'Remote Storage' has to be set to the URL of the remote registry you want to proxy.

The configuration for proxying Docker Hub uses the URL `https://registry-1.docker.io` for the 'Remote storage' URL.

The 'Proxy' configuration for a Docker proxy repository includes a configuration URL to access the 'Docker Index'. The
index is used for requests related to searches, users, docker tokens and other aspects. The registry and the index are
typically co-hosted by the same provider, but can use different URLs. E.g. the index for Docker Hub is exposed at
`https://index.docker.io/`.

The default option 'Use proxy registry (specified above)' will attempt to retrieve any index data from the same URL
configured as the 'Remote storage' URL.

The option to 'Use Docker Hub' fulfills any index related requests by querying the Docker Hub index at
`https://index.docker.io/`. This configuration is desired when the proxy repository is Docker Hub itself or any of its
mirrors.

The option to use a 'Custom index' allows you to specify the URL of the index for the remote repository.

It is important to configure a correct pair of 'Remote Storage' URL and index URL. In case of a mismatch, search
results potentially do not reflect the content of the remote repository and other problems can occur.

TIP: Just to recap, in order to configure a proxy for Docker Hub you should configure the 'Remote Storage' URL to
https://registry-1.docker.io and for the choice of 'Docker Index' select the 'User Docker Hub' option.

[[docker-hosted]]
=== Docker Hosted Repositories

A hosted repository using the Docker repository format is typically called a private Docker registry. It can be used to
upload your own container images as well as third-party images. It is common practice to create two separate hosted
repositories for these purposes.

To create a Docker hosted repository, simply create a new 'docker (hosted)' repository as documented in
<<admin-repositories>>.

Minimal configuration steps are:

- Define 'Name'
- Select 'Blobstore' for 'Storage'

If you add a 'Docker Connectors' configuration as documented in <<docker-ssl-connector>> you can `push` images to this
repository, and subsequently access them directly from the hosted repository or ideally from the Docker repository group
as documented in <<docker-group>>


[[docker-group]]
=== Docker Repository Groups

A repository group is the recommended way to expose all your Docker repositories for read access from Nexus to your
users, without needing any further client side configuration after the initial setup. A repository group allows you to
expose the aggregated content of multiple proxy and hosted repositories with one URL to your tools.

To create a Docker hosted repository, simply create a new 'docker (group)' repository as documented in
<<admin-repositories>>.

Minimal configuration steps are:

- Define 'Name'
- Select 'Blobstore' for 'Storage'
- Add Docker repositories to the 'Members' list in the desired order

Using the 'URL' of the repository group can be used in your client tool and will give you access to the container images
in all repositories from the group with one URL. Any new images added as well as any new repositories added to the group
will automatically be available.

=== Authentication

The first invocation of any command against a Nexus Docker connector and therefore a Docker repository or repository
group triggers a login request. Provide the Nexus username and password as well as an email address to Docker. This
authentication is persisted in `~/.docker/config.json` and reused for any subsequent interaction.

[[docker-search]]
=== Searching

Searching for Docker images can be performed in the Nexus user interface as described in <<search-components>>. This
search will find all Docker images that are currently stored in Nexus repositories, either because they have been pushed
to a hosted repository or they have been proxied from an upstream repository and cached in Nexus.

The more common use case for a Docker user is to search for images on the command line:

----
$ docker search postgres
NAME      DESCRIPTION                                  STARS  OFFICIAL  AUTOMATED
postgres  The PostgreSQL object-relational database... 1025   [OK]
...
----

By default this search uses Docker Hub as preconfigured in Docker and will only find images available there. A more
powerful search is provided by Nexus when searching against a Docker repository group with the syntax

----
$ docker search <nexus-hostname>:<repository-port>/<search-term>
----

with

nexus-hostname:: the IP number or hostname of your Nexus server
repository-port:: the port configured as the Docker connector for the specific repository or repository group
search-term:: the search term or name of the image to search for

An example looking for a `postgres` image on a Nexus server running on the host `nexus.example.com` and exposing a Docker
repository group with a Docker connector port of 18443 looks like this:

----
$ docker search nexus.example.com:18443/postgres
----

The results include all Docker images found in the repositories that are part of the repository group. This includes any
private images you have pushed to your hosted repositories. In addition it includes all results returned from the remote
repositories configured as proxy repositories in the group.

[[docker-access]]
=== Pulling/Pushing Docker Images

Downloading Docker images from (pulling), or uploading to (pushing), Nexus can be performed with the Docker `pull`, or
`push`, command. The only necessary additions are the hostname or IP address of the Nexus server as well
as the Docker connector port for the repository or repository group to download from:

*Pull Example**

----
docker pull <nexus-hostname>:<repository-port>/<image>
----

*Push Example*

----
docker push <nexus-hostname>:<repository-port>/<image>
----

NOTE: All commands using the Docker client against Nexus follow a common structure:
----
docker <command> <nexus-hostname>:<repository-port>/<namespace>/<image>:<tag>
----

The preferred setup is to proxy a relevant source of public/private images you want to use (Docker Hub being the most
common choice), configure one or more hosted repositories to contain your own images, and expose these repositories
through one Docker group repository.

Examples for various images from a Nexus server running on the host `nexus.example.com` and exposing a Docker
repository group with a Docker connector port of 18443 are:

----
docker pull nexus.example.com:18443/ubuntu
docker pull nexus.example.com:18443/bitnami/node
docker pull nexus.example.com:18443/postgres:9.4
----

These snippets download the official `ubuntu` image, the `node` image from the user `bitnami` and the version 9.4 of the
`postgres` image. Official images such as `ubuntu` or `postgres` belong to the `library` user on Docker Hub and will
therefore show up as `library/ubuntu` and `library/postgres` in Nexus.

After a successful `pull` you can start the container with `run`.

If we build or modify an image...

----
docker tag <imageId> nexus.example.com:18443/ubuntu:my_update
----

and then want to push that up to our Nexus repository. It might look
something like this:

----
docker push nexus.example.com:18443/ubuntu:my_update
----

Now, this updated image would be ready to be pulled by anyone with access to the repository.

NOTE: Prior to push, and depending on your Nexus configuration, Nexus login credentials may be required before a push
or pull can occur.


////
/* Local Variables: */
/* ispell-personal-dictionary: "ispell.dict" */
/* End:             */
////
