[[ssl]]
== Configuring Nexus for SSL

[[ssl-sect-introduction]]
=== Introduction

Using Secure Socket Layer SSL to secure protocols like http, ldap and
smtp is a critical step of securing your Nexus setup. Since Nexus is
serving content as well as connecting to external sources there are
two aspects of SSL configuration related to Nexus:

* Configuring SSL certificate usage when connecting to external
  systems including

** Proxying a remote repository available via https

** Connecting to a SSL secured SMTP server 

** Connecting to an LDAP server via ldaps

* Exposing the Nexus user interface and content via https

Securing all connections to external systems with SSL as well as
exposing Nexus via SSL are both recommended best practices for
any deployment. 

Especially when you set up a repository manager for a team of
developers spread out over a variety of locations both internal and
external to a corporate network, you will likely want to secure your
repository using SSL.

[[ssl-sect-client-cert]]
=== SSL Client Certificates

[[ssl-sect-client-cert-mgt]]
==== SSL Certificate Management

Nexus allows you to manage all SSL certificates directly in the user
interface. The administration interface for SSL certificates as
visible in <<fig-ssl-certificates-list>> and can be accessed by
selecting 'SSL Certificates' in the left hand 'Administration'
menu. The list of certificates displayed shows the certificate for the
SSL secured Central Repository preconfigured in Nexus Professional and
a self signed certificate registered in Nexus.

NOTE: The SSL Certificate Management is a Nexus Professional feature.

[[fig-ssl-certificates-list]]
.SSL Certificates Administration
image::figs/web/ssl-certificates-list.png[scale=50]

The actual list of SSL certificates can be reloaded by clicking the
'Refresh' button above the list. In addition certificates can be added
and deleted with the 'Add' and 'Delete' buttons.

Pressing the add button provides a choice to load a certificate from a
server with the 'Load from server' option or to insert a certificate
in PEM format with the 'Paste PEM'.

The dialog to load a certificate from a server allows you to provide a
hostname, a hostname:port string or a full URL. When providing a
hostname a connection via http:// using the default SSL port 443 will
be attempted. Using a full URL on the other hands gives the most
control.

As an example you could retrieve the certificate for the secured Central
Repository using the url
'https://secure.central.sonatype.com'. Besides retrieving certificates
for servers running https you can retrieve and therefore register the
certificate for email and directory servers. An LDAP directory server
certificate can be loaded with a URL using the ldaps protocol and the
desired hostname and port similar to 'ldaps://localhost:10636'. A SMTP
server can be queried with a similar pattern using
'smtps://localhost:465'. After successful retrieval the details of the
certificate as displayed in a dialog. <<fig-ssl-add-server>> shows the
result from querying a certificate from
'smtps://smtp.gmail.com:465'. Pressing the 'Add Certificate' button
will save the certificate within Nexus and allow you to connect to the
associated services.

[[fig-ssl-add-server]]
.Certificate Details Displayed After Successful Retrieval
image::figs/web/ssl-add-server.png[scale=50]

The dialog displays details about the certificate owner in the
'Subject' section, the certificate issuer in the 'Issuer' section and
the certificate itself in the 'Certificate' section. The same data is
displayed below the list of certificates when you select a specific
certificate in the list.

The alternate method of registering a certificate with Nexus uses the
PEM format of the http://en.wikipedia.org/wiki/X.509[X.509
certificate] as used by SSL. An example of inserting such a certificate
in the dialog is shown in <<fig-ssl-pem>>.

[[fig-ssl-pem]]
.Providing a Certificate in PEM Format
image::figs/web/ssl-pem.png[scale=50]

Once a certificate for an LDAP server or SMTP server has been
registered in Nexus, you can configure connections to these servers in
the LDAP and Server/SMTP Settings administration user interfaces.

==== Proxying SSL Secured Repositories

When setting up a proxy repository with a remote storage location
secured with https the repository administration will display an 'SSL'
configuration tab under the list of repositories, if the proxy
repository is selected. For a repository using a self signed
certificate the repository status will initially be set to be in
service, but the remote will be automatically blocked and set to be
unavailable, since the certificate of the remote server is not
trusted. Remote repositories that use a CA signed certificate will be
automatically trusted.

The 'SSL' tab displays as visible in <<fig-ssl-secure-central>> the
details of the certificate and allows you to add the certificate to
the truststore or to remove it from it with the button on the top
right hand corner named 'Add to trust store' and 'Remove from trust
store' respectively. 

In addition the checkbox on the top left corner allows you to store
the certificate in the Nexus internal SSL trust store. Otherwise the
certificate is installed into the trust store of the JVM running
Nexus. Using the Nexus internal trust store will work fine even when
migrating Nexus from one machine to another or when switching the Java
runtime and JVM between restarts for example during upgrades, and is
therefore recommended. At runtime the JVM and Nexus trust stores are
merged and both used so you can use a combination, if you organization
e.g. maintains a default trust store for all JVM installations.

[[fig-ssl-secure-central]]
.SSL Tab for a Proxy Repository with Remote Server Using HTTPS
image::figs/web/ssl-secure-central.png[scale=50]

When removing a certificate from the trust store, a Nexus restart is required.

==== Manually Configuring Trust Stores

The Nexus user interface should be sufficient to work with the trust
stores and certificates. However in older version of Nexus as well as
some use cases you need to manually configure the trust store. 

Sonatype provides an import-ssl tool, which can be downloaded from:
http://central.sonatype.com/help/import-ssl.jar. It allows you to
import a client certificate in two steps: 

* importing the server's SSL chain and 
* importing the client SSL key/certificate pair.

The Java Virtual Machine running Nexus uses the
http://docs.oracle.com/javase/6/docs/technotes/guides/security/jsse/JSSERefGuide.html[Java
Secure Socket Extension (JSSE)] to enable secure Internet
communication. It uses two certificate stores - the truststore and the
keystore.

A truststore contains certificates from servers run by other parties
that you expect to communicate with, or from Certificate Authorities
that you trust to identify other parties. This truststore ships with a
number of CA's out of the box - trusted root certificates.

A keystore contains private keys, and the certificates with their
corresponding public keys.

Typically they are stored in separate files stored in the default location of
${JRE_HOME}/lib/security/cacerts.

Some notes about the location of the key-store and default
key-store passwords:

* If you are using the default JSSE key-store locations on either a
Linux or OS X platform, you must run the commands below as the
root user. You can do this either by changing to the root user (su -),
or by using the sudo command: sudo [command].

* The default password used by Java for the built-in key-stores is
'changeit'. If your key-store uses a different password, you'll need to
specify that password as the last parameter on the command lines
above.

* If you want to specify your own key-store/truststore file, provide that in
place of <keystore_dir> in the examples below.

* If you're using a password other than 'changeit' for your keystore,
you should supply it immediately following the keystore path in the
commands below.

* If you specify a keystore location that doesn't exist, the
import-ssl utility will create it on-demand.

Before you begin the process of importing a Server SSL Chain and a
client certificate you will need three things:

* Network access to the SSL server you are connecting to,

* An SSL client certificate, 

* and a certificate password.

For server certificates you should either import directly into
${JRE_HOME}/lib/security/cacerts, or make a copy of the file and
import into that. 

WARNING: If you replace the existing truststore rather than adding to
it or if you override the truststore location, you will lose all of
the trusted CA root certificates of the JRE and no SSL sites will be
accessible.

===== Import the Server SSL Chain

The first command imports the entire self-signed SSL certificate chain
for central.sonatype.com into your JSSE keystore:

----
$ java -jar import-ssl.jar server central.sonatype.com <keystore>
----

You would substitute the server name used in the previous listing with
the server name you are attempting to connect to. This particular
command will connect to https://central.sonatype.com, retrieve, and
import the server's SSL certificate chain.

===== Import the Client SSL Key/Certificate Pair

The second command imports your client-side SSL certificate into the
JSSE keystore, so Nexus can send it along to the server for
authentication:

----
$ java -jar import-ssl.jar client <your-certificate.p12> \
<your-certificate-password> keystore
----

When the client command completes, you should see a line containing
the keystore path, like the one that follows. This path is important;
you will use it in your Nexus configuration below, so make a note of
it!

----
...
Writing keystore: /System/Library/Frameworks/JavaVM.framework/\
Versions/1.6.0/Home/lib/security/jssecacerts
----

If you want to make a new keystore to import your keys into, you will
have to use the keytool that ships with your Java installation to
create an empty keystore:

----
keytool -genkey -alias foo -keystore keystore 
keytool -delete -alias foo -keystore keystore 
----

TIP: Make sure to use the keytool commands for your Java version used
to run Nexus. The documentation for keytool is available online for
http://docs.oracle.com/javase/6/docs/technotes/tools/windows/keytool.html[Java
6] as well as
http://docs.oracle.com/javase/7/docs/technotes/tools/windows/keytool.html[Java
7].


===== Configuring Nexus Start-up

Once both sets of SSL certificates are imported to your keystore
and/or truststore, you can modify the 'wrapper.conf' file located
in '$NEXUS_HOME/bin/jsw/conf/' to inject the JSSE system properties necessary
to use these certificates, as seen below adapting the iterator number
(10, 11.. ) to start at the last used value, which depends on the rest
of your configuration.

----
warpper.java.additional.10=-Djavax.net.ssl.keyStore=<keystore>
warpper.java.additional.11=-Djavax.net.ssl.keyStorePassword=<keystore_password>
warpper.java.additional.12=-Djavax.net.ssl.trustStore=<truststore>
warpper.java.additional.13=-Djavax.net.ssl.trustStorePassword=<truststore_password>
----

Once you have configured the Nexus start-up option shown above, restart
Nexus and attempt to proxy a remote repository which requires an SSL
client certificate. Nexus will use the keystore location and keystore
password to configure the SSL interaction to accept the server's SSL
certificate and send the appropriate client SSL certificate using the
manual configuration you have complete with the import-ssl tool.

[[ssl-sect-ssl-direct]]
=== Configuring Nexus to Serve SSL

Providing access to the Nexus user interface and content via https
only is a recommended best practice for any deployment.

The recommended approach to implementation is to proxy Nexus behind a
server that is configured to serve content via SSL and leave Nexus
configured for http. The advantage of this approach is that Nexus can
easily be upgraded and there is no need to work with the JVM
truststore. In addition you can use the expertise of your system
administrators and the preferred server for achieving the proxying,
which in most cases will already be in place for other systems.

Common choices are servers like Apache httpd, nginx, Eclipse Jetty or
even dedicated hardware appliances. All of them can easily be
configured to serve SSL content and there is a large amount of
reference material available for configuring these servers to serve
secure content. For example Apache httpd would be configured to use
mod_ssl.

Alternatively the Jetty instance that is part of the default Nexus
install can be configured to serve SSL content directly, and if you
would like to avoid the extra work of putting a web server like Apache
httpd in front of Nexus, this section shows you how to do that.

TIP: Keep in mind that you will have to redo some of these
configurations each time you upgrade Nexus, since they are
modifications to the embedded Jetty instance located in '$NEXUS_HOME'.

To configure Nexus to serve SSL directly to clients, you'll need to
perform the following steps.

NOTE: All examples given here can be found in the Nexus distribution
under '+++$(NEXUS_HOME)/conf/examples+++'. Before you customize your
Nexus configuration to serve SSL, keep in mind the following:

* Any custom Jetty configuration must be contained in the
'+++$(NEXUS_HOME)/conf/jetty.xml+++' file, or else in the location
referenced by the jetty.xml property in
'+++$(NEXUS_HOME)/conf/nexus.properties+++' (in case you've customized
this location).

* While the instructions below will work with Nexus Open Source, these
instructions assume the filesystem of Nexus Professional. If you are
missing Jetty JAR files, you should obtain them from the Jetty project
page: http://www.eclipse.org/jetty/

==== Configure the Java Keystore

Follow the instructions on the
http://wiki.eclipse.org/Jetty/Howto/Configure_SSL[How to configure
SSL] page on the Jetty Wiki to setup the appropriate keys and
certificates in a form that Jetty can use.

The jetty-util jar and the main Jetty jar can be found in
$NEXUS_HOME/lib. The command line used to import
an OpenSSL key+cert in PKCS12 format is:

----
$ keytool -importkeystore -srckeystore <your-certificate.p12> -srcstoretype PKCS12 -destkeystore <keystore> -deststoretype JKS
----

The command line used to generate an obfuscated password hash is:

----
$ java -cp jetty-util-8.1.11.v20130520.jar org.eclipse.jetty.util.security.Password <your-password>
----

Note that the version number on the jetty-util jar file (here shown as "8.1.11.v20130520")
may be different in your version of Nexus.

The OBF line that is the out of the command above will be used in the jetty.xml
three times. You'll need to run the previous command three times to
generate the obfuscated hash-codes for three passwords:

* The Key Password

* The Trust Store Password

* The Key Store Password

In the next section, the key store and trust store are the same
file, with the same password.

==== Configure Nexus/Jetty to Use the New Keystore

A jetty.xml with the modifications of the jetty.xml required can be found
in $NEXUS_HOME/conf/examples/jetty-ssl.xml, inside your Nexus
distribution.

Insert the OBF output from earlier command in the 'addConnector'
section in the setters for 'password', 'keyPassword' and
'trustPassword'.

==== Modify the application-port for SSL connections

The '${application-port}' property, referenced in the configuration,
has a default configuration that many people would more naturally
associate with non-SSL connections. You may wish to modify this port
to something like 8443, or even 443 (if you have root access from
which to start Nexus). To change this property, modify the
'+++$(basedir)/conf/nexus.properties+++'

NOTE: You may wish to enable both types of connections, with
appropriate rewrite rules between them. Such a configuration is beyond
the scope of this section; if you're interested, please refer to the
http://www.eclipse.org/jetty/documentation/[Jetty Documentation Hub]
for some information to get you started. Additionally, you may need to
add extra port properties to the nexus.properties configuration file
to accommodate both SSL and non-SSL connections.

[[ssl-sect-redirecting]]
=== Redirecting Non-SSL Connections to SSL

If you want to make it very easy for people to use your Nexus
repository, you will want to configure the automatic redirect from the
non-SSL port (default 80) to the SSL port (default 443). 

With the recommended practice of using an external proxy server to for
SSL, you would setup a redirect in the respective proxy server.
With a web server like Apache
httpd, you could configure mod_rewrite to automatically redirect
browsers to the SSL port, or you can configure Jetty to perform this
redirection. 

If you however configured Nexus to directly serve SSL as documented in
<<ssl-sect-ssl-direct>>, the following instructions can be used to
configure Nexus to redirect appropriately.

When this feature is configured, browsers and clients that attempt to
interact with the non-SSL port will be seamlessly redirected to the
SSL port. If you do not turn on the automatic redirect to SSL, users
who attempt to load the Nexus interface via the default port 80 will
see a network error.

To do this in Jetty

To enable this feature, configure Jetty to serve SSL directly as
demonstrated in <<ssl-sect-ssl-direct>>. After you have configured
Jetty to serve SSL directly, you use a custom rewrite rule for Jetty
that is bundled with Nexus. Open your jetty.xml and replace the
existing handler/context-collection declaration with a stand-alone
context-collection declaration, by replacing the 'handler' section
starting with

----
<Set name="handler">
  <New id="Contexts" class="org.eclipse.jetty.handler.ContextHandlerCollection">
...
----

with this one:

----
<New id="Contexts" class="org.eclipse.jetty.handler.ContextHandlerCollection">
  <!-- The following configuration is REQUIRED, and MUST BE FIRST.
       It makes the Plexus container available for use in the Nexus webapp. -->
  <Call name="addLifeCycleListener">
    <Arg>
      <New 
         class="org.sonatype.plexus.jetty.custom.InjectExistingPlexusListener" />
    </Arg>
  </Call>

  <!-- The following configuration disables JSP taglib support, the 
      validation of which slows down Jetty's start-up significantly. -->
  <Call name="addLifeCycleListener">
    <Arg>
      <New class="org.sonatype.plexus.jetty.custom.DisableTagLibsListener" />
    </Arg>
  </Call>
</New>
----

Now, configure the rewrite handler for Jetty by adding the following
section just above the line with stopAtShutdown in it:

----
<Set name="handler">
  <New id="Handlers" class="org.eclipse.jetty.handler.rewrite.RewriteHandler">
    <Set name="rules">
      <Array type="org.eclipse.jetty.handler.rewrite.Rule">
        <Item>
          <New id="redirectedHttps"
             class="org.sonatype.plexus.jetty.custom.RedirectToHttpsRule">
            <Set name="httpsPort">${application-port-ssl}</Set>
          </New>
        </Item>
      </Array>
    </Set>
    <Set name="handler">
      <New id="Handlers" class="org.eclipse.jetty.handler.HandlerCollection">
        <Set name="handlers">
          <Array type="org.eclipse.jetty.Handler">
            <Item><Ref id="Contexts"/></Item>
            <Item>
              <New id="DefaultHandler" 
                class="org.eclipse.jetty.handler.DefaultHandler"/></Item>
            <Item>
              <New id="RequestLog" 
                class="org.eclipse.jetty.handler.RequestLogHandler"/></Item>
          </Array>
        </Set>
      </New>
    </Set>
  </New>
</Set>
----

Modify $NEXUS_HOME/conf/nexus.properties
and add a new property, application-port-ssl. This will
allow you to customize both the SSL and non-SSL ports
independently:

----
application-port-ssl=8443
----

////
/* Local Variables: */
/* ispell-personal-dictionary: "ispell.dict" */
/* End:             */
////
